//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1 {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetFat")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetFat : Devart.Data.MySql.MySqlDataSet {
        
        private cargosDataTable tablecargos;
        
        private carrosDataTable tablecarros;
        
        private clienteDataTable tablecliente;
        
        private contratocarroDataTable tablecontratocarro;
        
        private contratopneusDataTable tablecontratopneus;
        
        private contratosDataTable tablecontratos;
        
        private contratosegurosDataTable tablecontratoseguros;
        
        private contratosinistrosDataTable tablecontratosinistros;
        
        private contratoviagensDataTable tablecontratoviagens;
        
        private corDataTable tablecor;
        
        private enderecoDataTable tableendereco;
        
        private entradasaidaDataTable tableentradasaida;
        
        private funcionariosDataTable tablefuncionarios;
        
        private manutencaoDataTable tablemanutencao;
        
        private manutencaopecaDataTable tablemanutencaopeca;
        
        private modelosDataTable tablemodelos;
        
        private montadoraDataTable tablemontadora;
        
        private motoristasDataTable tablemotoristas;
        
        private multasDataTable tablemultas;
        
        private pecasDataTable tablepecas;
        
        private pneusDataTable tablepneus;
        
        private telefoneclienteDataTable tabletelefonecliente;
        
        private usuariosDataTable tableusuarios;
        
        private System.Data.DataRelation relationFK_TELEFONECLIENTE_2;
        
        private System.Data.DataRelation relationFK_PNEUS_2;
        
        private System.Data.DataRelation relationFK_MULTAS_2;
        
        private System.Data.DataRelation relationFK_MOTORISTAS_3;
        
        private System.Data.DataRelation relationFK_MOTORISTAS_1;
        
        private System.Data.DataRelation relationFK_MODELOS_2;
        
        private System.Data.DataRelation relationFK_MANUTENCAOPECA_2;
        
        private System.Data.DataRelation relationFK_MANUTENCAOPECA_1;
        
        private System.Data.DataRelation relationFK_FUNCIONARIOS_4;
        
        private System.Data.DataRelation relationFK_FUNCIONARIOS_3;
        
        private System.Data.DataRelation relationFK_ENTRADASAIDA_1;
        
        private System.Data.DataRelation relationFK_CONTRATOVIAGENS_2;
        
        private System.Data.DataRelation relationFK_CONTRATOSINISTROS_2;
        
        private System.Data.DataRelation relationFK_CONTRATOSEGUROS_1;
        
        private System.Data.DataRelation relationFK_CONTRATOS_2;
        
        private System.Data.DataRelation relationFK_CONTRATOPNEUS_2;
        
        private System.Data.DataRelation relationFK_CONTRATOCARRO_3;
        
        private System.Data.DataRelation relationFK_CONTRATOCARRO_1;
        
        private System.Data.DataRelation relationFK_CLIENTE_3;
        
        private System.Data.DataRelation relationFK_CLIENTE_2;
        
        private System.Data.DataRelation relationFK_CARROS_6;
        
        private System.Data.DataRelation relationFK_CARROS_5;
        
        private System.Data.DataRelation relationFK_CARROS_4;
        
        private System.Data.DataRelation relationFK_CARROS_3;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetFat() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetFat(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                Devart.Data.MySql.MySqlDataSet ds = new Devart.Data.MySql.MySqlDataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["cargos"] != null)) {
                    base.Tables.Add(new cargosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cargos"]))));
                }
                if ((ds.Tables["carros"] != null)) {
                    base.Tables.Add(new carrosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["carros"]))));
                }
                if ((ds.Tables["cliente"] != null)) {
                    base.Tables.Add(new clienteDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cliente"]))));
                }
                if ((ds.Tables["contratocarro"] != null)) {
                    base.Tables.Add(new contratocarroDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratocarro"]))));
                }
                if ((ds.Tables["contratopneus"] != null)) {
                    base.Tables.Add(new contratopneusDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratopneus"]))));
                }
                if ((ds.Tables["contratos"] != null)) {
                    base.Tables.Add(new contratosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratos"]))));
                }
                if ((ds.Tables["contratoseguros"] != null)) {
                    base.Tables.Add(new contratosegurosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratoseguros"]))));
                }
                if ((ds.Tables["contratosinistros"] != null)) {
                    base.Tables.Add(new contratosinistrosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratosinistros"]))));
                }
                if ((ds.Tables["contratoviagens"] != null)) {
                    base.Tables.Add(new contratoviagensDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratoviagens"]))));
                }
                if ((ds.Tables["cor"] != null)) {
                    base.Tables.Add(new corDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cor"]))));
                }
                if ((ds.Tables["endereco"] != null)) {
                    base.Tables.Add(new enderecoDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["endereco"]))));
                }
                if ((ds.Tables["entradasaida"] != null)) {
                    base.Tables.Add(new entradasaidaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["entradasaida"]))));
                }
                if ((ds.Tables["funcionarios"] != null)) {
                    base.Tables.Add(new funcionariosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["funcionarios"]))));
                }
                if ((ds.Tables["manutencao"] != null)) {
                    base.Tables.Add(new manutencaoDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["manutencao"]))));
                }
                if ((ds.Tables["manutencaopeca"] != null)) {
                    base.Tables.Add(new manutencaopecaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["manutencaopeca"]))));
                }
                if ((ds.Tables["modelos"] != null)) {
                    base.Tables.Add(new modelosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["modelos"]))));
                }
                if ((ds.Tables["montadora"] != null)) {
                    base.Tables.Add(new montadoraDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["montadora"]))));
                }
                if ((ds.Tables["motoristas"] != null)) {
                    base.Tables.Add(new motoristasDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["motoristas"]))));
                }
                if ((ds.Tables["multas"] != null)) {
                    base.Tables.Add(new multasDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["multas"]))));
                }
                if ((ds.Tables["pecas"] != null)) {
                    base.Tables.Add(new pecasDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["pecas"]))));
                }
                if ((ds.Tables["pneus"] != null)) {
                    base.Tables.Add(new pneusDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["pneus"]))));
                }
                if ((ds.Tables["telefonecliente"] != null)) {
                    base.Tables.Add(new telefoneclienteDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["telefonecliente"]))));
                }
                if ((ds.Tables["usuarios"] != null)) {
                    base.Tables.Add(new usuariosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["usuarios"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(System.Data.SchemaSerializationMode.IncludeSchema)]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cargosDataTable cargos {
            get {
                return this.tablecargos;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public carrosDataTable carros {
            get {
                return this.tablecarros;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public clienteDataTable cliente {
            get {
                return this.tablecliente;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contratocarroDataTable contratocarro {
            get {
                return this.tablecontratocarro;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contratopneusDataTable contratopneus {
            get {
                return this.tablecontratopneus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contratosDataTable contratos {
            get {
                return this.tablecontratos;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contratosegurosDataTable contratoseguros {
            get {
                return this.tablecontratoseguros;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contratosinistrosDataTable contratosinistros {
            get {
                return this.tablecontratosinistros;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contratoviagensDataTable contratoviagens {
            get {
                return this.tablecontratoviagens;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public corDataTable cor {
            get {
                return this.tablecor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public enderecoDataTable endereco {
            get {
                return this.tableendereco;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entradasaidaDataTable entradasaida {
            get {
                return this.tableentradasaida;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public funcionariosDataTable funcionarios {
            get {
                return this.tablefuncionarios;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public manutencaoDataTable manutencao {
            get {
                return this.tablemanutencao;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public manutencaopecaDataTable manutencaopeca {
            get {
                return this.tablemanutencaopeca;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public modelosDataTable modelos {
            get {
                return this.tablemodelos;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public montadoraDataTable montadora {
            get {
                return this.tablemontadora;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public motoristasDataTable motoristas {
            get {
                return this.tablemotoristas;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public multasDataTable multas {
            get {
                return this.tablemultas;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pecasDataTable pecas {
            get {
                return this.tablepecas;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pneusDataTable pneus {
            get {
                return this.tablepneus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public telefoneclienteDataTable telefonecliente {
            get {
                return this.tabletelefonecliente;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public usuariosDataTable usuarios {
            get {
                return this.tableusuarios;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new Devart.Data.MySql.MySqlConnection Connection {
            get {
                return base.Connection;
            }
            set {
                base.Connection = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new string Prefix {
            get {
                return base.Prefix;
            }
            set {
                base.Prefix = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSetFat cln = ((DataSetFat)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                Devart.Data.MySql.MySqlDataSet ds = new Devart.Data.MySql.MySqlDataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["cargos"] != null)) {
                    base.Tables.Add(new cargosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cargos"]))));
                }
                if ((ds.Tables["carros"] != null)) {
                    base.Tables.Add(new carrosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["carros"]))));
                }
                if ((ds.Tables["cliente"] != null)) {
                    base.Tables.Add(new clienteDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cliente"]))));
                }
                if ((ds.Tables["contratocarro"] != null)) {
                    base.Tables.Add(new contratocarroDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratocarro"]))));
                }
                if ((ds.Tables["contratopneus"] != null)) {
                    base.Tables.Add(new contratopneusDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratopneus"]))));
                }
                if ((ds.Tables["contratos"] != null)) {
                    base.Tables.Add(new contratosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratos"]))));
                }
                if ((ds.Tables["contratoseguros"] != null)) {
                    base.Tables.Add(new contratosegurosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratoseguros"]))));
                }
                if ((ds.Tables["contratosinistros"] != null)) {
                    base.Tables.Add(new contratosinistrosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratosinistros"]))));
                }
                if ((ds.Tables["contratoviagens"] != null)) {
                    base.Tables.Add(new contratoviagensDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["contratoviagens"]))));
                }
                if ((ds.Tables["cor"] != null)) {
                    base.Tables.Add(new corDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cor"]))));
                }
                if ((ds.Tables["endereco"] != null)) {
                    base.Tables.Add(new enderecoDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["endereco"]))));
                }
                if ((ds.Tables["entradasaida"] != null)) {
                    base.Tables.Add(new entradasaidaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["entradasaida"]))));
                }
                if ((ds.Tables["funcionarios"] != null)) {
                    base.Tables.Add(new funcionariosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["funcionarios"]))));
                }
                if ((ds.Tables["manutencao"] != null)) {
                    base.Tables.Add(new manutencaoDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["manutencao"]))));
                }
                if ((ds.Tables["manutencaopeca"] != null)) {
                    base.Tables.Add(new manutencaopecaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["manutencaopeca"]))));
                }
                if ((ds.Tables["modelos"] != null)) {
                    base.Tables.Add(new modelosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["modelos"]))));
                }
                if ((ds.Tables["montadora"] != null)) {
                    base.Tables.Add(new montadoraDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["montadora"]))));
                }
                if ((ds.Tables["motoristas"] != null)) {
                    base.Tables.Add(new motoristasDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["motoristas"]))));
                }
                if ((ds.Tables["multas"] != null)) {
                    base.Tables.Add(new multasDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["multas"]))));
                }
                if ((ds.Tables["pecas"] != null)) {
                    base.Tables.Add(new pecasDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["pecas"]))));
                }
                if ((ds.Tables["pneus"] != null)) {
                    base.Tables.Add(new pneusDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["pneus"]))));
                }
                if ((ds.Tables["telefonecliente"] != null)) {
                    base.Tables.Add(new telefoneclienteDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["telefonecliente"]))));
                }
                if ((ds.Tables["usuarios"] != null)) {
                    base.Tables.Add(new usuariosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["usuarios"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablecargos = ((cargosDataTable)(base.Tables["cargos"]));
            if ((initTable == true)) {
                if ((this.tablecargos != null)) {
                    this.tablecargos.InitVars();
                }
            }
            this.tablecarros = ((carrosDataTable)(base.Tables["carros"]));
            if ((initTable == true)) {
                if ((this.tablecarros != null)) {
                    this.tablecarros.InitVars();
                }
            }
            this.tablecliente = ((clienteDataTable)(base.Tables["cliente"]));
            if ((initTable == true)) {
                if ((this.tablecliente != null)) {
                    this.tablecliente.InitVars();
                }
            }
            this.tablecontratocarro = ((contratocarroDataTable)(base.Tables["contratocarro"]));
            if ((initTable == true)) {
                if ((this.tablecontratocarro != null)) {
                    this.tablecontratocarro.InitVars();
                }
            }
            this.tablecontratopneus = ((contratopneusDataTable)(base.Tables["contratopneus"]));
            if ((initTable == true)) {
                if ((this.tablecontratopneus != null)) {
                    this.tablecontratopneus.InitVars();
                }
            }
            this.tablecontratos = ((contratosDataTable)(base.Tables["contratos"]));
            if ((initTable == true)) {
                if ((this.tablecontratos != null)) {
                    this.tablecontratos.InitVars();
                }
            }
            this.tablecontratoseguros = ((contratosegurosDataTable)(base.Tables["contratoseguros"]));
            if ((initTable == true)) {
                if ((this.tablecontratoseguros != null)) {
                    this.tablecontratoseguros.InitVars();
                }
            }
            this.tablecontratosinistros = ((contratosinistrosDataTable)(base.Tables["contratosinistros"]));
            if ((initTable == true)) {
                if ((this.tablecontratosinistros != null)) {
                    this.tablecontratosinistros.InitVars();
                }
            }
            this.tablecontratoviagens = ((contratoviagensDataTable)(base.Tables["contratoviagens"]));
            if ((initTable == true)) {
                if ((this.tablecontratoviagens != null)) {
                    this.tablecontratoviagens.InitVars();
                }
            }
            this.tablecor = ((corDataTable)(base.Tables["cor"]));
            if ((initTable == true)) {
                if ((this.tablecor != null)) {
                    this.tablecor.InitVars();
                }
            }
            this.tableendereco = ((enderecoDataTable)(base.Tables["endereco"]));
            if ((initTable == true)) {
                if ((this.tableendereco != null)) {
                    this.tableendereco.InitVars();
                }
            }
            this.tableentradasaida = ((entradasaidaDataTable)(base.Tables["entradasaida"]));
            if ((initTable == true)) {
                if ((this.tableentradasaida != null)) {
                    this.tableentradasaida.InitVars();
                }
            }
            this.tablefuncionarios = ((funcionariosDataTable)(base.Tables["funcionarios"]));
            if ((initTable == true)) {
                if ((this.tablefuncionarios != null)) {
                    this.tablefuncionarios.InitVars();
                }
            }
            this.tablemanutencao = ((manutencaoDataTable)(base.Tables["manutencao"]));
            if ((initTable == true)) {
                if ((this.tablemanutencao != null)) {
                    this.tablemanutencao.InitVars();
                }
            }
            this.tablemanutencaopeca = ((manutencaopecaDataTable)(base.Tables["manutencaopeca"]));
            if ((initTable == true)) {
                if ((this.tablemanutencaopeca != null)) {
                    this.tablemanutencaopeca.InitVars();
                }
            }
            this.tablemodelos = ((modelosDataTable)(base.Tables["modelos"]));
            if ((initTable == true)) {
                if ((this.tablemodelos != null)) {
                    this.tablemodelos.InitVars();
                }
            }
            this.tablemontadora = ((montadoraDataTable)(base.Tables["montadora"]));
            if ((initTable == true)) {
                if ((this.tablemontadora != null)) {
                    this.tablemontadora.InitVars();
                }
            }
            this.tablemotoristas = ((motoristasDataTable)(base.Tables["motoristas"]));
            if ((initTable == true)) {
                if ((this.tablemotoristas != null)) {
                    this.tablemotoristas.InitVars();
                }
            }
            this.tablemultas = ((multasDataTable)(base.Tables["multas"]));
            if ((initTable == true)) {
                if ((this.tablemultas != null)) {
                    this.tablemultas.InitVars();
                }
            }
            this.tablepecas = ((pecasDataTable)(base.Tables["pecas"]));
            if ((initTable == true)) {
                if ((this.tablepecas != null)) {
                    this.tablepecas.InitVars();
                }
            }
            this.tablepneus = ((pneusDataTable)(base.Tables["pneus"]));
            if ((initTable == true)) {
                if ((this.tablepneus != null)) {
                    this.tablepneus.InitVars();
                }
            }
            this.tabletelefonecliente = ((telefoneclienteDataTable)(base.Tables["telefonecliente"]));
            if ((initTable == true)) {
                if ((this.tabletelefonecliente != null)) {
                    this.tabletelefonecliente.InitVars();
                }
            }
            this.tableusuarios = ((usuariosDataTable)(base.Tables["usuarios"]));
            if ((initTable == true)) {
                if ((this.tableusuarios != null)) {
                    this.tableusuarios.InitVars();
                }
            }
            this.relationFK_TELEFONECLIENTE_2 = this.Relations["FK_TELEFONECLIENTE_2"];
            this.relationFK_PNEUS_2 = this.Relations["FK_PNEUS_2"];
            this.relationFK_MULTAS_2 = this.Relations["FK_MULTAS_2"];
            this.relationFK_MOTORISTAS_3 = this.Relations["FK_MOTORISTAS_3"];
            this.relationFK_MOTORISTAS_1 = this.Relations["FK_MOTORISTAS_1"];
            this.relationFK_MODELOS_2 = this.Relations["FK_MODELOS_2"];
            this.relationFK_MANUTENCAOPECA_2 = this.Relations["FK_MANUTENCAOPECA_2"];
            this.relationFK_MANUTENCAOPECA_1 = this.Relations["FK_MANUTENCAOPECA_1"];
            this.relationFK_FUNCIONARIOS_4 = this.Relations["FK_FUNCIONARIOS_4"];
            this.relationFK_FUNCIONARIOS_3 = this.Relations["FK_FUNCIONARIOS_3"];
            this.relationFK_ENTRADASAIDA_1 = this.Relations["FK_ENTRADASAIDA_1"];
            this.relationFK_CONTRATOVIAGENS_2 = this.Relations["FK_CONTRATOVIAGENS_2"];
            this.relationFK_CONTRATOSINISTROS_2 = this.Relations["FK_CONTRATOSINISTROS_2"];
            this.relationFK_CONTRATOSEGUROS_1 = this.Relations["FK_CONTRATOSEGUROS_1"];
            this.relationFK_CONTRATOS_2 = this.Relations["FK_CONTRATOS_2"];
            this.relationFK_CONTRATOPNEUS_2 = this.Relations["FK_CONTRATOPNEUS_2"];
            this.relationFK_CONTRATOCARRO_3 = this.Relations["FK_CONTRATOCARRO_3"];
            this.relationFK_CONTRATOCARRO_1 = this.Relations["FK_CONTRATOCARRO_1"];
            this.relationFK_CLIENTE_3 = this.Relations["FK_CLIENTE_3"];
            this.relationFK_CLIENTE_2 = this.Relations["FK_CLIENTE_2"];
            this.relationFK_CARROS_6 = this.Relations["FK_CARROS_6"];
            this.relationFK_CARROS_5 = this.Relations["FK_CARROS_5"];
            this.relationFK_CARROS_4 = this.Relations["FK_CARROS_4"];
            this.relationFK_CARROS_3 = this.Relations["FK_CARROS_3"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetFat";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                    "rue;");
            this.tablecargos = new cargosDataTable(this.Connection);
            base.Tables.Add(this.tablecargos);
            this.tablecarros = new carrosDataTable(this.Connection);
            base.Tables.Add(this.tablecarros);
            this.tablecliente = new clienteDataTable(this.Connection);
            base.Tables.Add(this.tablecliente);
            this.tablecontratocarro = new contratocarroDataTable(this.Connection);
            base.Tables.Add(this.tablecontratocarro);
            this.tablecontratopneus = new contratopneusDataTable(this.Connection);
            base.Tables.Add(this.tablecontratopneus);
            this.tablecontratos = new contratosDataTable(this.Connection);
            base.Tables.Add(this.tablecontratos);
            this.tablecontratoseguros = new contratosegurosDataTable(this.Connection);
            base.Tables.Add(this.tablecontratoseguros);
            this.tablecontratosinistros = new contratosinistrosDataTable(this.Connection);
            base.Tables.Add(this.tablecontratosinistros);
            this.tablecontratoviagens = new contratoviagensDataTable(this.Connection);
            base.Tables.Add(this.tablecontratoviagens);
            this.tablecor = new corDataTable(this.Connection);
            base.Tables.Add(this.tablecor);
            this.tableendereco = new enderecoDataTable(this.Connection);
            base.Tables.Add(this.tableendereco);
            this.tableentradasaida = new entradasaidaDataTable(this.Connection);
            base.Tables.Add(this.tableentradasaida);
            this.tablefuncionarios = new funcionariosDataTable(this.Connection);
            base.Tables.Add(this.tablefuncionarios);
            this.tablemanutencao = new manutencaoDataTable(this.Connection);
            base.Tables.Add(this.tablemanutencao);
            this.tablemanutencaopeca = new manutencaopecaDataTable(this.Connection);
            base.Tables.Add(this.tablemanutencaopeca);
            this.tablemodelos = new modelosDataTable(this.Connection);
            base.Tables.Add(this.tablemodelos);
            this.tablemontadora = new montadoraDataTable(this.Connection);
            base.Tables.Add(this.tablemontadora);
            this.tablemotoristas = new motoristasDataTable(this.Connection);
            base.Tables.Add(this.tablemotoristas);
            this.tablemultas = new multasDataTable(this.Connection);
            base.Tables.Add(this.tablemultas);
            this.tablepecas = new pecasDataTable(this.Connection);
            base.Tables.Add(this.tablepecas);
            this.tablepneus = new pneusDataTable(this.Connection);
            base.Tables.Add(this.tablepneus);
            this.tabletelefonecliente = new telefoneclienteDataTable(this.Connection);
            base.Tables.Add(this.tabletelefonecliente);
            this.tableusuarios = new usuariosDataTable(this.Connection);
            base.Tables.Add(this.tableusuarios);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_CARROS_6", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.CONTRATOCARRO_IDCONTRATOCARROColumn});
            this.tablecarros.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CARROS_5", new System.Data.DataColumn[] {
                        this.tablemanutencao.IDMANUTENCAOColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.MANUTENCAO_IDMANUTENCAOColumn});
            this.tablecarros.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CARROS_4", new System.Data.DataColumn[] {
                        this.tablecor.IDCORColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.COR_IDCORColumn});
            this.tablecarros.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CARROS_3", new System.Data.DataColumn[] {
                        this.tablemodelos.IDMODELOColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.MODELOS_IDMODELOColumn});
            this.tablecarros.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CLIENTE_3", new System.Data.DataColumn[] {
                        this.tableendereco.IDENDERECOColumn}, new System.Data.DataColumn[] {
                        this.tablecliente.ENDERECO_IDENDERECOColumn});
            this.tablecliente.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CLIENTE_2", new System.Data.DataColumn[] {
                        this.tableusuarios.IDUSUARIOColumn}, new System.Data.DataColumn[] {
                        this.tablecliente.USUARIO_IDUSUARIOColumn});
            this.tablecliente.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOCARRO_3", new System.Data.DataColumn[] {
                        this.tablecarros.IDCARROSColumn}, new System.Data.DataColumn[] {
                        this.tablecontratocarro.CARRO_IDCARROColumn});
            this.tablecontratocarro.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOCARRO_1", new System.Data.DataColumn[] {
                        this.tablecontratos.IDCONTRATOColumn}, new System.Data.DataColumn[] {
                        this.tablecontratocarro.CONTRATOS_IDCONTRATOColumn});
            this.tablecontratocarro.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOPNEUS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratopneus.CONTRATOCARRO_IDCONTRATOCARROColumn});
            this.tablecontratopneus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOS_2", new System.Data.DataColumn[] {
                        this.tablecliente.IDCLIENTEColumn}, new System.Data.DataColumn[] {
                        this.tablecontratos.CLIENTE_IDCLIENTEColumn});
            this.tablecontratos.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOSEGUROS_1", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratoseguros.CONTRATOCARRO_IDCONTRATOCARROColumn});
            this.tablecontratoseguros.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOSINISTROS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratosinistros.CONTRATOCARRO_IDCONTRATOCARROColumn});
            this.tablecontratosinistros.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_CONTRATOVIAGENS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratoviagens.CONTRATO_IDCONTRATOColumn});
            this.tablecontratoviagens.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_ENTRADASAIDA_1", new System.Data.DataColumn[] {
                        this.tablecarros.IDCARROSColumn}, new System.Data.DataColumn[] {
                        this.tableentradasaida.CARROS_IDCARROColumn});
            this.tableentradasaida.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_FUNCIONARIOS_4", new System.Data.DataColumn[] {
                        this.tableusuarios.IDUSUARIOColumn}, new System.Data.DataColumn[] {
                        this.tablefuncionarios.USUARIOS_IDUSUARIOColumn});
            this.tablefuncionarios.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_FUNCIONARIOS_3", new System.Data.DataColumn[] {
                        this.tablecargos.IDCARGOColumn}, new System.Data.DataColumn[] {
                        this.tablefuncionarios.CARGOS_IDCARGOColumn});
            this.tablefuncionarios.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_MANUTENCAOPECA_2", new System.Data.DataColumn[] {
                        this.tablemanutencao.IDMANUTENCAOColumn}, new System.Data.DataColumn[] {
                        this.tablemanutencaopeca.MANUTENCAO_IDMANUTENCAOColumn});
            this.tablemanutencaopeca.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_MANUTENCAOPECA_1", new System.Data.DataColumn[] {
                        this.tablepecas.IDPECAColumn}, new System.Data.DataColumn[] {
                        this.tablemanutencaopeca.PECAS_IDPECASColumn});
            this.tablemanutencaopeca.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_MODELOS_2", new System.Data.DataColumn[] {
                        this.tablemontadora.IDMONTADORAColumn}, new System.Data.DataColumn[] {
                        this.tablemodelos.MONTADORA_IDMONTADORAColumn});
            this.tablemodelos.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_MOTORISTAS_3", new System.Data.DataColumn[] {
                        this.tableendereco.IDENDERECOColumn}, new System.Data.DataColumn[] {
                        this.tablemotoristas.ENDERECO_IDENDERECOColumn});
            this.tablemotoristas.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_MOTORISTAS_1", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablemotoristas.CONTRATOCARRO_IDCONTRATOCARROColumn});
            this.tablemotoristas.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_MULTAS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablemultas.CONTRATOCARRO_IDCONTRATOCARROColumn});
            this.tablemultas.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_PNEUS_2", new System.Data.DataColumn[] {
                        this.tablecontratos.IDCONTRATOColumn}, new System.Data.DataColumn[] {
                        this.tablepneus.CARROS_IDCARROSColumn});
            this.tablepneus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_TELEFONECLIENTE_2", new System.Data.DataColumn[] {
                        this.tablecliente.IDCLIENTEColumn}, new System.Data.DataColumn[] {
                        this.tabletelefonecliente.CLIENTE_IDCLIENTEColumn});
            this.tabletelefonecliente.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            this.relationFK_TELEFONECLIENTE_2 = new System.Data.DataRelation("FK_TELEFONECLIENTE_2", new System.Data.DataColumn[] {
                        this.tablecliente.IDCLIENTEColumn}, new System.Data.DataColumn[] {
                        this.tabletelefonecliente.CLIENTE_IDCLIENTEColumn}, false);
            this.Relations.Add(this.relationFK_TELEFONECLIENTE_2);
            this.relationFK_PNEUS_2 = new System.Data.DataRelation("FK_PNEUS_2", new System.Data.DataColumn[] {
                        this.tablecontratos.IDCONTRATOColumn}, new System.Data.DataColumn[] {
                        this.tablepneus.CARROS_IDCARROSColumn}, false);
            this.Relations.Add(this.relationFK_PNEUS_2);
            this.relationFK_MULTAS_2 = new System.Data.DataRelation("FK_MULTAS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablemultas.CONTRATOCARRO_IDCONTRATOCARROColumn}, false);
            this.Relations.Add(this.relationFK_MULTAS_2);
            this.relationFK_MOTORISTAS_3 = new System.Data.DataRelation("FK_MOTORISTAS_3", new System.Data.DataColumn[] {
                        this.tableendereco.IDENDERECOColumn}, new System.Data.DataColumn[] {
                        this.tablemotoristas.ENDERECO_IDENDERECOColumn}, false);
            this.Relations.Add(this.relationFK_MOTORISTAS_3);
            this.relationFK_MOTORISTAS_1 = new System.Data.DataRelation("FK_MOTORISTAS_1", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablemotoristas.CONTRATOCARRO_IDCONTRATOCARROColumn}, false);
            this.Relations.Add(this.relationFK_MOTORISTAS_1);
            this.relationFK_MODELOS_2 = new System.Data.DataRelation("FK_MODELOS_2", new System.Data.DataColumn[] {
                        this.tablemontadora.IDMONTADORAColumn}, new System.Data.DataColumn[] {
                        this.tablemodelos.MONTADORA_IDMONTADORAColumn}, false);
            this.Relations.Add(this.relationFK_MODELOS_2);
            this.relationFK_MANUTENCAOPECA_2 = new System.Data.DataRelation("FK_MANUTENCAOPECA_2", new System.Data.DataColumn[] {
                        this.tablemanutencao.IDMANUTENCAOColumn}, new System.Data.DataColumn[] {
                        this.tablemanutencaopeca.MANUTENCAO_IDMANUTENCAOColumn}, false);
            this.Relations.Add(this.relationFK_MANUTENCAOPECA_2);
            this.relationFK_MANUTENCAOPECA_1 = new System.Data.DataRelation("FK_MANUTENCAOPECA_1", new System.Data.DataColumn[] {
                        this.tablepecas.IDPECAColumn}, new System.Data.DataColumn[] {
                        this.tablemanutencaopeca.PECAS_IDPECASColumn}, false);
            this.Relations.Add(this.relationFK_MANUTENCAOPECA_1);
            this.relationFK_FUNCIONARIOS_4 = new System.Data.DataRelation("FK_FUNCIONARIOS_4", new System.Data.DataColumn[] {
                        this.tableusuarios.IDUSUARIOColumn}, new System.Data.DataColumn[] {
                        this.tablefuncionarios.USUARIOS_IDUSUARIOColumn}, false);
            this.Relations.Add(this.relationFK_FUNCIONARIOS_4);
            this.relationFK_FUNCIONARIOS_3 = new System.Data.DataRelation("FK_FUNCIONARIOS_3", new System.Data.DataColumn[] {
                        this.tablecargos.IDCARGOColumn}, new System.Data.DataColumn[] {
                        this.tablefuncionarios.CARGOS_IDCARGOColumn}, false);
            this.Relations.Add(this.relationFK_FUNCIONARIOS_3);
            this.relationFK_ENTRADASAIDA_1 = new System.Data.DataRelation("FK_ENTRADASAIDA_1", new System.Data.DataColumn[] {
                        this.tablecarros.IDCARROSColumn}, new System.Data.DataColumn[] {
                        this.tableentradasaida.CARROS_IDCARROColumn}, false);
            this.Relations.Add(this.relationFK_ENTRADASAIDA_1);
            this.relationFK_CONTRATOVIAGENS_2 = new System.Data.DataRelation("FK_CONTRATOVIAGENS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratoviagens.CONTRATO_IDCONTRATOColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOVIAGENS_2);
            this.relationFK_CONTRATOSINISTROS_2 = new System.Data.DataRelation("FK_CONTRATOSINISTROS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratosinistros.CONTRATOCARRO_IDCONTRATOCARROColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOSINISTROS_2);
            this.relationFK_CONTRATOSEGUROS_1 = new System.Data.DataRelation("FK_CONTRATOSEGUROS_1", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratoseguros.CONTRATOCARRO_IDCONTRATOCARROColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOSEGUROS_1);
            this.relationFK_CONTRATOS_2 = new System.Data.DataRelation("FK_CONTRATOS_2", new System.Data.DataColumn[] {
                        this.tablecliente.IDCLIENTEColumn}, new System.Data.DataColumn[] {
                        this.tablecontratos.CLIENTE_IDCLIENTEColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOS_2);
            this.relationFK_CONTRATOPNEUS_2 = new System.Data.DataRelation("FK_CONTRATOPNEUS_2", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecontratopneus.CONTRATOCARRO_IDCONTRATOCARROColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOPNEUS_2);
            this.relationFK_CONTRATOCARRO_3 = new System.Data.DataRelation("FK_CONTRATOCARRO_3", new System.Data.DataColumn[] {
                        this.tablecarros.IDCARROSColumn}, new System.Data.DataColumn[] {
                        this.tablecontratocarro.CARRO_IDCARROColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOCARRO_3);
            this.relationFK_CONTRATOCARRO_1 = new System.Data.DataRelation("FK_CONTRATOCARRO_1", new System.Data.DataColumn[] {
                        this.tablecontratos.IDCONTRATOColumn}, new System.Data.DataColumn[] {
                        this.tablecontratocarro.CONTRATOS_IDCONTRATOColumn}, false);
            this.Relations.Add(this.relationFK_CONTRATOCARRO_1);
            this.relationFK_CLIENTE_3 = new System.Data.DataRelation("FK_CLIENTE_3", new System.Data.DataColumn[] {
                        this.tableendereco.IDENDERECOColumn}, new System.Data.DataColumn[] {
                        this.tablecliente.ENDERECO_IDENDERECOColumn}, false);
            this.Relations.Add(this.relationFK_CLIENTE_3);
            this.relationFK_CLIENTE_2 = new System.Data.DataRelation("FK_CLIENTE_2", new System.Data.DataColumn[] {
                        this.tableusuarios.IDUSUARIOColumn}, new System.Data.DataColumn[] {
                        this.tablecliente.USUARIO_IDUSUARIOColumn}, false);
            this.Relations.Add(this.relationFK_CLIENTE_2);
            this.relationFK_CARROS_6 = new System.Data.DataRelation("FK_CARROS_6", new System.Data.DataColumn[] {
                        this.tablecontratocarro.IDCONTRATOCARROColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.CONTRATOCARRO_IDCONTRATOCARROColumn}, false);
            this.Relations.Add(this.relationFK_CARROS_6);
            this.relationFK_CARROS_5 = new System.Data.DataRelation("FK_CARROS_5", new System.Data.DataColumn[] {
                        this.tablemanutencao.IDMANUTENCAOColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.MANUTENCAO_IDMANUTENCAOColumn}, false);
            this.Relations.Add(this.relationFK_CARROS_5);
            this.relationFK_CARROS_4 = new System.Data.DataRelation("FK_CARROS_4", new System.Data.DataColumn[] {
                        this.tablecor.IDCORColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.COR_IDCORColumn}, false);
            this.Relations.Add(this.relationFK_CARROS_4);
            this.relationFK_CARROS_3 = new System.Data.DataRelation("FK_CARROS_3", new System.Data.DataColumn[] {
                        this.tablemodelos.IDMODELOColumn}, new System.Data.DataColumn[] {
                        this.tablecarros.MODELOS_IDMODELOColumn}, false);
            this.Relations.Add(this.relationFK_CARROS_3);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetFat ds = new DataSetFat();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnection() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrefix() {
            return false;
        }
        
        public delegate void cargosRowChangeEventHandler(object sender, cargosRowChangeEvent e);
        
        public delegate void carrosRowChangeEventHandler(object sender, carrosRowChangeEvent e);
        
        public delegate void clienteRowChangeEventHandler(object sender, clienteRowChangeEvent e);
        
        public delegate void contratocarroRowChangeEventHandler(object sender, contratocarroRowChangeEvent e);
        
        public delegate void contratopneusRowChangeEventHandler(object sender, contratopneusRowChangeEvent e);
        
        public delegate void contratosRowChangeEventHandler(object sender, contratosRowChangeEvent e);
        
        public delegate void contratosegurosRowChangeEventHandler(object sender, contratosegurosRowChangeEvent e);
        
        public delegate void contratosinistrosRowChangeEventHandler(object sender, contratosinistrosRowChangeEvent e);
        
        public delegate void contratoviagensRowChangeEventHandler(object sender, contratoviagensRowChangeEvent e);
        
        public delegate void corRowChangeEventHandler(object sender, corRowChangeEvent e);
        
        public delegate void enderecoRowChangeEventHandler(object sender, enderecoRowChangeEvent e);
        
        public delegate void entradasaidaRowChangeEventHandler(object sender, entradasaidaRowChangeEvent e);
        
        public delegate void funcionariosRowChangeEventHandler(object sender, funcionariosRowChangeEvent e);
        
        public delegate void manutencaoRowChangeEventHandler(object sender, manutencaoRowChangeEvent e);
        
        public delegate void manutencaopecaRowChangeEventHandler(object sender, manutencaopecaRowChangeEvent e);
        
        public delegate void modelosRowChangeEventHandler(object sender, modelosRowChangeEvent e);
        
        public delegate void montadoraRowChangeEventHandler(object sender, montadoraRowChangeEvent e);
        
        public delegate void motoristasRowChangeEventHandler(object sender, motoristasRowChangeEvent e);
        
        public delegate void multasRowChangeEventHandler(object sender, multasRowChangeEvent e);
        
        public delegate void pecasRowChangeEventHandler(object sender, pecasRowChangeEvent e);
        
        public delegate void pneusRowChangeEventHandler(object sender, pneusRowChangeEvent e);
        
        public delegate void telefoneclienteRowChangeEventHandler(object sender, telefoneclienteRowChangeEvent e);
        
        public delegate void usuariosRowChangeEventHandler(object sender, usuariosRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cargosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCARGO;
            
            private System.Data.DataColumn columnCARGO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "cargos";
                this.Name = "cargos";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cargosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cargosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCARGOColumn {
                get {
                    return this.columnIDCARGO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CARGOColumn {
                get {
                    return this.columnCARGO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRow this[int index] {
                get {
                    return ((cargosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event cargosRowChangeEventHandler cargosRowChanging;
            
            public event cargosRowChangeEventHandler cargosRowChanged;
            
            public event cargosRowChangeEventHandler cargosRowDeleting;
            
            public event cargosRowChangeEventHandler cargosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcargosRow(cargosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRow AddcargosRow(int IDCARGO, string CARGO) {
                cargosRow rowcargosRow = ((cargosRow)(this.NewRow()));
                rowcargosRow.ItemArray = new object[] {
                        IDCARGO,
                        CARGO};
                this.Rows.Add(rowcargosRow);
                return rowcargosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRow FindByIDCARGO(int IDCARGO) {
                return ((cargosRow)(this.Rows.Find(new object[] {
                            IDCARGO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                cargosDataTable cln = ((cargosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new cargosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCARGO = base.Columns["IDCARGO"];
                this.columnCARGO = base.Columns["CARGO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCARGO = new System.Data.DataColumn("IDCARGO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCARGO);
                this.columnCARGO = new System.Data.DataColumn("CARGO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARGO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCARGO}, true));
                this.columnIDCARGO.AllowDBNull = false;
                this.columnIDCARGO.Unique = true;
                this.columnCARGO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.cargos", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`cargos` (`CARGO`) VALUES (:CARGO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARGO";
                param.Size = 0;
                param.SourceColumn = "CARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `fatcar`.`cargos` SET `CARGO` = :CARGO WHERE ((`IDCARGO` = :Original_IDCAR" +
                        "GO) AND (`CARGO` = :Original_CARGO))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARGO";
                param.Size = 0;
                param.SourceColumn = "CARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCARGO";
                param.Size = 0;
                param.SourceColumn = "IDCARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARGO";
                param.Size = 0;
                param.SourceColumn = "CARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`cargos` WHERE ((`IDCARGO` = :Original_IDCARGO) AND (`CARGO`" +
                        " = :Original_CARGO))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCARGO";
                param.Size = 0;
                param.SourceColumn = "IDCARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARGO";
                param.Size = 0;
                param.SourceColumn = "CARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "cargos";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCARGO", "IDCARGO");
                this.TableMapping.ColumnMappings.Add("CARGO", "CARGO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRow NewcargosRow() {
                return ((cargosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new cargosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(cargosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cargosRowChanged != null)) {
                    this.cargosRowChanged(this, new cargosRowChangeEvent(((cargosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cargosRowChanging != null)) {
                    this.cargosRowChanging(this, new cargosRowChangeEvent(((cargosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cargosRowDeleted != null)) {
                    this.cargosRowDeleted(this, new cargosRowChangeEvent(((cargosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cargosRowDeleting != null)) {
                    this.cargosRowDeleting(this, new cargosRowChangeEvent(((cargosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecargosRow(cargosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cargosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class cargosRow : System.Data.DataRow {
            
            private cargosDataTable tablecargos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cargosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecargos = ((cargosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCARGO {
                get {
                    return ((int)(this[this.tablecargos.IDCARGOColumn]));
                }
                set {
                    this[this.tablecargos.IDCARGOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CARGO {
                get {
                    return ((string)(this[this.tablecargos.CARGOColumn]));
                }
                set {
                    this[this.tablecargos.CARGOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow[] GetfuncionariosRows() {
                return ((funcionariosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_FUNCIONARIOS_3"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class cargosRowChangeEvent : System.EventArgs {
            
            private cargosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRowChangeEvent(cargosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class carrosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCARROS;
            
            private System.Data.DataColumn columnCONTRATOCARRO_IDCONTRATOCARRO;
            
            private System.Data.DataColumn columnMANUTENCAO_IDMANUTENCAO;
            
            private System.Data.DataColumn columnMODELOS_IDMODELO;
            
            private System.Data.DataColumn columnCOR_IDCOR;
            
            private System.Data.DataColumn columnPLACA;
            
            private System.Data.DataColumn columnRENAVAM;
            
            private System.Data.DataColumn columnCHASSI;
            
            private System.Data.DataColumn columnANO_FAB;
            
            private System.Data.DataColumn columnANO_MOD;
            
            private System.Data.DataColumn columnQUILOMETRAGEM;
            
            private System.Data.DataColumn columnVALOR_DIARIA;
            
            private System.Data.DataColumn columnDATA_AQUISICAO;
            
            private System.Data.DataColumn columnARCONDICIONADO;
            
            private System.Data.DataColumn columnDIRECAOHIDRAULICA;
            
            private System.Data.DataColumn columnVIDROELETRICO;
            
            private System.Data.DataColumn columnAIRBAG;
            
            private System.Data.DataColumn columnABS;
            
            private System.Data.DataColumn columnLUGARES;
            
            private System.Data.DataColumn columnPORTAS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "carros";
                this.Name = "carros";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal carrosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected carrosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCARROSColumn {
                get {
                    return this.columnIDCARROS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOCARRO_IDCONTRATOCARROColumn {
                get {
                    return this.columnCONTRATOCARRO_IDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MANUTENCAO_IDMANUTENCAOColumn {
                get {
                    return this.columnMANUTENCAO_IDMANUTENCAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MODELOS_IDMODELOColumn {
                get {
                    return this.columnMODELOS_IDMODELO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn COR_IDCORColumn {
                get {
                    return this.columnCOR_IDCOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PLACAColumn {
                get {
                    return this.columnPLACA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn RENAVAMColumn {
                get {
                    return this.columnRENAVAM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CHASSIColumn {
                get {
                    return this.columnCHASSI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANO_FABColumn {
                get {
                    return this.columnANO_FAB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANO_MODColumn {
                get {
                    return this.columnANO_MOD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn QUILOMETRAGEMColumn {
                get {
                    return this.columnQUILOMETRAGEM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALOR_DIARIAColumn {
                get {
                    return this.columnVALOR_DIARIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATA_AQUISICAOColumn {
                get {
                    return this.columnDATA_AQUISICAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ARCONDICIONADOColumn {
                get {
                    return this.columnARCONDICIONADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DIRECAOHIDRAULICAColumn {
                get {
                    return this.columnDIRECAOHIDRAULICA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VIDROELETRICOColumn {
                get {
                    return this.columnVIDROELETRICO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn AIRBAGColumn {
                get {
                    return this.columnAIRBAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ABSColumn {
                get {
                    return this.columnABS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn LUGARESColumn {
                get {
                    return this.columnLUGARES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PORTASColumn {
                get {
                    return this.columnPORTAS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow this[int index] {
                get {
                    return ((carrosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event carrosRowChangeEventHandler carrosRowChanging;
            
            public event carrosRowChangeEventHandler carrosRowChanged;
            
            public event carrosRowChangeEventHandler carrosRowDeleting;
            
            public event carrosRowChangeEventHandler carrosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcarrosRow(carrosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow AddcarrosRow(
                        int IDCARROS, 
                        contratocarroRow parentcontratocarroRowByFK_CARROS_6, 
                        manutencaoRow parentmanutencaoRowByFK_CARROS_5, 
                        modelosRow parentmodelosRowByFK_CARROS_3, 
                        corRow parentcorRowByFK_CARROS_4, 
                        int PLACA, 
                        string RENAVAM, 
                        string CHASSI, 
                        int ANO_FAB, 
                        int ANO_MOD, 
                        int QUILOMETRAGEM, 
                        decimal VALOR_DIARIA, 
                        System.DateTime DATA_AQUISICAO, 
                        short ARCONDICIONADO, 
                        short DIRECAOHIDRAULICA, 
                        short VIDROELETRICO, 
                        short AIRBAG, 
                        short ABS, 
                        int LUGARES, 
                        int PORTAS) {
                carrosRow rowcarrosRow = ((carrosRow)(this.NewRow()));
                rowcarrosRow.ItemArray = new object[] {
                        IDCARROS,
                        parentcontratocarroRowByFK_CARROS_6[0],
                        parentmanutencaoRowByFK_CARROS_5[0],
                        parentmodelosRowByFK_CARROS_3[0],
                        parentcorRowByFK_CARROS_4[0],
                        PLACA,
                        RENAVAM,
                        CHASSI,
                        ANO_FAB,
                        ANO_MOD,
                        QUILOMETRAGEM,
                        VALOR_DIARIA,
                        DATA_AQUISICAO,
                        ARCONDICIONADO,
                        DIRECAOHIDRAULICA,
                        VIDROELETRICO,
                        AIRBAG,
                        ABS,
                        LUGARES,
                        PORTAS};
                this.Rows.Add(rowcarrosRow);
                return rowcarrosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow FindByIDCARROS(int IDCARROS) {
                return ((carrosRow)(this.Rows.Find(new object[] {
                            IDCARROS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                carrosDataTable cln = ((carrosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new carrosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCARROS = base.Columns["IDCARROS"];
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = base.Columns["CONTRATOCARRO_IDCONTRATOCARRO"];
                this.columnMANUTENCAO_IDMANUTENCAO = base.Columns["MANUTENCAO_IDMANUTENCAO"];
                this.columnMODELOS_IDMODELO = base.Columns["MODELOS_IDMODELO"];
                this.columnCOR_IDCOR = base.Columns["COR_IDCOR"];
                this.columnPLACA = base.Columns["PLACA"];
                this.columnRENAVAM = base.Columns["RENAVAM"];
                this.columnCHASSI = base.Columns["CHASSI"];
                this.columnANO_FAB = base.Columns["ANO_FAB"];
                this.columnANO_MOD = base.Columns["ANO_MOD"];
                this.columnQUILOMETRAGEM = base.Columns["QUILOMETRAGEM"];
                this.columnVALOR_DIARIA = base.Columns["VALOR_DIARIA"];
                this.columnDATA_AQUISICAO = base.Columns["DATA_AQUISICAO"];
                this.columnARCONDICIONADO = base.Columns["ARCONDICIONADO"];
                this.columnDIRECAOHIDRAULICA = base.Columns["DIRECAOHIDRAULICA"];
                this.columnVIDROELETRICO = base.Columns["VIDROELETRICO"];
                this.columnAIRBAG = base.Columns["AIRBAG"];
                this.columnABS = base.Columns["ABS"];
                this.columnLUGARES = base.Columns["LUGARES"];
                this.columnPORTAS = base.Columns["PORTAS"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCARROS = new System.Data.DataColumn("IDCARROS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCARROS);
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = new System.Data.DataColumn("CONTRATOCARRO_IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOCARRO_IDCONTRATOCARRO);
                this.columnMANUTENCAO_IDMANUTENCAO = new System.Data.DataColumn("MANUTENCAO_IDMANUTENCAO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANUTENCAO_IDMANUTENCAO);
                this.columnMODELOS_IDMODELO = new System.Data.DataColumn("MODELOS_IDMODELO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODELOS_IDMODELO);
                this.columnCOR_IDCOR = new System.Data.DataColumn("COR_IDCOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOR_IDCOR);
                this.columnPLACA = new System.Data.DataColumn("PLACA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLACA);
                this.columnRENAVAM = new System.Data.DataColumn("RENAVAM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRENAVAM);
                this.columnCHASSI = new System.Data.DataColumn("CHASSI", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHASSI);
                this.columnANO_FAB = new System.Data.DataColumn("ANO_FAB", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANO_FAB);
                this.columnANO_MOD = new System.Data.DataColumn("ANO_MOD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANO_MOD);
                this.columnQUILOMETRAGEM = new System.Data.DataColumn("QUILOMETRAGEM", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUILOMETRAGEM);
                this.columnVALOR_DIARIA = new System.Data.DataColumn("VALOR_DIARIA", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR_DIARIA);
                this.columnDATA_AQUISICAO = new System.Data.DataColumn("DATA_AQUISICAO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATA_AQUISICAO);
                this.columnARCONDICIONADO = new System.Data.DataColumn("ARCONDICIONADO", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnARCONDICIONADO);
                this.columnDIRECAOHIDRAULICA = new System.Data.DataColumn("DIRECAOHIDRAULICA", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIRECAOHIDRAULICA);
                this.columnVIDROELETRICO = new System.Data.DataColumn("VIDROELETRICO", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIDROELETRICO);
                this.columnAIRBAG = new System.Data.DataColumn("AIRBAG", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAIRBAG);
                this.columnABS = new System.Data.DataColumn("ABS", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABS);
                this.columnLUGARES = new System.Data.DataColumn("LUGARES", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUGARES);
                this.columnPORTAS = new System.Data.DataColumn("PORTAS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPORTAS);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCARROS}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnPLACA}, false));
                this.columnIDCARROS.AllowDBNull = false;
                this.columnIDCARROS.Unique = true;
                this.columnCONTRATOCARRO_IDCONTRATOCARRO.AllowDBNull = false;
                this.columnMANUTENCAO_IDMANUTENCAO.AllowDBNull = false;
                this.columnMODELOS_IDMODELO.AllowDBNull = false;
                this.columnCOR_IDCOR.AllowDBNull = false;
                this.columnPLACA.AllowDBNull = false;
                this.columnPLACA.Unique = true;
                this.columnRENAVAM.AllowDBNull = false;
                this.columnCHASSI.AllowDBNull = false;
                this.columnANO_FAB.AllowDBNull = false;
                this.columnANO_MOD.AllowDBNull = false;
                this.columnQUILOMETRAGEM.AllowDBNull = false;
                this.columnVALOR_DIARIA.AllowDBNull = false;
                this.columnDATA_AQUISICAO.AllowDBNull = false;
                this.columnLUGARES.AllowDBNull = false;
                this.columnPORTAS.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.carros", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand(@"INSERT INTO `fatcar`.`carros` (`CONTRATOCARRO_IDCONTRATOCARRO`, `MANUTENCAO_IDMANUTENCAO`, `MODELOS_IDMODELO`, `COR_IDCOR`, `PLACA`, `RENAVAM`, `CHASSI`, `ANO_FAB`, `ANO_MOD`, `QUILOMETRAGEM`, `VALOR_DIARIA`, `DATA_AQUISICAO`, `ARCONDICIONADO`, `DIRECAOHIDRAULICA`, `VIDROELETRICO`, `AIRBAG`, `ABS`, `LUGARES`, `PORTAS`) VALUES (:CONTRATOCARRO_IDCONTRATOCARRO, :MANUTENCAO_IDMANUTENCAO, :MODELOS_IDMODELO, :COR_IDCOR, :PLACA, :RENAVAM, :CHASSI, :ANO_FAB, :ANO_MOD, :QUILOMETRAGEM, :VALOR_DIARIA, :DATA_AQUISICAO, :ARCONDICIONADO, :DIRECAOHIDRAULICA, :VIDROELETRICO, :AIRBAG, :ABS, :LUGARES, :PORTAS)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MODELOS_IDMODELO";
                param.Size = 0;
                param.SourceColumn = "MODELOS_IDMODELO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COR_IDCOR";
                param.Size = 0;
                param.SourceColumn = "COR_IDCOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PLACA";
                param.Size = 0;
                param.SourceColumn = "PLACA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "RENAVAM";
                param.Size = 0;
                param.SourceColumn = "RENAVAM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CHASSI";
                param.Size = 0;
                param.SourceColumn = "CHASSI";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANO_FAB";
                param.Size = 0;
                param.SourceColumn = "ANO_FAB";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANO_MOD";
                param.Size = 0;
                param.SourceColumn = "ANO_MOD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "QUILOMETRAGEM";
                param.Size = 0;
                param.SourceColumn = "QUILOMETRAGEM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR_DIARIA";
                param.Size = 0;
                param.SourceColumn = "VALOR_DIARIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATA_AQUISICAO";
                param.Size = 0;
                param.SourceColumn = "DATA_AQUISICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ARCONDICIONADO";
                param.Size = 0;
                param.SourceColumn = "ARCONDICIONADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DIRECAOHIDRAULICA";
                param.Size = 0;
                param.SourceColumn = "DIRECAOHIDRAULICA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VIDROELETRICO";
                param.Size = 0;
                param.SourceColumn = "VIDROELETRICO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "AIRBAG";
                param.Size = 0;
                param.SourceColumn = "AIRBAG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ABS";
                param.Size = 0;
                param.SourceColumn = "ABS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LUGARES";
                param.Size = 0;
                param.SourceColumn = "LUGARES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PORTAS";
                param.Size = 0;
                param.SourceColumn = "PORTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `fatcar`.`carros` SET `CONTRATOCARRO_IDCONTRATOCARRO` = :CONTRATOCARRO_IDC" +
                        "ONTRATOCARRO, `MANUTENCAO_IDMANUTENCAO` = :MANUTENCAO_IDMANUTENCAO, `MODELOS_IDM" +
                        "ODELO` = :MODELOS_IDMODELO, `COR_IDCOR` = :COR_IDCOR, `PLACA` = :PLACA, `RENAVAM" +
                        "` = :RENAVAM, `CHASSI` = :CHASSI, `ANO_FAB` = :ANO_FAB, `ANO_MOD` = :ANO_MOD, `Q" +
                        "UILOMETRAGEM` = :QUILOMETRAGEM, `VALOR_DIARIA` = :VALOR_DIARIA, `DATA_AQUISICAO`" +
                        " = :DATA_AQUISICAO, `ARCONDICIONADO` = :ARCONDICIONADO, `DIRECAOHIDRAULICA` = :D" +
                        "IRECAOHIDRAULICA, `VIDROELETRICO` = :VIDROELETRICO, `AIRBAG` = :AIRBAG, `ABS` = " +
                        ":ABS, `LUGARES` = :LUGARES, `PORTAS` = :PORTAS WHERE ((`IDCARROS` = :Original_ID" +
                        "CARROS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRAT" +
                        "OCARRO) AND (`MANUTENCAO_IDMANUTENCAO` = :Original_MANUTENCAO_IDMANUTENCAO) AND " +
                        "(`MODELOS_IDMODELO` = :Original_MODELOS_IDMODELO) AND (`COR_IDCOR` = :Original_C" +
                        "OR_IDCOR) AND (`PLACA` = :Original_PLACA) AND (`RENAVAM` = :Original_RENAVAM) AN" +
                        "D (`CHASSI` = :Original_CHASSI) AND (`ANO_FAB` = :Original_ANO_FAB) AND (`ANO_MO" +
                        "D` = :Original_ANO_MOD) AND (`QUILOMETRAGEM` = :Original_QUILOMETRAGEM) AND (`VA" +
                        "LOR_DIARIA` = :Original_VALOR_DIARIA) AND (`DATA_AQUISICAO` = :Original_DATA_AQU" +
                        "ISICAO) AND ((:IsNull_ARCONDICIONADO = 1 AND `ARCONDICIONADO` IS NULL) OR (`ARCO" +
                        "NDICIONADO` = :Original_ARCONDICIONADO)) AND ((:IsNull_DIRECAOHIDRAULICA = 1 AND" +
                        " `DIRECAOHIDRAULICA` IS NULL) OR (`DIRECAOHIDRAULICA` = :Original_DIRECAOHIDRAUL" +
                        "ICA)) AND ((:IsNull_VIDROELETRICO = 1 AND `VIDROELETRICO` IS NULL) OR (`VIDROELE" +
                        "TRICO` = :Original_VIDROELETRICO)) AND ((:IsNull_AIRBAG = 1 AND `AIRBAG` IS NULL" +
                        ") OR (`AIRBAG` = :Original_AIRBAG)) AND ((:IsNull_ABS = 1 AND `ABS` IS NULL) OR " +
                        "(`ABS` = :Original_ABS)) AND (`LUGARES` = :Original_LUGARES) AND (`PORTAS` = :Or" +
                        "iginal_PORTAS))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MODELOS_IDMODELO";
                param.Size = 0;
                param.SourceColumn = "MODELOS_IDMODELO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COR_IDCOR";
                param.Size = 0;
                param.SourceColumn = "COR_IDCOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PLACA";
                param.Size = 0;
                param.SourceColumn = "PLACA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "RENAVAM";
                param.Size = 0;
                param.SourceColumn = "RENAVAM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CHASSI";
                param.Size = 0;
                param.SourceColumn = "CHASSI";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANO_FAB";
                param.Size = 0;
                param.SourceColumn = "ANO_FAB";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANO_MOD";
                param.Size = 0;
                param.SourceColumn = "ANO_MOD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "QUILOMETRAGEM";
                param.Size = 0;
                param.SourceColumn = "QUILOMETRAGEM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR_DIARIA";
                param.Size = 0;
                param.SourceColumn = "VALOR_DIARIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATA_AQUISICAO";
                param.Size = 0;
                param.SourceColumn = "DATA_AQUISICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ARCONDICIONADO";
                param.Size = 0;
                param.SourceColumn = "ARCONDICIONADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DIRECAOHIDRAULICA";
                param.Size = 0;
                param.SourceColumn = "DIRECAOHIDRAULICA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VIDROELETRICO";
                param.Size = 0;
                param.SourceColumn = "VIDROELETRICO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "AIRBAG";
                param.Size = 0;
                param.SourceColumn = "AIRBAG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ABS";
                param.Size = 0;
                param.SourceColumn = "ABS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LUGARES";
                param.Size = 0;
                param.SourceColumn = "LUGARES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PORTAS";
                param.Size = 0;
                param.SourceColumn = "PORTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCARROS";
                param.Size = 0;
                param.SourceColumn = "IDCARROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MODELOS_IDMODELO";
                param.Size = 0;
                param.SourceColumn = "MODELOS_IDMODELO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COR_IDCOR";
                param.Size = 0;
                param.SourceColumn = "COR_IDCOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PLACA";
                param.Size = 0;
                param.SourceColumn = "PLACA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_RENAVAM";
                param.Size = 0;
                param.SourceColumn = "RENAVAM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CHASSI";
                param.Size = 0;
                param.SourceColumn = "CHASSI";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANO_FAB";
                param.Size = 0;
                param.SourceColumn = "ANO_FAB";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANO_MOD";
                param.Size = 0;
                param.SourceColumn = "ANO_MOD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_QUILOMETRAGEM";
                param.Size = 0;
                param.SourceColumn = "QUILOMETRAGEM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR_DIARIA";
                param.Size = 0;
                param.SourceColumn = "VALOR_DIARIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATA_AQUISICAO";
                param.Size = 0;
                param.SourceColumn = "DATA_AQUISICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ARCONDICIONADO";
                param.Size = 0;
                param.SourceColumn = "ARCONDICIONADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ARCONDICIONADO";
                param.Size = 0;
                param.SourceColumn = "ARCONDICIONADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DIRECAOHIDRAULICA";
                param.Size = 0;
                param.SourceColumn = "DIRECAOHIDRAULICA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DIRECAOHIDRAULICA";
                param.Size = 0;
                param.SourceColumn = "DIRECAOHIDRAULICA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_VIDROELETRICO";
                param.Size = 0;
                param.SourceColumn = "VIDROELETRICO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VIDROELETRICO";
                param.Size = 0;
                param.SourceColumn = "VIDROELETRICO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_AIRBAG";
                param.Size = 0;
                param.SourceColumn = "AIRBAG";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_AIRBAG";
                param.Size = 0;
                param.SourceColumn = "AIRBAG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ABS";
                param.Size = 0;
                param.SourceColumn = "ABS";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ABS";
                param.Size = 0;
                param.SourceColumn = "ABS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LUGARES";
                param.Size = 0;
                param.SourceColumn = "LUGARES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PORTAS";
                param.Size = 0;
                param.SourceColumn = "PORTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`carros` WHERE ((`IDCARROS` = :Original_IDCARROS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND (`MANUTENCAO_IDMANUTENCAO` = :Original_MANUTENCAO_IDMANUTENCAO) AND (`MODELOS_IDMODELO` = :Original_MODELOS_IDMODELO) AND (`COR_IDCOR` = :Original_COR_IDCOR) AND (`PLACA` = :Original_PLACA) AND (`RENAVAM` = :Original_RENAVAM) AND (`CHASSI` = :Original_CHASSI) AND (`ANO_FAB` = :Original_ANO_FAB) AND (`ANO_MOD` = :Original_ANO_MOD) AND (`QUILOMETRAGEM` = :Original_QUILOMETRAGEM) AND (`VALOR_DIARIA` = :Original_VALOR_DIARIA) AND (`DATA_AQUISICAO` = :Original_DATA_AQUISICAO) AND ((:IsNull_ARCONDICIONADO = 1 AND `ARCONDICIONADO` IS NULL) OR (`ARCONDICIONADO` = :Original_ARCONDICIONADO)) AND ((:IsNull_DIRECAOHIDRAULICA = 1 AND `DIRECAOHIDRAULICA` IS NULL) OR (`DIRECAOHIDRAULICA` = :Original_DIRECAOHIDRAULICA)) AND ((:IsNull_VIDROELETRICO = 1 AND `VIDROELETRICO` IS NULL) OR (`VIDROELETRICO` = :Original_VIDROELETRICO)) AND ((:IsNull_AIRBAG = 1 AND `AIRBAG` IS NULL) OR (`AIRBAG` = :Original_AIRBAG)) AND ((:IsNull_ABS = 1 AND `ABS` IS NULL) OR (`ABS` = :Original_ABS)) AND (`LUGARES` = :Original_LUGARES) AND (`PORTAS` = :Original_PORTAS))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCARROS";
                param.Size = 0;
                param.SourceColumn = "IDCARROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MODELOS_IDMODELO";
                param.Size = 0;
                param.SourceColumn = "MODELOS_IDMODELO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COR_IDCOR";
                param.Size = 0;
                param.SourceColumn = "COR_IDCOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PLACA";
                param.Size = 0;
                param.SourceColumn = "PLACA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_RENAVAM";
                param.Size = 0;
                param.SourceColumn = "RENAVAM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CHASSI";
                param.Size = 0;
                param.SourceColumn = "CHASSI";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANO_FAB";
                param.Size = 0;
                param.SourceColumn = "ANO_FAB";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANO_MOD";
                param.Size = 0;
                param.SourceColumn = "ANO_MOD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_QUILOMETRAGEM";
                param.Size = 0;
                param.SourceColumn = "QUILOMETRAGEM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR_DIARIA";
                param.Size = 0;
                param.SourceColumn = "VALOR_DIARIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATA_AQUISICAO";
                param.Size = 0;
                param.SourceColumn = "DATA_AQUISICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ARCONDICIONADO";
                param.Size = 0;
                param.SourceColumn = "ARCONDICIONADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ARCONDICIONADO";
                param.Size = 0;
                param.SourceColumn = "ARCONDICIONADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DIRECAOHIDRAULICA";
                param.Size = 0;
                param.SourceColumn = "DIRECAOHIDRAULICA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DIRECAOHIDRAULICA";
                param.Size = 0;
                param.SourceColumn = "DIRECAOHIDRAULICA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_VIDROELETRICO";
                param.Size = 0;
                param.SourceColumn = "VIDROELETRICO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VIDROELETRICO";
                param.Size = 0;
                param.SourceColumn = "VIDROELETRICO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_AIRBAG";
                param.Size = 0;
                param.SourceColumn = "AIRBAG";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_AIRBAG";
                param.Size = 0;
                param.SourceColumn = "AIRBAG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ABS";
                param.Size = 0;
                param.SourceColumn = "ABS";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ABS";
                param.Size = 0;
                param.SourceColumn = "ABS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LUGARES";
                param.Size = 0;
                param.SourceColumn = "LUGARES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PORTAS";
                param.Size = 0;
                param.SourceColumn = "PORTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "carros";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCARROS", "IDCARROS");
                this.TableMapping.ColumnMappings.Add("CONTRATOCARRO_IDCONTRATOCARRO", "CONTRATOCARRO_IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("MANUTENCAO_IDMANUTENCAO", "MANUTENCAO_IDMANUTENCAO");
                this.TableMapping.ColumnMappings.Add("MODELOS_IDMODELO", "MODELOS_IDMODELO");
                this.TableMapping.ColumnMappings.Add("COR_IDCOR", "COR_IDCOR");
                this.TableMapping.ColumnMappings.Add("PLACA", "PLACA");
                this.TableMapping.ColumnMappings.Add("RENAVAM", "RENAVAM");
                this.TableMapping.ColumnMappings.Add("CHASSI", "CHASSI");
                this.TableMapping.ColumnMappings.Add("ANO_FAB", "ANO_FAB");
                this.TableMapping.ColumnMappings.Add("ANO_MOD", "ANO_MOD");
                this.TableMapping.ColumnMappings.Add("QUILOMETRAGEM", "QUILOMETRAGEM");
                this.TableMapping.ColumnMappings.Add("VALOR_DIARIA", "VALOR_DIARIA");
                this.TableMapping.ColumnMappings.Add("DATA_AQUISICAO", "DATA_AQUISICAO");
                this.TableMapping.ColumnMappings.Add("ARCONDICIONADO", "ARCONDICIONADO");
                this.TableMapping.ColumnMappings.Add("DIRECAOHIDRAULICA", "DIRECAOHIDRAULICA");
                this.TableMapping.ColumnMappings.Add("VIDROELETRICO", "VIDROELETRICO");
                this.TableMapping.ColumnMappings.Add("AIRBAG", "AIRBAG");
                this.TableMapping.ColumnMappings.Add("ABS", "ABS");
                this.TableMapping.ColumnMappings.Add("LUGARES", "LUGARES");
                this.TableMapping.ColumnMappings.Add("PORTAS", "PORTAS");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow NewcarrosRow() {
                return ((carrosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new carrosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(carrosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.carrosRowChanged != null)) {
                    this.carrosRowChanged(this, new carrosRowChangeEvent(((carrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.carrosRowChanging != null)) {
                    this.carrosRowChanging(this, new carrosRowChangeEvent(((carrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.carrosRowDeleted != null)) {
                    this.carrosRowDeleted(this, new carrosRowChangeEvent(((carrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.carrosRowDeleting != null)) {
                    this.carrosRowDeleting(this, new carrosRowChangeEvent(((carrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecarrosRow(carrosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "carrosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class carrosRow : System.Data.DataRow {
            
            private carrosDataTable tablecarros;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal carrosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecarros = ((carrosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCARROS {
                get {
                    return ((int)(this[this.tablecarros.IDCARROSColumn]));
                }
                set {
                    this[this.tablecarros.IDCARROSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOCARRO_IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablecarros.CONTRATOCARRO_IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablecarros.CONTRATOCARRO_IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MANUTENCAO_IDMANUTENCAO {
                get {
                    return ((int)(this[this.tablecarros.MANUTENCAO_IDMANUTENCAOColumn]));
                }
                set {
                    this[this.tablecarros.MANUTENCAO_IDMANUTENCAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MODELOS_IDMODELO {
                get {
                    return ((int)(this[this.tablecarros.MODELOS_IDMODELOColumn]));
                }
                set {
                    this[this.tablecarros.MODELOS_IDMODELOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COR_IDCOR {
                get {
                    return ((int)(this[this.tablecarros.COR_IDCORColumn]));
                }
                set {
                    this[this.tablecarros.COR_IDCORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PLACA {
                get {
                    return ((int)(this[this.tablecarros.PLACAColumn]));
                }
                set {
                    this[this.tablecarros.PLACAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RENAVAM {
                get {
                    return ((string)(this[this.tablecarros.RENAVAMColumn]));
                }
                set {
                    this[this.tablecarros.RENAVAMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHASSI {
                get {
                    return ((string)(this[this.tablecarros.CHASSIColumn]));
                }
                set {
                    this[this.tablecarros.CHASSIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ANO_FAB {
                get {
                    return ((int)(this[this.tablecarros.ANO_FABColumn]));
                }
                set {
                    this[this.tablecarros.ANO_FABColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ANO_MOD {
                get {
                    return ((int)(this[this.tablecarros.ANO_MODColumn]));
                }
                set {
                    this[this.tablecarros.ANO_MODColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUILOMETRAGEM {
                get {
                    return ((int)(this[this.tablecarros.QUILOMETRAGEMColumn]));
                }
                set {
                    this[this.tablecarros.QUILOMETRAGEMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR_DIARIA {
                get {
                    return ((decimal)(this[this.tablecarros.VALOR_DIARIAColumn]));
                }
                set {
                    this[this.tablecarros.VALOR_DIARIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATA_AQUISICAO {
                get {
                    return ((System.DateTime)(this[this.tablecarros.DATA_AQUISICAOColumn]));
                }
                set {
                    this[this.tablecarros.DATA_AQUISICAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ARCONDICIONADO {
                get {
                    try {
                        return ((short)(this[this.tablecarros.ARCONDICIONADOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecarros.ARCONDICIONADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DIRECAOHIDRAULICA {
                get {
                    try {
                        return ((short)(this[this.tablecarros.DIRECAOHIDRAULICAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecarros.DIRECAOHIDRAULICAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short VIDROELETRICO {
                get {
                    try {
                        return ((short)(this[this.tablecarros.VIDROELETRICOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecarros.VIDROELETRICOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AIRBAG {
                get {
                    try {
                        return ((short)(this[this.tablecarros.AIRBAGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecarros.AIRBAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ABS {
                get {
                    try {
                        return ((short)(this[this.tablecarros.ABSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecarros.ABSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUGARES {
                get {
                    return ((int)(this[this.tablecarros.LUGARESColumn]));
                }
                set {
                    this[this.tablecarros.LUGARESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PORTAS {
                get {
                    return ((int)(this[this.tablecarros.PORTASColumn]));
                }
                set {
                    this[this.tablecarros.PORTASColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_CARROS_6"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CARROS_6"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow manutencaoRow {
                get {
                    return ((manutencaoRow)(this.GetParentRow(this.Table.ParentRelations["FK_CARROS_5"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CARROS_5"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRow corRow {
                get {
                    return ((corRow)(this.GetParentRow(this.Table.ParentRelations["FK_CARROS_4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CARROS_4"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow modelosRow {
                get {
                    return ((modelosRow)(this.GetParentRow(this.Table.ParentRelations["FK_CARROS_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CARROS_3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsARCONDICIONADONull() {
                return this.IsNull(this.tablecarros.ARCONDICIONADOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetARCONDICIONADONull() {
                this[this.tablecarros.ARCONDICIONADOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRECAOHIDRAULICANull() {
                return this.IsNull(this.tablecarros.DIRECAOHIDRAULICAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRECAOHIDRAULICANull() {
                this[this.tablecarros.DIRECAOHIDRAULICAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVIDROELETRICONull() {
                return this.IsNull(this.tablecarros.VIDROELETRICOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVIDROELETRICONull() {
                this[this.tablecarros.VIDROELETRICOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAIRBAGNull() {
                return this.IsNull(this.tablecarros.AIRBAGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAIRBAGNull() {
                this[this.tablecarros.AIRBAGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABSNull() {
                return this.IsNull(this.tablecarros.ABSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABSNull() {
                this[this.tablecarros.ABSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRow[] GetentradasaidaRows() {
                return ((entradasaidaRow[])(this.GetChildRows(this.Table.ChildRelations["FK_ENTRADASAIDA_1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow[] GetcontratocarroRows() {
                return ((contratocarroRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOCARRO_3"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class carrosRowChangeEvent : System.EventArgs {
            
            private carrosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRowChangeEvent(carrosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class clienteDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCLIENTE;
            
            private System.Data.DataColumn columnUSUARIO_IDUSUARIO;
            
            private System.Data.DataColumn columnENDERECO_IDENDERECO;
            
            private System.Data.DataColumn columnNOME_CLIENTE;
            
            private System.Data.DataColumn columnTIPO_CLIENTE;
            
            private System.Data.DataColumn columnSTATUS_CLIENTE;
            
            private System.Data.DataColumn columnCPF;
            
            private System.Data.DataColumn columnCNPJ;
            
            private System.Data.DataColumn columnEMAIL;
            
            private System.Data.DataColumn columnDT_NASCIMENTO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "cliente";
                this.Name = "cliente";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal clienteDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected clienteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCLIENTEColumn {
                get {
                    return this.columnIDCLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn USUARIO_IDUSUARIOColumn {
                get {
                    return this.columnUSUARIO_IDUSUARIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ENDERECO_IDENDERECOColumn {
                get {
                    return this.columnENDERECO_IDENDERECO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NOME_CLIENTEColumn {
                get {
                    return this.columnNOME_CLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TIPO_CLIENTEColumn {
                get {
                    return this.columnTIPO_CLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn STATUS_CLIENTEColumn {
                get {
                    return this.columnSTATUS_CLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CPFColumn {
                get {
                    return this.columnCPF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CNPJColumn {
                get {
                    return this.columnCNPJ;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DT_NASCIMENTOColumn {
                get {
                    return this.columnDT_NASCIMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow this[int index] {
                get {
                    return ((clienteRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event clienteRowChangeEventHandler clienteRowChanging;
            
            public event clienteRowChangeEventHandler clienteRowChanged;
            
            public event clienteRowChangeEventHandler clienteRowDeleting;
            
            public event clienteRowChangeEventHandler clienteRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddclienteRow(clienteRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow AddclienteRow(int IDCLIENTE, usuariosRow parentusuariosRowByFK_CLIENTE_2, enderecoRow parentenderecoRowByFK_CLIENTE_3, string NOME_CLIENTE, string TIPO_CLIENTE, short STATUS_CLIENTE, string CPF, string CNPJ, string EMAIL, System.DateTime DT_NASCIMENTO) {
                clienteRow rowclienteRow = ((clienteRow)(this.NewRow()));
                rowclienteRow.ItemArray = new object[] {
                        IDCLIENTE,
                        parentusuariosRowByFK_CLIENTE_2[0],
                        parentenderecoRowByFK_CLIENTE_3[0],
                        NOME_CLIENTE,
                        TIPO_CLIENTE,
                        STATUS_CLIENTE,
                        CPF,
                        CNPJ,
                        EMAIL,
                        DT_NASCIMENTO};
                this.Rows.Add(rowclienteRow);
                return rowclienteRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow FindByIDCLIENTE(int IDCLIENTE) {
                return ((clienteRow)(this.Rows.Find(new object[] {
                            IDCLIENTE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                clienteDataTable cln = ((clienteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new clienteDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCLIENTE = base.Columns["IDCLIENTE"];
                this.columnUSUARIO_IDUSUARIO = base.Columns["USUARIO_IDUSUARIO"];
                this.columnENDERECO_IDENDERECO = base.Columns["ENDERECO_IDENDERECO"];
                this.columnNOME_CLIENTE = base.Columns["NOME_CLIENTE"];
                this.columnTIPO_CLIENTE = base.Columns["TIPO_CLIENTE"];
                this.columnSTATUS_CLIENTE = base.Columns["STATUS_CLIENTE"];
                this.columnCPF = base.Columns["CPF"];
                this.columnCNPJ = base.Columns["CNPJ"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnDT_NASCIMENTO = base.Columns["DT_NASCIMENTO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCLIENTE = new System.Data.DataColumn("IDCLIENTE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCLIENTE);
                this.columnUSUARIO_IDUSUARIO = new System.Data.DataColumn("USUARIO_IDUSUARIO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSUARIO_IDUSUARIO);
                this.columnENDERECO_IDENDERECO = new System.Data.DataColumn("ENDERECO_IDENDERECO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnENDERECO_IDENDERECO);
                this.columnNOME_CLIENTE = new System.Data.DataColumn("NOME_CLIENTE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOME_CLIENTE);
                this.columnTIPO_CLIENTE = new System.Data.DataColumn("TIPO_CLIENTE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPO_CLIENTE);
                this.columnSTATUS_CLIENTE = new System.Data.DataColumn("STATUS_CLIENTE", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS_CLIENTE);
                this.columnCPF = new System.Data.DataColumn("CPF", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCPF);
                this.columnCNPJ = new System.Data.DataColumn("CNPJ", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCNPJ);
                this.columnEMAIL = new System.Data.DataColumn("EMAIL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnDT_NASCIMENTO = new System.Data.DataColumn("DT_NASCIMENTO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDT_NASCIMENTO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCLIENTE}, true));
                this.columnIDCLIENTE.AllowDBNull = false;
                this.columnIDCLIENTE.Unique = true;
                this.columnUSUARIO_IDUSUARIO.AllowDBNull = false;
                this.columnENDERECO_IDENDERECO.AllowDBNull = false;
                this.columnNOME_CLIENTE.AllowDBNull = false;
                this.columnTIPO_CLIENTE.AllowDBNull = false;
                this.columnCPF.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.cliente", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand(@"INSERT INTO `fatcar`.`cliente` (`USUARIO_IDUSUARIO`, `ENDERECO_IDENDERECO`, `NOME_CLIENTE`, `TIPO_CLIENTE`, `STATUS_CLIENTE`, `CPF`, `CNPJ`, `EMAIL`, `DT_NASCIMENTO`) VALUES (:USUARIO_IDUSUARIO, :ENDERECO_IDENDERECO, :NOME_CLIENTE, :TIPO_CLIENTE, :STATUS_CLIENTE, :CPF, :CNPJ, :EMAIL, :DT_NASCIMENTO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "USUARIO_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "NOME_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPO_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "TIPO_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "STATUS_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "STATUS_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CPF";
                param.Size = 0;
                param.SourceColumn = "CPF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CNPJ";
                param.Size = 0;
                param.SourceColumn = "CNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DT_NASCIMENTO";
                param.Size = 0;
                param.SourceColumn = "DT_NASCIMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`cliente` SET `USUARIO_IDUSUARIO` = :USUARIO_IDUSUARIO, `ENDERECO_IDENDERECO` = :ENDERECO_IDENDERECO, `NOME_CLIENTE` = :NOME_CLIENTE, `TIPO_CLIENTE` = :TIPO_CLIENTE, `STATUS_CLIENTE` = :STATUS_CLIENTE, `CPF` = :CPF, `CNPJ` = :CNPJ, `EMAIL` = :EMAIL, `DT_NASCIMENTO` = :DT_NASCIMENTO WHERE ((`IDCLIENTE` = :Original_IDCLIENTE) AND (`USUARIO_IDUSUARIO` = :Original_USUARIO_IDUSUARIO) AND (`ENDERECO_IDENDERECO` = :Original_ENDERECO_IDENDERECO) AND (`NOME_CLIENTE` = :Original_NOME_CLIENTE) AND (`TIPO_CLIENTE` = :Original_TIPO_CLIENTE) AND ((:IsNull_STATUS_CLIENTE = 1 AND `STATUS_CLIENTE` IS NULL) OR (`STATUS_CLIENTE` = :Original_STATUS_CLIENTE)) AND (`CPF` = :Original_CPF) AND ((:IsNull_CNPJ = 1 AND `CNPJ` IS NULL) OR (`CNPJ` = :Original_CNPJ)) AND ((:IsNull_EMAIL = 1 AND `EMAIL` IS NULL) OR (`EMAIL` = :Original_EMAIL)) AND ((:IsNull_DT_NASCIMENTO = 1 AND `DT_NASCIMENTO` IS NULL) OR (`DT_NASCIMENTO` = :Original_DT_NASCIMENTO)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "USUARIO_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "NOME_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPO_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "TIPO_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "STATUS_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "STATUS_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CPF";
                param.Size = 0;
                param.SourceColumn = "CPF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CNPJ";
                param.Size = 0;
                param.SourceColumn = "CNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DT_NASCIMENTO";
                param.Size = 0;
                param.SourceColumn = "DT_NASCIMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_USUARIO_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "NOME_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPO_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "TIPO_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_STATUS_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "STATUS_CLIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_STATUS_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "STATUS_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CPF";
                param.Size = 0;
                param.SourceColumn = "CPF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CNPJ";
                param.Size = 0;
                param.SourceColumn = "CNPJ";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CNPJ";
                param.Size = 0;
                param.SourceColumn = "CNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DT_NASCIMENTO";
                param.Size = 0;
                param.SourceColumn = "DT_NASCIMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DT_NASCIMENTO";
                param.Size = 0;
                param.SourceColumn = "DT_NASCIMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`cliente` WHERE ((`IDCLIENTE` = :Original_IDCLIENTE) AND (`USUARIO_IDUSUARIO` = :Original_USUARIO_IDUSUARIO) AND (`ENDERECO_IDENDERECO` = :Original_ENDERECO_IDENDERECO) AND (`NOME_CLIENTE` = :Original_NOME_CLIENTE) AND (`TIPO_CLIENTE` = :Original_TIPO_CLIENTE) AND ((:IsNull_STATUS_CLIENTE = 1 AND `STATUS_CLIENTE` IS NULL) OR (`STATUS_CLIENTE` = :Original_STATUS_CLIENTE)) AND (`CPF` = :Original_CPF) AND ((:IsNull_CNPJ = 1 AND `CNPJ` IS NULL) OR (`CNPJ` = :Original_CNPJ)) AND ((:IsNull_EMAIL = 1 AND `EMAIL` IS NULL) OR (`EMAIL` = :Original_EMAIL)) AND ((:IsNull_DT_NASCIMENTO = 1 AND `DT_NASCIMENTO` IS NULL) OR (`DT_NASCIMENTO` = :Original_DT_NASCIMENTO)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_USUARIO_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "NOME_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPO_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "TIPO_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_STATUS_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "STATUS_CLIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_STATUS_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "STATUS_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CPF";
                param.Size = 0;
                param.SourceColumn = "CPF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CNPJ";
                param.Size = 0;
                param.SourceColumn = "CNPJ";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CNPJ";
                param.Size = 0;
                param.SourceColumn = "CNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DT_NASCIMENTO";
                param.Size = 0;
                param.SourceColumn = "DT_NASCIMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DT_NASCIMENTO";
                param.Size = 0;
                param.SourceColumn = "DT_NASCIMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "cliente";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCLIENTE", "IDCLIENTE");
                this.TableMapping.ColumnMappings.Add("USUARIO_IDUSUARIO", "USUARIO_IDUSUARIO");
                this.TableMapping.ColumnMappings.Add("ENDERECO_IDENDERECO", "ENDERECO_IDENDERECO");
                this.TableMapping.ColumnMappings.Add("NOME_CLIENTE", "NOME_CLIENTE");
                this.TableMapping.ColumnMappings.Add("TIPO_CLIENTE", "TIPO_CLIENTE");
                this.TableMapping.ColumnMappings.Add("STATUS_CLIENTE", "STATUS_CLIENTE");
                this.TableMapping.ColumnMappings.Add("CPF", "CPF");
                this.TableMapping.ColumnMappings.Add("CNPJ", "CNPJ");
                this.TableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
                this.TableMapping.ColumnMappings.Add("DT_NASCIMENTO", "DT_NASCIMENTO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow NewclienteRow() {
                return ((clienteRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new clienteRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(clienteRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.clienteRowChanged != null)) {
                    this.clienteRowChanged(this, new clienteRowChangeEvent(((clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.clienteRowChanging != null)) {
                    this.clienteRowChanging(this, new clienteRowChangeEvent(((clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.clienteRowDeleted != null)) {
                    this.clienteRowDeleted(this, new clienteRowChangeEvent(((clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.clienteRowDeleting != null)) {
                    this.clienteRowDeleting(this, new clienteRowChangeEvent(((clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveclienteRow(clienteRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "clienteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class clienteRow : System.Data.DataRow {
            
            private clienteDataTable tablecliente;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal clienteRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecliente = ((clienteDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCLIENTE {
                get {
                    return ((int)(this[this.tablecliente.IDCLIENTEColumn]));
                }
                set {
                    this[this.tablecliente.IDCLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USUARIO_IDUSUARIO {
                get {
                    return ((int)(this[this.tablecliente.USUARIO_IDUSUARIOColumn]));
                }
                set {
                    this[this.tablecliente.USUARIO_IDUSUARIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ENDERECO_IDENDERECO {
                get {
                    return ((int)(this[this.tablecliente.ENDERECO_IDENDERECOColumn]));
                }
                set {
                    this[this.tablecliente.ENDERECO_IDENDERECOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOME_CLIENTE {
                get {
                    return ((string)(this[this.tablecliente.NOME_CLIENTEColumn]));
                }
                set {
                    this[this.tablecliente.NOME_CLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIPO_CLIENTE {
                get {
                    return ((string)(this[this.tablecliente.TIPO_CLIENTEColumn]));
                }
                set {
                    this[this.tablecliente.TIPO_CLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short STATUS_CLIENTE {
                get {
                    try {
                        return ((short)(this[this.tablecliente.STATUS_CLIENTEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecliente.STATUS_CLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CPF {
                get {
                    return ((string)(this[this.tablecliente.CPFColumn]));
                }
                set {
                    this[this.tablecliente.CPFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CNPJ {
                get {
                    try {
                        return ((string)(this[this.tablecliente.CNPJColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecliente.CNPJColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tablecliente.EMAILColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecliente.EMAILColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DT_NASCIMENTO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecliente.DT_NASCIMENTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecliente.DT_NASCIMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow enderecoRow {
                get {
                    return ((enderecoRow)(this.GetParentRow(this.Table.ParentRelations["FK_CLIENTE_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CLIENTE_3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow usuariosRow {
                get {
                    return ((usuariosRow)(this.GetParentRow(this.Table.ParentRelations["FK_CLIENTE_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CLIENTE_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUS_CLIENTENull() {
                return this.IsNull(this.tablecliente.STATUS_CLIENTEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUS_CLIENTENull() {
                this[this.tablecliente.STATUS_CLIENTEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCNPJNull() {
                return this.IsNull(this.tablecliente.CNPJColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCNPJNull() {
                this[this.tablecliente.CNPJColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tablecliente.EMAILColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tablecliente.EMAILColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDT_NASCIMENTONull() {
                return this.IsNull(this.tablecliente.DT_NASCIMENTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDT_NASCIMENTONull() {
                this[this.tablecliente.DT_NASCIMENTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRow[] GettelefoneclienteRows() {
                return ((telefoneclienteRow[])(this.GetChildRows(this.Table.ChildRelations["FK_TELEFONECLIENTE_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow[] GetcontratosRows() {
                return ((contratosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOS_2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class clienteRowChangeEvent : System.EventArgs {
            
            private clienteRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRowChangeEvent(clienteRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contratocarroDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTRATOCARRO;
            
            private System.Data.DataColumn columnCONTRATOS_IDCONTRATO;
            
            private System.Data.DataColumn columnCARRO_IDCARRO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "contratocarro";
                this.Name = "contratocarro";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratocarroDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contratocarroDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTRATOCARROColumn {
                get {
                    return this.columnIDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOS_IDCONTRATOColumn {
                get {
                    return this.columnCONTRATOS_IDCONTRATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CARRO_IDCARROColumn {
                get {
                    return this.columnCARRO_IDCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow this[int index] {
                get {
                    return ((contratocarroRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event contratocarroRowChangeEventHandler contratocarroRowChanging;
            
            public event contratocarroRowChangeEventHandler contratocarroRowChanged;
            
            public event contratocarroRowChangeEventHandler contratocarroRowDeleting;
            
            public event contratocarroRowChangeEventHandler contratocarroRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontratocarroRow(contratocarroRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow AddcontratocarroRow(int IDCONTRATOCARRO, contratosRow parentcontratosRowByFK_CONTRATOCARRO_1, carrosRow parentcarrosRowByFK_CONTRATOCARRO_3) {
                contratocarroRow rowcontratocarroRow = ((contratocarroRow)(this.NewRow()));
                rowcontratocarroRow.ItemArray = new object[] {
                        IDCONTRATOCARRO,
                        parentcontratosRowByFK_CONTRATOCARRO_1[0],
                        parentcarrosRowByFK_CONTRATOCARRO_3[0]};
                this.Rows.Add(rowcontratocarroRow);
                return rowcontratocarroRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow FindByIDCONTRATOCARRO(int IDCONTRATOCARRO) {
                return ((contratocarroRow)(this.Rows.Find(new object[] {
                            IDCONTRATOCARRO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contratocarroDataTable cln = ((contratocarroDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contratocarroDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTRATOCARRO = base.Columns["IDCONTRATOCARRO"];
                this.columnCONTRATOS_IDCONTRATO = base.Columns["CONTRATOS_IDCONTRATO"];
                this.columnCARRO_IDCARRO = base.Columns["CARRO_IDCARRO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTRATOCARRO = new System.Data.DataColumn("IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTRATOCARRO);
                this.columnCONTRATOS_IDCONTRATO = new System.Data.DataColumn("CONTRATOS_IDCONTRATO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOS_IDCONTRATO);
                this.columnCARRO_IDCARRO = new System.Data.DataColumn("CARRO_IDCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARRO_IDCARRO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTRATOCARRO}, true));
                this.columnIDCONTRATOCARRO.AllowDBNull = false;
                this.columnIDCONTRATOCARRO.Unique = true;
                this.columnCONTRATOS_IDCONTRATO.AllowDBNull = false;
                this.columnCARRO_IDCARRO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.contratocarro", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`contratocarro` (`CONTRATOS_IDCONTRATO`, `CARRO_IDCARRO`) VA" +
                        "LUES (:CONTRATOS_IDCONTRATO, :CARRO_IDCARRO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOS_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOS_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARRO_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARRO_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`contratocarro` SET `CONTRATOS_IDCONTRATO` = :CONTRATOS_IDCONTRATO, `CARRO_IDCARRO` = :CARRO_IDCARRO WHERE ((`IDCONTRATOCARRO` = :Original_IDCONTRATOCARRO) AND (`CONTRATOS_IDCONTRATO` = :Original_CONTRATOS_IDCONTRATO) AND (`CARRO_IDCARRO` = :Original_CARRO_IDCARRO))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOS_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOS_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARRO_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARRO_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOS_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOS_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARRO_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARRO_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`contratocarro` WHERE ((`IDCONTRATOCARRO` = :Original_IDCONT" +
                        "RATOCARRO) AND (`CONTRATOS_IDCONTRATO` = :Original_CONTRATOS_IDCONTRATO) AND (`C" +
                        "ARRO_IDCARRO` = :Original_CARRO_IDCARRO))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOS_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOS_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARRO_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARRO_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "contratocarro";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTRATOCARRO", "IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("CONTRATOS_IDCONTRATO", "CONTRATOS_IDCONTRATO");
                this.TableMapping.ColumnMappings.Add("CARRO_IDCARRO", "CARRO_IDCARRO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow NewcontratocarroRow() {
                return ((contratocarroRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contratocarroRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contratocarroRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contratocarroRowChanged != null)) {
                    this.contratocarroRowChanged(this, new contratocarroRowChangeEvent(((contratocarroRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contratocarroRowChanging != null)) {
                    this.contratocarroRowChanging(this, new contratocarroRowChangeEvent(((contratocarroRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contratocarroRowDeleted != null)) {
                    this.contratocarroRowDeleted(this, new contratocarroRowChangeEvent(((contratocarroRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contratocarroRowDeleting != null)) {
                    this.contratocarroRowDeleting(this, new contratocarroRowChangeEvent(((contratocarroRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontratocarroRow(contratocarroRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contratocarroDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class contratocarroRow : System.Data.DataRow {
            
            private contratocarroDataTable tablecontratocarro;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratocarroRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontratocarro = ((contratocarroDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablecontratocarro.IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablecontratocarro.IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOS_IDCONTRATO {
                get {
                    return ((int)(this[this.tablecontratocarro.CONTRATOS_IDCONTRATOColumn]));
                }
                set {
                    this[this.tablecontratocarro.CONTRATOS_IDCONTRATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CARRO_IDCARRO {
                get {
                    return ((int)(this[this.tablecontratocarro.CARRO_IDCARROColumn]));
                }
                set {
                    this[this.tablecontratocarro.CARRO_IDCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow carrosRow {
                get {
                    return ((carrosRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOCARRO_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOCARRO_3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow contratosRow {
                get {
                    return ((contratosRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOCARRO_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOCARRO_1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRow[] GetmultasRows() {
                return ((multasRow[])(this.GetChildRows(this.Table.ChildRelations["FK_MULTAS_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow[] GetmotoristasRows() {
                return ((motoristasRow[])(this.GetChildRows(this.Table.ChildRelations["FK_MOTORISTAS_1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRow[] GetcontratoviagensRows() {
                return ((contratoviagensRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOVIAGENS_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRow[] GetcontratosinistrosRows() {
                return ((contratosinistrosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOSINISTROS_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRow[] GetcontratosegurosRows() {
                return ((contratosegurosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOSEGUROS_1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRow[] GetcontratopneusRows() {
                return ((contratopneusRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOPNEUS_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow[] GetcarrosRows() {
                return ((carrosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CARROS_6"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class contratocarroRowChangeEvent : System.EventArgs {
            
            private contratocarroRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRowChangeEvent(contratocarroRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contratopneusDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTRATOPNEUS;
            
            private System.Data.DataColumn columnCONTRATOCARRO_IDCONTRATOCARRO;
            
            private System.Data.DataColumn columnKMUSADA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "contratopneus";
                this.Name = "contratopneus";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratopneusDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contratopneusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTRATOPNEUSColumn {
                get {
                    return this.columnIDCONTRATOPNEUS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOCARRO_IDCONTRATOCARROColumn {
                get {
                    return this.columnCONTRATOCARRO_IDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KMUSADAColumn {
                get {
                    return this.columnKMUSADA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRow this[int index] {
                get {
                    return ((contratopneusRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event contratopneusRowChangeEventHandler contratopneusRowChanging;
            
            public event contratopneusRowChangeEventHandler contratopneusRowChanged;
            
            public event contratopneusRowChangeEventHandler contratopneusRowDeleting;
            
            public event contratopneusRowChangeEventHandler contratopneusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontratopneusRow(contratopneusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRow AddcontratopneusRow(int IDCONTRATOPNEUS, contratocarroRow parentcontratocarroRowByFK_CONTRATOPNEUS_2, int KMUSADA) {
                contratopneusRow rowcontratopneusRow = ((contratopneusRow)(this.NewRow()));
                rowcontratopneusRow.ItemArray = new object[] {
                        IDCONTRATOPNEUS,
                        parentcontratocarroRowByFK_CONTRATOPNEUS_2[0],
                        KMUSADA};
                this.Rows.Add(rowcontratopneusRow);
                return rowcontratopneusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRow FindByIDCONTRATOPNEUS(int IDCONTRATOPNEUS) {
                return ((contratopneusRow)(this.Rows.Find(new object[] {
                            IDCONTRATOPNEUS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contratopneusDataTable cln = ((contratopneusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contratopneusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTRATOPNEUS = base.Columns["IDCONTRATOPNEUS"];
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = base.Columns["CONTRATOCARRO_IDCONTRATOCARRO"];
                this.columnKMUSADA = base.Columns["KMUSADA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTRATOPNEUS = new System.Data.DataColumn("IDCONTRATOPNEUS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTRATOPNEUS);
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = new System.Data.DataColumn("CONTRATOCARRO_IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOCARRO_IDCONTRATOCARRO);
                this.columnKMUSADA = new System.Data.DataColumn("KMUSADA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKMUSADA);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTRATOPNEUS}, true));
                this.columnIDCONTRATOPNEUS.AllowDBNull = false;
                this.columnIDCONTRATOPNEUS.Unique = true;
                this.columnCONTRATOCARRO_IDCONTRATOCARRO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.contratopneus", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`contratopneus` (`CONTRATOCARRO_IDCONTRATOCARRO`, `KMUSADA`)" +
                        " VALUES (:CONTRATOCARRO_IDCONTRATOCARRO, :KMUSADA)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMUSADA";
                param.Size = 0;
                param.SourceColumn = "KMUSADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`contratopneus` SET `CONTRATOCARRO_IDCONTRATOCARRO` = :CONTRATOCARRO_IDCONTRATOCARRO, `KMUSADA` = :KMUSADA WHERE ((`IDCONTRATOPNEUS` = :Original_IDCONTRATOPNEUS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:IsNull_KMUSADA = 1 AND `KMUSADA` IS NULL) OR (`KMUSADA` = :Original_KMUSADA)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMUSADA";
                param.Size = 0;
                param.SourceColumn = "KMUSADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOPNEUS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOPNEUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_KMUSADA";
                param.Size = 0;
                param.SourceColumn = "KMUSADA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMUSADA";
                param.Size = 0;
                param.SourceColumn = "KMUSADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`contratopneus` WHERE ((`IDCONTRATOPNEUS` = :Original_IDCONTRATOPNEUS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:IsNull_KMUSADA = 1 AND `KMUSADA` IS NULL) OR (`KMUSADA` = :Original_KMUSADA)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOPNEUS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOPNEUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_KMUSADA";
                param.Size = 0;
                param.SourceColumn = "KMUSADA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMUSADA";
                param.Size = 0;
                param.SourceColumn = "KMUSADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "contratopneus";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTRATOPNEUS", "IDCONTRATOPNEUS");
                this.TableMapping.ColumnMappings.Add("CONTRATOCARRO_IDCONTRATOCARRO", "CONTRATOCARRO_IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("KMUSADA", "KMUSADA");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRow NewcontratopneusRow() {
                return ((contratopneusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contratopneusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contratopneusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contratopneusRowChanged != null)) {
                    this.contratopneusRowChanged(this, new contratopneusRowChangeEvent(((contratopneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contratopneusRowChanging != null)) {
                    this.contratopneusRowChanging(this, new contratopneusRowChangeEvent(((contratopneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contratopneusRowDeleted != null)) {
                    this.contratopneusRowDeleted(this, new contratopneusRowChangeEvent(((contratopneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contratopneusRowDeleting != null)) {
                    this.contratopneusRowDeleting(this, new contratopneusRowChangeEvent(((contratopneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontratopneusRow(contratopneusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contratopneusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class contratopneusRow : System.Data.DataRow {
            
            private contratopneusDataTable tablecontratopneus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratopneusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontratopneus = ((contratopneusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTRATOPNEUS {
                get {
                    return ((int)(this[this.tablecontratopneus.IDCONTRATOPNEUSColumn]));
                }
                set {
                    this[this.tablecontratopneus.IDCONTRATOPNEUSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOCARRO_IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablecontratopneus.CONTRATOCARRO_IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablecontratopneus.CONTRATOCARRO_IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KMUSADA {
                get {
                    try {
                        return ((int)(this[this.tablecontratopneus.KMUSADAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratopneus.KMUSADAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOPNEUS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOPNEUS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKMUSADANull() {
                return this.IsNull(this.tablecontratopneus.KMUSADAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKMUSADANull() {
                this[this.tablecontratopneus.KMUSADAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class contratopneusRowChangeEvent : System.EventArgs {
            
            private contratopneusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRowChangeEvent(contratopneusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratopneusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contratosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTRATO;
            
            private System.Data.DataColumn columnCLIENTE_IDCLIENTE;
            
            private System.Data.DataColumn columnSTATUS;
            
            private System.Data.DataColumn columnDATACONTRATO;
            
            private System.Data.DataColumn columnDATAINICIO;
            
            private System.Data.DataColumn columnDATAFINAL;
            
            private System.Data.DataColumn columnVALOR;
            
            private System.Data.DataColumn columnKMINICIAL;
            
            private System.Data.DataColumn columnKMFINAL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "contratos";
                this.Name = "contratos";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contratosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTRATOColumn {
                get {
                    return this.columnIDCONTRATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CLIENTE_IDCLIENTEColumn {
                get {
                    return this.columnCLIENTE_IDCLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATACONTRATOColumn {
                get {
                    return this.columnDATACONTRATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATAINICIOColumn {
                get {
                    return this.columnDATAINICIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATAFINALColumn {
                get {
                    return this.columnDATAFINAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALORColumn {
                get {
                    return this.columnVALOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KMINICIALColumn {
                get {
                    return this.columnKMINICIAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KMFINALColumn {
                get {
                    return this.columnKMFINAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow this[int index] {
                get {
                    return ((contratosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event contratosRowChangeEventHandler contratosRowChanging;
            
            public event contratosRowChangeEventHandler contratosRowChanged;
            
            public event contratosRowChangeEventHandler contratosRowDeleting;
            
            public event contratosRowChangeEventHandler contratosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontratosRow(contratosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow AddcontratosRow(int IDCONTRATO, clienteRow parentclienteRowByFK_CONTRATOS_2, short STATUS, System.DateTime DATACONTRATO, System.DateTime DATAINICIO, System.DateTime DATAFINAL, decimal VALOR, int KMINICIAL, int KMFINAL) {
                contratosRow rowcontratosRow = ((contratosRow)(this.NewRow()));
                rowcontratosRow.ItemArray = new object[] {
                        IDCONTRATO,
                        parentclienteRowByFK_CONTRATOS_2[0],
                        STATUS,
                        DATACONTRATO,
                        DATAINICIO,
                        DATAFINAL,
                        VALOR,
                        KMINICIAL,
                        KMFINAL};
                this.Rows.Add(rowcontratosRow);
                return rowcontratosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow FindByIDCONTRATO(int IDCONTRATO) {
                return ((contratosRow)(this.Rows.Find(new object[] {
                            IDCONTRATO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contratosDataTable cln = ((contratosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contratosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTRATO = base.Columns["IDCONTRATO"];
                this.columnCLIENTE_IDCLIENTE = base.Columns["CLIENTE_IDCLIENTE"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnDATACONTRATO = base.Columns["DATACONTRATO"];
                this.columnDATAINICIO = base.Columns["DATAINICIO"];
                this.columnDATAFINAL = base.Columns["DATAFINAL"];
                this.columnVALOR = base.Columns["VALOR"];
                this.columnKMINICIAL = base.Columns["KMINICIAL"];
                this.columnKMFINAL = base.Columns["KMFINAL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTRATO = new System.Data.DataColumn("IDCONTRATO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTRATO);
                this.columnCLIENTE_IDCLIENTE = new System.Data.DataColumn("CLIENTE_IDCLIENTE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENTE_IDCLIENTE);
                this.columnSTATUS = new System.Data.DataColumn("STATUS", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnDATACONTRATO = new System.Data.DataColumn("DATACONTRATO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATACONTRATO);
                this.columnDATAINICIO = new System.Data.DataColumn("DATAINICIO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAINICIO);
                this.columnDATAFINAL = new System.Data.DataColumn("DATAFINAL", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAFINAL);
                this.columnVALOR = new System.Data.DataColumn("VALOR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR);
                this.columnKMINICIAL = new System.Data.DataColumn("KMINICIAL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKMINICIAL);
                this.columnKMFINAL = new System.Data.DataColumn("KMFINAL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKMFINAL);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTRATO}, true));
                this.columnIDCONTRATO.AllowDBNull = false;
                this.columnIDCONTRATO.Unique = true;
                this.columnCLIENTE_IDCLIENTE.AllowDBNull = false;
                this.columnDATACONTRATO.AllowDBNull = false;
                this.columnVALOR.AllowDBNull = false;
                this.columnKMINICIAL.AllowDBNull = false;
                this.columnKMFINAL.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.contratos", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`contratos` (`CLIENTE_IDCLIENTE`, `STATUS`, `DATACONTRATO`, " +
                        "`DATAINICIO`, `DATAFINAL`, `VALOR`, `KMINICIAL`, `KMFINAL`) VALUES (:CLIENTE_IDC" +
                        "LIENTE, :STATUS, :DATACONTRATO, :DATAINICIO, :DATAFINAL, :VALOR, :KMINICIAL, :KM" +
                        "FINAL)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATACONTRATO";
                param.Size = 0;
                param.SourceColumn = "DATACONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAINICIO";
                param.Size = 0;
                param.SourceColumn = "DATAINICIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAFINAL";
                param.Size = 0;
                param.SourceColumn = "DATAFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMFINAL";
                param.Size = 0;
                param.SourceColumn = "KMFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`contratos` SET `CLIENTE_IDCLIENTE` = :CLIENTE_IDCLIENTE, `STATUS` = :STATUS, `DATACONTRATO` = :DATACONTRATO, `DATAINICIO` = :DATAINICIO, `DATAFINAL` = :DATAFINAL, `VALOR` = :VALOR, `KMINICIAL` = :KMINICIAL, `KMFINAL` = :KMFINAL WHERE ((`IDCONTRATO` = :Original_IDCONTRATO) AND (`CLIENTE_IDCLIENTE` = :Original_CLIENTE_IDCLIENTE) AND ((:IsNull_STATUS = 1 AND `STATUS` IS NULL) OR (`STATUS` = :Original_STATUS)) AND (`DATACONTRATO` = :Original_DATACONTRATO) AND ((:IsNull_DATAINICIO = 1 AND `DATAINICIO` IS NULL) OR (`DATAINICIO` = :Original_DATAINICIO)) AND ((:IsNull_DATAFINAL = 1 AND `DATAFINAL` IS NULL) OR (`DATAFINAL` = :Original_DATAFINAL)) AND (`VALOR` = :Original_VALOR) AND (`KMINICIAL` = :Original_KMINICIAL) AND (`KMFINAL` = :Original_KMFINAL))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATACONTRATO";
                param.Size = 0;
                param.SourceColumn = "DATACONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAINICIO";
                param.Size = 0;
                param.SourceColumn = "DATAINICIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAFINAL";
                param.Size = 0;
                param.SourceColumn = "DATAFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMFINAL";
                param.Size = 0;
                param.SourceColumn = "KMFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATACONTRATO";
                param.Size = 0;
                param.SourceColumn = "DATACONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAINICIO";
                param.Size = 0;
                param.SourceColumn = "DATAINICIO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAINICIO";
                param.Size = 0;
                param.SourceColumn = "DATAINICIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAFINAL";
                param.Size = 0;
                param.SourceColumn = "DATAFINAL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAFINAL";
                param.Size = 0;
                param.SourceColumn = "DATAFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMFINAL";
                param.Size = 0;
                param.SourceColumn = "KMFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`contratos` WHERE ((`IDCONTRATO` = :Original_IDCONTRATO) AND (`CLIENTE_IDCLIENTE` = :Original_CLIENTE_IDCLIENTE) AND ((:IsNull_STATUS = 1 AND `STATUS` IS NULL) OR (`STATUS` = :Original_STATUS)) AND (`DATACONTRATO` = :Original_DATACONTRATO) AND ((:IsNull_DATAINICIO = 1 AND `DATAINICIO` IS NULL) OR (`DATAINICIO` = :Original_DATAINICIO)) AND ((:IsNull_DATAFINAL = 1 AND `DATAFINAL` IS NULL) OR (`DATAFINAL` = :Original_DATAFINAL)) AND (`VALOR` = :Original_VALOR) AND (`KMINICIAL` = :Original_KMINICIAL) AND (`KMFINAL` = :Original_KMFINAL))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int16;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATACONTRATO";
                param.Size = 0;
                param.SourceColumn = "DATACONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAINICIO";
                param.Size = 0;
                param.SourceColumn = "DATAINICIO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAINICIO";
                param.Size = 0;
                param.SourceColumn = "DATAINICIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAFINAL";
                param.Size = 0;
                param.SourceColumn = "DATAFINAL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Date;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAFINAL";
                param.Size = 0;
                param.SourceColumn = "DATAFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMFINAL";
                param.Size = 0;
                param.SourceColumn = "KMFINAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "contratos";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTRATO", "IDCONTRATO");
                this.TableMapping.ColumnMappings.Add("CLIENTE_IDCLIENTE", "CLIENTE_IDCLIENTE");
                this.TableMapping.ColumnMappings.Add("STATUS", "STATUS");
                this.TableMapping.ColumnMappings.Add("DATACONTRATO", "DATACONTRATO");
                this.TableMapping.ColumnMappings.Add("DATAINICIO", "DATAINICIO");
                this.TableMapping.ColumnMappings.Add("DATAFINAL", "DATAFINAL");
                this.TableMapping.ColumnMappings.Add("VALOR", "VALOR");
                this.TableMapping.ColumnMappings.Add("KMINICIAL", "KMINICIAL");
                this.TableMapping.ColumnMappings.Add("KMFINAL", "KMFINAL");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow NewcontratosRow() {
                return ((contratosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contratosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contratosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contratosRowChanged != null)) {
                    this.contratosRowChanged(this, new contratosRowChangeEvent(((contratosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contratosRowChanging != null)) {
                    this.contratosRowChanging(this, new contratosRowChangeEvent(((contratosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contratosRowDeleted != null)) {
                    this.contratosRowDeleted(this, new contratosRowChangeEvent(((contratosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contratosRowDeleting != null)) {
                    this.contratosRowDeleting(this, new contratosRowChangeEvent(((contratosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontratosRow(contratosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contratosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class contratosRow : System.Data.DataRow {
            
            private contratosDataTable tablecontratos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontratos = ((contratosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTRATO {
                get {
                    return ((int)(this[this.tablecontratos.IDCONTRATOColumn]));
                }
                set {
                    this[this.tablecontratos.IDCONTRATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CLIENTE_IDCLIENTE {
                get {
                    return ((int)(this[this.tablecontratos.CLIENTE_IDCLIENTEColumn]));
                }
                set {
                    this[this.tablecontratos.CLIENTE_IDCLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short STATUS {
                get {
                    try {
                        return ((short)(this[this.tablecontratos.STATUSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratos.STATUSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATACONTRATO {
                get {
                    return ((System.DateTime)(this[this.tablecontratos.DATACONTRATOColumn]));
                }
                set {
                    this[this.tablecontratos.DATACONTRATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATAINICIO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecontratos.DATAINICIOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratos.DATAINICIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATAFINAL {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecontratos.DATAFINALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratos.DATAFINALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR {
                get {
                    return ((decimal)(this[this.tablecontratos.VALORColumn]));
                }
                set {
                    this[this.tablecontratos.VALORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KMINICIAL {
                get {
                    return ((int)(this[this.tablecontratos.KMINICIALColumn]));
                }
                set {
                    this[this.tablecontratos.KMINICIALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KMFINAL {
                get {
                    return ((int)(this[this.tablecontratos.KMFINALColumn]));
                }
                set {
                    this[this.tablecontratos.KMFINALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow clienteRow {
                get {
                    return ((clienteRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tablecontratos.STATUSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tablecontratos.STATUSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATAINICIONull() {
                return this.IsNull(this.tablecontratos.DATAINICIOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATAINICIONull() {
                this[this.tablecontratos.DATAINICIOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATAFINALNull() {
                return this.IsNull(this.tablecontratos.DATAFINALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATAFINALNull() {
                this[this.tablecontratos.DATAFINALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRow[] GetpneusRows() {
                return ((pneusRow[])(this.GetChildRows(this.Table.ChildRelations["FK_PNEUS_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow[] GetcontratocarroRows() {
                return ((contratocarroRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CONTRATOCARRO_1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class contratosRowChangeEvent : System.EventArgs {
            
            private contratosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRowChangeEvent(contratosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contratosegurosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTRATOSSEGUROS;
            
            private System.Data.DataColumn columnCONTRATOCARRO_IDCONTRATOCARRO;
            
            private System.Data.DataColumn columnTIPOSEGURO;
            
            private System.Data.DataColumn columnVALOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "contratoseguros";
                this.Name = "contratoseguros";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratosegurosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contratosegurosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTRATOSSEGUROSColumn {
                get {
                    return this.columnIDCONTRATOSSEGUROS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOCARRO_IDCONTRATOCARROColumn {
                get {
                    return this.columnCONTRATOCARRO_IDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TIPOSEGUROColumn {
                get {
                    return this.columnTIPOSEGURO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALORColumn {
                get {
                    return this.columnVALOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRow this[int index] {
                get {
                    return ((contratosegurosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event contratosegurosRowChangeEventHandler contratosegurosRowChanging;
            
            public event contratosegurosRowChangeEventHandler contratosegurosRowChanged;
            
            public event contratosegurosRowChangeEventHandler contratosegurosRowDeleting;
            
            public event contratosegurosRowChangeEventHandler contratosegurosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontratosegurosRow(contratosegurosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRow AddcontratosegurosRow(int IDCONTRATOSSEGUROS, contratocarroRow parentcontratocarroRowByFK_CONTRATOSEGUROS_1, string TIPOSEGURO, decimal VALOR) {
                contratosegurosRow rowcontratosegurosRow = ((contratosegurosRow)(this.NewRow()));
                rowcontratosegurosRow.ItemArray = new object[] {
                        IDCONTRATOSSEGUROS,
                        parentcontratocarroRowByFK_CONTRATOSEGUROS_1[0],
                        TIPOSEGURO,
                        VALOR};
                this.Rows.Add(rowcontratosegurosRow);
                return rowcontratosegurosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRow FindByIDCONTRATOSSEGUROS(int IDCONTRATOSSEGUROS) {
                return ((contratosegurosRow)(this.Rows.Find(new object[] {
                            IDCONTRATOSSEGUROS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contratosegurosDataTable cln = ((contratosegurosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contratosegurosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTRATOSSEGUROS = base.Columns["IDCONTRATOSSEGUROS"];
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = base.Columns["CONTRATOCARRO_IDCONTRATOCARRO"];
                this.columnTIPOSEGURO = base.Columns["TIPOSEGURO"];
                this.columnVALOR = base.Columns["VALOR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTRATOSSEGUROS = new System.Data.DataColumn("IDCONTRATOSSEGUROS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTRATOSSEGUROS);
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = new System.Data.DataColumn("CONTRATOCARRO_IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOCARRO_IDCONTRATOCARRO);
                this.columnTIPOSEGURO = new System.Data.DataColumn("TIPOSEGURO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPOSEGURO);
                this.columnVALOR = new System.Data.DataColumn("VALOR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTRATOSSEGUROS}, true));
                this.columnIDCONTRATOSSEGUROS.AllowDBNull = false;
                this.columnIDCONTRATOSSEGUROS.Unique = true;
                this.columnCONTRATOCARRO_IDCONTRATOCARRO.AllowDBNull = false;
                this.columnVALOR.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.contratoseguros", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`contratoseguros` (`CONTRATOCARRO_IDCONTRATOCARRO`, `TIPOSEG" +
                        "URO`, `VALOR`) VALUES (:CONTRATOCARRO_IDCONTRATOCARRO, :TIPOSEGURO, :VALOR)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPOSEGURO";
                param.Size = 0;
                param.SourceColumn = "TIPOSEGURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`contratoseguros` SET `CONTRATOCARRO_IDCONTRATOCARRO` = :CONTRATOCARRO_IDCONTRATOCARRO, `TIPOSEGURO` = :TIPOSEGURO, `VALOR` = :VALOR WHERE ((`IDCONTRATOSSEGUROS` = :Original_IDCONTRATOSSEGUROS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:IsNull_TIPOSEGURO = 1 AND `TIPOSEGURO` IS NULL) OR (`TIPOSEGURO` = :Original_TIPOSEGURO)) AND (`VALOR` = :Original_VALOR))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPOSEGURO";
                param.Size = 0;
                param.SourceColumn = "TIPOSEGURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOSSEGUROS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOSSEGUROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TIPOSEGURO";
                param.Size = 0;
                param.SourceColumn = "TIPOSEGURO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPOSEGURO";
                param.Size = 0;
                param.SourceColumn = "TIPOSEGURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`contratoseguros` WHERE ((`IDCONTRATOSSEGUROS` = :Original_IDCONTRATOSSEGUROS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:IsNull_TIPOSEGURO = 1 AND `TIPOSEGURO` IS NULL) OR (`TIPOSEGURO` = :Original_TIPOSEGURO)) AND (`VALOR` = :Original_VALOR))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOSSEGUROS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOSSEGUROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TIPOSEGURO";
                param.Size = 0;
                param.SourceColumn = "TIPOSEGURO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPOSEGURO";
                param.Size = 0;
                param.SourceColumn = "TIPOSEGURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "contratoseguros";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTRATOSSEGUROS", "IDCONTRATOSSEGUROS");
                this.TableMapping.ColumnMappings.Add("CONTRATOCARRO_IDCONTRATOCARRO", "CONTRATOCARRO_IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("TIPOSEGURO", "TIPOSEGURO");
                this.TableMapping.ColumnMappings.Add("VALOR", "VALOR");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRow NewcontratosegurosRow() {
                return ((contratosegurosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contratosegurosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contratosegurosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contratosegurosRowChanged != null)) {
                    this.contratosegurosRowChanged(this, new contratosegurosRowChangeEvent(((contratosegurosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contratosegurosRowChanging != null)) {
                    this.contratosegurosRowChanging(this, new contratosegurosRowChangeEvent(((contratosegurosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contratosegurosRowDeleted != null)) {
                    this.contratosegurosRowDeleted(this, new contratosegurosRowChangeEvent(((contratosegurosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contratosegurosRowDeleting != null)) {
                    this.contratosegurosRowDeleting(this, new contratosegurosRowChangeEvent(((contratosegurosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontratosegurosRow(contratosegurosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contratosegurosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class contratosegurosRow : System.Data.DataRow {
            
            private contratosegurosDataTable tablecontratoseguros;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratosegurosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontratoseguros = ((contratosegurosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTRATOSSEGUROS {
                get {
                    return ((int)(this[this.tablecontratoseguros.IDCONTRATOSSEGUROSColumn]));
                }
                set {
                    this[this.tablecontratoseguros.IDCONTRATOSSEGUROSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOCARRO_IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablecontratoseguros.CONTRATOCARRO_IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablecontratoseguros.CONTRATOCARRO_IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIPOSEGURO {
                get {
                    try {
                        return ((string)(this[this.tablecontratoseguros.TIPOSEGUROColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratoseguros.TIPOSEGUROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR {
                get {
                    return ((decimal)(this[this.tablecontratoseguros.VALORColumn]));
                }
                set {
                    this[this.tablecontratoseguros.VALORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOSEGUROS_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOSEGUROS_1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIPOSEGURONull() {
                return this.IsNull(this.tablecontratoseguros.TIPOSEGUROColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIPOSEGURONull() {
                this[this.tablecontratoseguros.TIPOSEGUROColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class contratosegurosRowChangeEvent : System.EventArgs {
            
            private contratosegurosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRowChangeEvent(contratosegurosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosegurosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contratosinistrosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTRATOSINISTROS;
            
            private System.Data.DataColumn columnCONTRATOCARRO_IDCONTRATOCARRO;
            
            private System.Data.DataColumn column_DESCRIÃ_ÃƒO;
            
            private System.Data.DataColumn columnVALOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "contratosinistros";
                this.Name = "contratosinistros";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratosinistrosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contratosinistrosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTRATOSINISTROSColumn {
                get {
                    return this.columnIDCONTRATOSINISTROS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOCARRO_IDCONTRATOCARROColumn {
                get {
                    return this.columnCONTRATOCARRO_IDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn _DESCRIÃ_ÃƒOColumn {
                get {
                    return this.column_DESCRIÃ_ÃƒO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALORColumn {
                get {
                    return this.columnVALOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRow this[int index] {
                get {
                    return ((contratosinistrosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event contratosinistrosRowChangeEventHandler contratosinistrosRowChanging;
            
            public event contratosinistrosRowChangeEventHandler contratosinistrosRowChanged;
            
            public event contratosinistrosRowChangeEventHandler contratosinistrosRowDeleting;
            
            public event contratosinistrosRowChangeEventHandler contratosinistrosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontratosinistrosRow(contratosinistrosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRow AddcontratosinistrosRow(int IDCONTRATOSINISTROS, contratocarroRow parentcontratocarroRowByFK_CONTRATOSINISTROS_2, string _DESCRIÃ_ÃƒO, decimal VALOR) {
                contratosinistrosRow rowcontratosinistrosRow = ((contratosinistrosRow)(this.NewRow()));
                rowcontratosinistrosRow.ItemArray = new object[] {
                        IDCONTRATOSINISTROS,
                        parentcontratocarroRowByFK_CONTRATOSINISTROS_2[0],
                        _DESCRIÃ_ÃƒO,
                        VALOR};
                this.Rows.Add(rowcontratosinistrosRow);
                return rowcontratosinistrosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRow FindByIDCONTRATOSINISTROS(int IDCONTRATOSINISTROS) {
                return ((contratosinistrosRow)(this.Rows.Find(new object[] {
                            IDCONTRATOSINISTROS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contratosinistrosDataTable cln = ((contratosinistrosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contratosinistrosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTRATOSINISTROS = base.Columns["IDCONTRATOSINISTROS"];
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = base.Columns["CONTRATOCARRO_IDCONTRATOCARRO"];
                this.column_DESCRIÃ_ÃƒO = base.Columns["DESCRIÃ‡ÃƒO"];
                this.columnVALOR = base.Columns["VALOR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTRATOSINISTROS = new System.Data.DataColumn("IDCONTRATOSINISTROS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTRATOSINISTROS);
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = new System.Data.DataColumn("CONTRATOCARRO_IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOCARRO_IDCONTRATOCARRO);
                this.column_DESCRIÃ_ÃƒO = new System.Data.DataColumn("DESCRIÃ‡ÃƒO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column_DESCRIÃ_ÃƒO);
                this.columnVALOR = new System.Data.DataColumn("VALOR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTRATOSINISTROS}, true));
                this.columnIDCONTRATOSINISTROS.AllowDBNull = false;
                this.columnIDCONTRATOSINISTROS.Unique = true;
                this.columnCONTRATOCARRO_IDCONTRATOCARRO.AllowDBNull = false;
                this.columnVALOR.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.contratosinistros", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`contratosinistros` (`CONTRATOCARRO_IDCONTRATOCARRO`, `DESCR" +
                        "IÃ‡ÃƒO`, `VALOR`) VALUES (:CONTRATOCARRO_IDCONTRATOCARRO, :p1, :VALOR)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "p1";
                param.Size = 0;
                param.SourceColumn = "DESCRIÃ‡ÃƒO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`contratosinistros` SET `CONTRATOCARRO_IDCONTRATOCARRO` = :CONTRATOCARRO_IDCONTRATOCARRO, `DESCRIÃ‡ÃƒO` = :p1, `VALOR` = :VALOR WHERE ((`IDCONTRATOSINISTROS` = :Original_IDCONTRATOSINISTROS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:p3 = 1 AND `DESCRIÃ‡ÃƒO` IS NULL) OR (`DESCRIÃ‡ÃƒO` = :p2)) AND (`VALOR` = :Original_VALOR))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "p1";
                param.Size = 0;
                param.SourceColumn = "DESCRIÃ‡ÃƒO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOSINISTROS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOSINISTROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "p3";
                param.Size = 0;
                param.SourceColumn = "DESCRIÃ‡ÃƒO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "p2";
                param.Size = 0;
                param.SourceColumn = "DESCRIÃ‡ÃƒO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`contratosinistros` WHERE ((`IDCONTRATOSINISTROS` = :Original_IDCONTRATOSINISTROS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:p3 = 1 AND `DESCRIÃ‡ÃƒO` IS NULL) OR (`DESCRIÃ‡ÃƒO` = :p2)) AND (`VALOR` = :Original_VALOR))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOSINISTROS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOSINISTROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "p3";
                param.Size = 0;
                param.SourceColumn = "DESCRIÃ‡ÃƒO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "p2";
                param.Size = 0;
                param.SourceColumn = "DESCRIÃ‡ÃƒO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "contratosinistros";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTRATOSINISTROS", "IDCONTRATOSINISTROS");
                this.TableMapping.ColumnMappings.Add("CONTRATOCARRO_IDCONTRATOCARRO", "CONTRATOCARRO_IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("DESCRIÃ‡ÃƒO", "DESCRIÃ‡ÃƒO");
                this.TableMapping.ColumnMappings.Add("VALOR", "VALOR");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRow NewcontratosinistrosRow() {
                return ((contratosinistrosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contratosinistrosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contratosinistrosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contratosinistrosRowChanged != null)) {
                    this.contratosinistrosRowChanged(this, new contratosinistrosRowChangeEvent(((contratosinistrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contratosinistrosRowChanging != null)) {
                    this.contratosinistrosRowChanging(this, new contratosinistrosRowChangeEvent(((contratosinistrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contratosinistrosRowDeleted != null)) {
                    this.contratosinistrosRowDeleted(this, new contratosinistrosRowChangeEvent(((contratosinistrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contratosinistrosRowDeleting != null)) {
                    this.contratosinistrosRowDeleting(this, new contratosinistrosRowChangeEvent(((contratosinistrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontratosinistrosRow(contratosinistrosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contratosinistrosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class contratosinistrosRow : System.Data.DataRow {
            
            private contratosinistrosDataTable tablecontratosinistros;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratosinistrosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontratosinistros = ((contratosinistrosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTRATOSINISTROS {
                get {
                    return ((int)(this[this.tablecontratosinistros.IDCONTRATOSINISTROSColumn]));
                }
                set {
                    this[this.tablecontratosinistros.IDCONTRATOSINISTROSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOCARRO_IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablecontratosinistros.CONTRATOCARRO_IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablecontratosinistros.CONTRATOCARRO_IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _DESCRIÃ_ÃƒO {
                get {
                    try {
                        return ((string)(this[this.tablecontratosinistros._DESCRIÃ_ÃƒOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratosinistros._DESCRIÃ_ÃƒOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR {
                get {
                    return ((decimal)(this[this.tablecontratosinistros.VALORColumn]));
                }
                set {
                    this[this.tablecontratosinistros.VALORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOSINISTROS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOSINISTROS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_DESCRIÃ_ÃƒONull() {
                return this.IsNull(this.tablecontratosinistros._DESCRIÃ_ÃƒOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_DESCRIÃ_ÃƒONull() {
                this[this.tablecontratosinistros._DESCRIÃ_ÃƒOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class contratosinistrosRowChangeEvent : System.EventArgs {
            
            private contratosinistrosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRowChangeEvent(contratosinistrosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosinistrosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contratoviagensDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTRATOVIAGENS;
            
            private System.Data.DataColumn columnCONTRATO_IDCONTRATO;
            
            private System.Data.DataColumn columnROTA;
            
            private System.Data.DataColumn columnOCUPANTES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "contratoviagens";
                this.Name = "contratoviagens";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratoviagensDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contratoviagensDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTRATOVIAGENSColumn {
                get {
                    return this.columnIDCONTRATOVIAGENS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATO_IDCONTRATOColumn {
                get {
                    return this.columnCONTRATO_IDCONTRATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ROTAColumn {
                get {
                    return this.columnROTA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn OCUPANTESColumn {
                get {
                    return this.columnOCUPANTES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRow this[int index] {
                get {
                    return ((contratoviagensRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event contratoviagensRowChangeEventHandler contratoviagensRowChanging;
            
            public event contratoviagensRowChangeEventHandler contratoviagensRowChanged;
            
            public event contratoviagensRowChangeEventHandler contratoviagensRowDeleting;
            
            public event contratoviagensRowChangeEventHandler contratoviagensRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontratoviagensRow(contratoviagensRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRow AddcontratoviagensRow(int IDCONTRATOVIAGENS, contratocarroRow parentcontratocarroRowByFK_CONTRATOVIAGENS_2, string ROTA, int OCUPANTES) {
                contratoviagensRow rowcontratoviagensRow = ((contratoviagensRow)(this.NewRow()));
                rowcontratoviagensRow.ItemArray = new object[] {
                        IDCONTRATOVIAGENS,
                        parentcontratocarroRowByFK_CONTRATOVIAGENS_2[0],
                        ROTA,
                        OCUPANTES};
                this.Rows.Add(rowcontratoviagensRow);
                return rowcontratoviagensRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRow FindByIDCONTRATOVIAGENS(int IDCONTRATOVIAGENS) {
                return ((contratoviagensRow)(this.Rows.Find(new object[] {
                            IDCONTRATOVIAGENS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contratoviagensDataTable cln = ((contratoviagensDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contratoviagensDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTRATOVIAGENS = base.Columns["IDCONTRATOVIAGENS"];
                this.columnCONTRATO_IDCONTRATO = base.Columns["CONTRATO_IDCONTRATO"];
                this.columnROTA = base.Columns["ROTA"];
                this.columnOCUPANTES = base.Columns["OCUPANTES"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTRATOVIAGENS = new System.Data.DataColumn("IDCONTRATOVIAGENS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTRATOVIAGENS);
                this.columnCONTRATO_IDCONTRATO = new System.Data.DataColumn("CONTRATO_IDCONTRATO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATO_IDCONTRATO);
                this.columnROTA = new System.Data.DataColumn("ROTA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnROTA);
                this.columnOCUPANTES = new System.Data.DataColumn("OCUPANTES", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOCUPANTES);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTRATOVIAGENS}, true));
                this.columnIDCONTRATOVIAGENS.AllowDBNull = false;
                this.columnIDCONTRATOVIAGENS.Unique = true;
                this.columnCONTRATO_IDCONTRATO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.contratoviagens", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`contratoviagens` (`CONTRATO_IDCONTRATO`, `ROTA`, `OCUPANTES" +
                        "`) VALUES (:CONTRATO_IDCONTRATO, :ROTA, :OCUPANTES)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATO_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATO_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ROTA";
                param.Size = 0;
                param.SourceColumn = "ROTA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OCUPANTES";
                param.Size = 0;
                param.SourceColumn = "OCUPANTES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`contratoviagens` SET `CONTRATO_IDCONTRATO` = :CONTRATO_IDCONTRATO, `ROTA` = :ROTA, `OCUPANTES` = :OCUPANTES WHERE ((`IDCONTRATOVIAGENS` = :Original_IDCONTRATOVIAGENS) AND (`CONTRATO_IDCONTRATO` = :Original_CONTRATO_IDCONTRATO) AND ((:IsNull_ROTA = 1 AND `ROTA` IS NULL) OR (`ROTA` = :Original_ROTA)) AND ((:IsNull_OCUPANTES = 1 AND `OCUPANTES` IS NULL) OR (`OCUPANTES` = :Original_OCUPANTES)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATO_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATO_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ROTA";
                param.Size = 0;
                param.SourceColumn = "ROTA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OCUPANTES";
                param.Size = 0;
                param.SourceColumn = "OCUPANTES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOVIAGENS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOVIAGENS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATO_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATO_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ROTA";
                param.Size = 0;
                param.SourceColumn = "ROTA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ROTA";
                param.Size = 0;
                param.SourceColumn = "ROTA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_OCUPANTES";
                param.Size = 0;
                param.SourceColumn = "OCUPANTES";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_OCUPANTES";
                param.Size = 0;
                param.SourceColumn = "OCUPANTES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`contratoviagens` WHERE ((`IDCONTRATOVIAGENS` = :Original_IDCONTRATOVIAGENS) AND (`CONTRATO_IDCONTRATO` = :Original_CONTRATO_IDCONTRATO) AND ((:IsNull_ROTA = 1 AND `ROTA` IS NULL) OR (`ROTA` = :Original_ROTA)) AND ((:IsNull_OCUPANTES = 1 AND `OCUPANTES` IS NULL) OR (`OCUPANTES` = :Original_OCUPANTES)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTRATOVIAGENS";
                param.Size = 0;
                param.SourceColumn = "IDCONTRATOVIAGENS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATO_IDCONTRATO";
                param.Size = 0;
                param.SourceColumn = "CONTRATO_IDCONTRATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ROTA";
                param.Size = 0;
                param.SourceColumn = "ROTA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ROTA";
                param.Size = 0;
                param.SourceColumn = "ROTA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_OCUPANTES";
                param.Size = 0;
                param.SourceColumn = "OCUPANTES";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_OCUPANTES";
                param.Size = 0;
                param.SourceColumn = "OCUPANTES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "contratoviagens";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTRATOVIAGENS", "IDCONTRATOVIAGENS");
                this.TableMapping.ColumnMappings.Add("CONTRATO_IDCONTRATO", "CONTRATO_IDCONTRATO");
                this.TableMapping.ColumnMappings.Add("ROTA", "ROTA");
                this.TableMapping.ColumnMappings.Add("OCUPANTES", "OCUPANTES");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRow NewcontratoviagensRow() {
                return ((contratoviagensRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contratoviagensRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contratoviagensRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contratoviagensRowChanged != null)) {
                    this.contratoviagensRowChanged(this, new contratoviagensRowChangeEvent(((contratoviagensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contratoviagensRowChanging != null)) {
                    this.contratoviagensRowChanging(this, new contratoviagensRowChangeEvent(((contratoviagensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contratoviagensRowDeleted != null)) {
                    this.contratoviagensRowDeleted(this, new contratoviagensRowChangeEvent(((contratoviagensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contratoviagensRowDeleting != null)) {
                    this.contratoviagensRowDeleting(this, new contratoviagensRowChangeEvent(((contratoviagensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontratoviagensRow(contratoviagensRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contratoviagensDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class contratoviagensRow : System.Data.DataRow {
            
            private contratoviagensDataTable tablecontratoviagens;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contratoviagensRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontratoviagens = ((contratoviagensDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTRATOVIAGENS {
                get {
                    return ((int)(this[this.tablecontratoviagens.IDCONTRATOVIAGENSColumn]));
                }
                set {
                    this[this.tablecontratoviagens.IDCONTRATOVIAGENSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATO_IDCONTRATO {
                get {
                    return ((int)(this[this.tablecontratoviagens.CONTRATO_IDCONTRATOColumn]));
                }
                set {
                    this[this.tablecontratoviagens.CONTRATO_IDCONTRATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROTA {
                get {
                    try {
                        return ((string)(this[this.tablecontratoviagens.ROTAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratoviagens.ROTAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OCUPANTES {
                get {
                    try {
                        return ((int)(this[this.tablecontratoviagens.OCUPANTESColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontratoviagens.OCUPANTESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_CONTRATOVIAGENS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CONTRATOVIAGENS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROTANull() {
                return this.IsNull(this.tablecontratoviagens.ROTAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROTANull() {
                this[this.tablecontratoviagens.ROTAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOCUPANTESNull() {
                return this.IsNull(this.tablecontratoviagens.OCUPANTESColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOCUPANTESNull() {
                this[this.tablecontratoviagens.OCUPANTESColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class contratoviagensRowChangeEvent : System.EventArgs {
            
            private contratoviagensRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRowChangeEvent(contratoviagensRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratoviagensRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class corDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCOR;
            
            private System.Data.DataColumn columnCOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "cor";
                this.Name = "cor";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal corDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected corDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCORColumn {
                get {
                    return this.columnIDCOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CORColumn {
                get {
                    return this.columnCOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRow this[int index] {
                get {
                    return ((corRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event corRowChangeEventHandler corRowChanging;
            
            public event corRowChangeEventHandler corRowChanged;
            
            public event corRowChangeEventHandler corRowDeleting;
            
            public event corRowChangeEventHandler corRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcorRow(corRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRow AddcorRow(int IDCOR, string COR) {
                corRow rowcorRow = ((corRow)(this.NewRow()));
                rowcorRow.ItemArray = new object[] {
                        IDCOR,
                        COR};
                this.Rows.Add(rowcorRow);
                return rowcorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRow FindByIDCOR(int IDCOR) {
                return ((corRow)(this.Rows.Find(new object[] {
                            IDCOR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                corDataTable cln = ((corDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new corDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCOR = base.Columns["IDCOR"];
                this.columnCOR = base.Columns["COR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCOR = new System.Data.DataColumn("IDCOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCOR);
                this.columnCOR = new System.Data.DataColumn("COR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCOR}, true));
                this.columnIDCOR.AllowDBNull = false;
                this.columnIDCOR.Unique = true;
                this.columnCOR.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.cor", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`cor` (`COR`) VALUES (:COR)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COR";
                param.Size = 0;
                param.SourceColumn = "COR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `fatcar`.`cor` SET `COR` = :COR WHERE ((`IDCOR` = :Original_IDCOR) AND (`C" +
                        "OR` = :Original_COR))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COR";
                param.Size = 0;
                param.SourceColumn = "COR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCOR";
                param.Size = 0;
                param.SourceColumn = "IDCOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COR";
                param.Size = 0;
                param.SourceColumn = "COR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`cor` WHERE ((`IDCOR` = :Original_IDCOR) AND (`COR` = :Origi" +
                        "nal_COR))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCOR";
                param.Size = 0;
                param.SourceColumn = "IDCOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COR";
                param.Size = 0;
                param.SourceColumn = "COR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "cor";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCOR", "IDCOR");
                this.TableMapping.ColumnMappings.Add("COR", "COR");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRow NewcorRow() {
                return ((corRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new corRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(corRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.corRowChanged != null)) {
                    this.corRowChanged(this, new corRowChangeEvent(((corRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.corRowChanging != null)) {
                    this.corRowChanging(this, new corRowChangeEvent(((corRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.corRowDeleted != null)) {
                    this.corRowDeleted(this, new corRowChangeEvent(((corRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.corRowDeleting != null)) {
                    this.corRowDeleting(this, new corRowChangeEvent(((corRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecorRow(corRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "corDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class corRow : System.Data.DataRow {
            
            private corDataTable tablecor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal corRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecor = ((corDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCOR {
                get {
                    return ((int)(this[this.tablecor.IDCORColumn]));
                }
                set {
                    this[this.tablecor.IDCORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COR {
                get {
                    return ((string)(this[this.tablecor.CORColumn]));
                }
                set {
                    this[this.tablecor.CORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow[] GetcarrosRows() {
                return ((carrosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CARROS_4"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class corRowChangeEvent : System.EventArgs {
            
            private corRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRowChangeEvent(corRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public corRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class enderecoDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDENDERECO;
            
            private System.Data.DataColumn columnTIPO;
            
            private System.Data.DataColumn columnCEP;
            
            private System.Data.DataColumn columnLOGRADOURO;
            
            private System.Data.DataColumn columnNUM;
            
            private System.Data.DataColumn columnCOMPLEMENTO;
            
            private System.Data.DataColumn columnBAIRRO;
            
            private System.Data.DataColumn columnCIDADE;
            
            private System.Data.DataColumn columnUF;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "endereco";
                this.Name = "endereco";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal enderecoDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected enderecoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDENDERECOColumn {
                get {
                    return this.columnIDENDERECO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TIPOColumn {
                get {
                    return this.columnTIPO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CEPColumn {
                get {
                    return this.columnCEP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn LOGRADOUROColumn {
                get {
                    return this.columnLOGRADOURO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NUMColumn {
                get {
                    return this.columnNUM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn COMPLEMENTOColumn {
                get {
                    return this.columnCOMPLEMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn BAIRROColumn {
                get {
                    return this.columnBAIRRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CIDADEColumn {
                get {
                    return this.columnCIDADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn UFColumn {
                get {
                    return this.columnUF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow this[int index] {
                get {
                    return ((enderecoRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event enderecoRowChangeEventHandler enderecoRowChanging;
            
            public event enderecoRowChangeEventHandler enderecoRowChanged;
            
            public event enderecoRowChangeEventHandler enderecoRowDeleting;
            
            public event enderecoRowChangeEventHandler enderecoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddenderecoRow(enderecoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow AddenderecoRow(int IDENDERECO, string TIPO, string CEP, string LOGRADOURO, int NUM, string COMPLEMENTO, string BAIRRO, string CIDADE, string UF) {
                enderecoRow rowenderecoRow = ((enderecoRow)(this.NewRow()));
                rowenderecoRow.ItemArray = new object[] {
                        IDENDERECO,
                        TIPO,
                        CEP,
                        LOGRADOURO,
                        NUM,
                        COMPLEMENTO,
                        BAIRRO,
                        CIDADE,
                        UF};
                this.Rows.Add(rowenderecoRow);
                return rowenderecoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow FindByIDENDERECO(int IDENDERECO) {
                return ((enderecoRow)(this.Rows.Find(new object[] {
                            IDENDERECO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                enderecoDataTable cln = ((enderecoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new enderecoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDENDERECO = base.Columns["IDENDERECO"];
                this.columnTIPO = base.Columns["TIPO"];
                this.columnCEP = base.Columns["CEP"];
                this.columnLOGRADOURO = base.Columns["LOGRADOURO"];
                this.columnNUM = base.Columns["NUM"];
                this.columnCOMPLEMENTO = base.Columns["COMPLEMENTO"];
                this.columnBAIRRO = base.Columns["BAIRRO"];
                this.columnCIDADE = base.Columns["CIDADE"];
                this.columnUF = base.Columns["UF"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDENDERECO = new System.Data.DataColumn("IDENDERECO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDENDERECO);
                this.columnTIPO = new System.Data.DataColumn("TIPO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPO);
                this.columnCEP = new System.Data.DataColumn("CEP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCEP);
                this.columnLOGRADOURO = new System.Data.DataColumn("LOGRADOURO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGRADOURO);
                this.columnNUM = new System.Data.DataColumn("NUM", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUM);
                this.columnCOMPLEMENTO = new System.Data.DataColumn("COMPLEMENTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPLEMENTO);
                this.columnBAIRRO = new System.Data.DataColumn("BAIRRO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAIRRO);
                this.columnCIDADE = new System.Data.DataColumn("CIDADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIDADE);
                this.columnUF = new System.Data.DataColumn("UF", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUF);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDENDERECO}, true));
                this.columnIDENDERECO.AllowDBNull = false;
                this.columnIDENDERECO.Unique = true;
                this.columnTIPO.AllowDBNull = false;
                this.columnCEP.AllowDBNull = false;
                this.columnLOGRADOURO.AllowDBNull = false;
                this.columnUF.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.endereco", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`endereco` (`TIPO`, `CEP`, `LOGRADOURO`, `NUM`, `COMPLEMENTO" +
                        "`, `BAIRRO`, `CIDADE`, `UF`) VALUES (:TIPO, :CEP, :LOGRADOURO, :NUM, :COMPLEMENT" +
                        "O, :BAIRRO, :CIDADE, :UF)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`endereco` SET `TIPO` = :TIPO, `CEP` = :CEP, `LOGRADOURO` = :LOGRADOURO, `NUM` = :NUM, `COMPLEMENTO` = :COMPLEMENTO, `BAIRRO` = :BAIRRO, `CIDADE` = :CIDADE, `UF` = :UF WHERE ((`IDENDERECO` = :Original_IDENDERECO) AND (`TIPO` = :Original_TIPO) AND (`CEP` = :Original_CEP) AND (`LOGRADOURO` = :Original_LOGRADOURO) AND ((:IsNull_NUM = 1 AND `NUM` IS NULL) OR (`NUM` = :Original_NUM)) AND ((:IsNull_COMPLEMENTO = 1 AND `COMPLEMENTO` IS NULL) OR (`COMPLEMENTO` = :Original_COMPLEMENTO)) AND ((:IsNull_BAIRRO = 1 AND `BAIRRO` IS NULL) OR (`BAIRRO` = :Original_BAIRRO)) AND ((:IsNull_CIDADE = 1 AND `CIDADE` IS NULL) OR (`CIDADE` = :Original_CIDADE)) AND (`UF` = :Original_UF))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`endereco` WHERE ((`IDENDERECO` = :Original_IDENDERECO) AND (`TIPO` = :Original_TIPO) AND (`CEP` = :Original_CEP) AND (`LOGRADOURO` = :Original_LOGRADOURO) AND ((:IsNull_NUM = 1 AND `NUM` IS NULL) OR (`NUM` = :Original_NUM)) AND ((:IsNull_COMPLEMENTO = 1 AND `COMPLEMENTO` IS NULL) OR (`COMPLEMENTO` = :Original_COMPLEMENTO)) AND ((:IsNull_BAIRRO = 1 AND `BAIRRO` IS NULL) OR (`BAIRRO` = :Original_BAIRRO)) AND ((:IsNull_CIDADE = 1 AND `CIDADE` IS NULL) OR (`CIDADE` = :Original_CIDADE)) AND (`UF` = :Original_UF))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "endereco";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDENDERECO", "IDENDERECO");
                this.TableMapping.ColumnMappings.Add("TIPO", "TIPO");
                this.TableMapping.ColumnMappings.Add("CEP", "CEP");
                this.TableMapping.ColumnMappings.Add("LOGRADOURO", "LOGRADOURO");
                this.TableMapping.ColumnMappings.Add("NUM", "NUM");
                this.TableMapping.ColumnMappings.Add("COMPLEMENTO", "COMPLEMENTO");
                this.TableMapping.ColumnMappings.Add("BAIRRO", "BAIRRO");
                this.TableMapping.ColumnMappings.Add("CIDADE", "CIDADE");
                this.TableMapping.ColumnMappings.Add("UF", "UF");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow NewenderecoRow() {
                return ((enderecoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new enderecoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(enderecoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.enderecoRowChanged != null)) {
                    this.enderecoRowChanged(this, new enderecoRowChangeEvent(((enderecoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.enderecoRowChanging != null)) {
                    this.enderecoRowChanging(this, new enderecoRowChangeEvent(((enderecoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.enderecoRowDeleted != null)) {
                    this.enderecoRowDeleted(this, new enderecoRowChangeEvent(((enderecoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.enderecoRowDeleting != null)) {
                    this.enderecoRowDeleting(this, new enderecoRowChangeEvent(((enderecoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveenderecoRow(enderecoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "enderecoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class enderecoRow : System.Data.DataRow {
            
            private enderecoDataTable tableendereco;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal enderecoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableendereco = ((enderecoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDENDERECO {
                get {
                    return ((int)(this[this.tableendereco.IDENDERECOColumn]));
                }
                set {
                    this[this.tableendereco.IDENDERECOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIPO {
                get {
                    return ((string)(this[this.tableendereco.TIPOColumn]));
                }
                set {
                    this[this.tableendereco.TIPOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CEP {
                get {
                    return ((string)(this[this.tableendereco.CEPColumn]));
                }
                set {
                    this[this.tableendereco.CEPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGRADOURO {
                get {
                    return ((string)(this[this.tableendereco.LOGRADOUROColumn]));
                }
                set {
                    this[this.tableendereco.LOGRADOUROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NUM {
                get {
                    try {
                        return ((int)(this[this.tableendereco.NUMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableendereco.NUMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPLEMENTO {
                get {
                    try {
                        return ((string)(this[this.tableendereco.COMPLEMENTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableendereco.COMPLEMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAIRRO {
                get {
                    try {
                        return ((string)(this[this.tableendereco.BAIRROColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableendereco.BAIRROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIDADE {
                get {
                    try {
                        return ((string)(this[this.tableendereco.CIDADEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableendereco.CIDADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UF {
                get {
                    return ((string)(this[this.tableendereco.UFColumn]));
                }
                set {
                    this[this.tableendereco.UFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMNull() {
                return this.IsNull(this.tableendereco.NUMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMNull() {
                this[this.tableendereco.NUMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPLEMENTONull() {
                return this.IsNull(this.tableendereco.COMPLEMENTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPLEMENTONull() {
                this[this.tableendereco.COMPLEMENTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBAIRRONull() {
                return this.IsNull(this.tableendereco.BAIRROColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBAIRRONull() {
                this[this.tableendereco.BAIRROColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDADENull() {
                return this.IsNull(this.tableendereco.CIDADEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDADENull() {
                this[this.tableendereco.CIDADEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow[] GetmotoristasRows() {
                return ((motoristasRow[])(this.GetChildRows(this.Table.ChildRelations["FK_MOTORISTAS_3"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow[] GetclienteRows() {
                return ((clienteRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CLIENTE_3"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class enderecoRowChangeEvent : System.EventArgs {
            
            private enderecoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRowChangeEvent(enderecoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class entradasaidaDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDENTRADASAIDA;
            
            private System.Data.DataColumn columnCARROS_IDCARRO;
            
            private System.Data.DataColumn columnHORAENTRADA;
            
            private System.Data.DataColumn columnHORASAIDA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "entradasaida";
                this.Name = "entradasaida";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entradasaidaDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected entradasaidaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDENTRADASAIDAColumn {
                get {
                    return this.columnIDENTRADASAIDA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CARROS_IDCARROColumn {
                get {
                    return this.columnCARROS_IDCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn HORAENTRADAColumn {
                get {
                    return this.columnHORAENTRADA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn HORASAIDAColumn {
                get {
                    return this.columnHORASAIDA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRow this[int index] {
                get {
                    return ((entradasaidaRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event entradasaidaRowChangeEventHandler entradasaidaRowChanging;
            
            public event entradasaidaRowChangeEventHandler entradasaidaRowChanged;
            
            public event entradasaidaRowChangeEventHandler entradasaidaRowDeleting;
            
            public event entradasaidaRowChangeEventHandler entradasaidaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddentradasaidaRow(entradasaidaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRow AddentradasaidaRow(int IDENTRADASAIDA, carrosRow parentcarrosRowByFK_ENTRADASAIDA_1, System.TimeSpan HORAENTRADA, System.TimeSpan HORASAIDA) {
                entradasaidaRow rowentradasaidaRow = ((entradasaidaRow)(this.NewRow()));
                rowentradasaidaRow.ItemArray = new object[] {
                        IDENTRADASAIDA,
                        parentcarrosRowByFK_ENTRADASAIDA_1[0],
                        HORAENTRADA,
                        HORASAIDA};
                this.Rows.Add(rowentradasaidaRow);
                return rowentradasaidaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRow FindByIDENTRADASAIDA(int IDENTRADASAIDA) {
                return ((entradasaidaRow)(this.Rows.Find(new object[] {
                            IDENTRADASAIDA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                entradasaidaDataTable cln = ((entradasaidaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new entradasaidaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDENTRADASAIDA = base.Columns["IDENTRADASAIDA"];
                this.columnCARROS_IDCARRO = base.Columns["CARROS_IDCARRO"];
                this.columnHORAENTRADA = base.Columns["HORAENTRADA"];
                this.columnHORASAIDA = base.Columns["HORASAIDA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDENTRADASAIDA = new System.Data.DataColumn("IDENTRADASAIDA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDENTRADASAIDA);
                this.columnCARROS_IDCARRO = new System.Data.DataColumn("CARROS_IDCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARROS_IDCARRO);
                this.columnHORAENTRADA = new System.Data.DataColumn("HORAENTRADA", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHORAENTRADA);
                this.columnHORASAIDA = new System.Data.DataColumn("HORASAIDA", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHORASAIDA);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDENTRADASAIDA}, true));
                this.columnIDENTRADASAIDA.AllowDBNull = false;
                this.columnIDENTRADASAIDA.Unique = true;
                this.columnCARROS_IDCARRO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.entradasaida", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`entradasaida` (`CARROS_IDCARRO`, `HORAENTRADA`, `HORASAIDA`" +
                        ") VALUES (:CARROS_IDCARRO, :HORAENTRADA, :HORASAIDA)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARROS_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HORAENTRADA";
                param.Size = 0;
                param.SourceColumn = "HORAENTRADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HORASAIDA";
                param.Size = 0;
                param.SourceColumn = "HORASAIDA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`entradasaida` SET `CARROS_IDCARRO` = :CARROS_IDCARRO, `HORAENTRADA` = :HORAENTRADA, `HORASAIDA` = :HORASAIDA WHERE ((`IDENTRADASAIDA` = :Original_IDENTRADASAIDA) AND (`CARROS_IDCARRO` = :Original_CARROS_IDCARRO) AND ((:IsNull_HORAENTRADA = 1 AND `HORAENTRADA` IS NULL) OR (`HORAENTRADA` = :Original_HORAENTRADA)) AND ((:IsNull_HORASAIDA = 1 AND `HORASAIDA` IS NULL) OR (`HORASAIDA` = :Original_HORASAIDA)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARROS_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HORAENTRADA";
                param.Size = 0;
                param.SourceColumn = "HORAENTRADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HORASAIDA";
                param.Size = 0;
                param.SourceColumn = "HORASAIDA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDENTRADASAIDA";
                param.Size = 0;
                param.SourceColumn = "IDENTRADASAIDA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARROS_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HORAENTRADA";
                param.Size = 0;
                param.SourceColumn = "HORAENTRADA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HORAENTRADA";
                param.Size = 0;
                param.SourceColumn = "HORAENTRADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HORASAIDA";
                param.Size = 0;
                param.SourceColumn = "HORASAIDA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HORASAIDA";
                param.Size = 0;
                param.SourceColumn = "HORASAIDA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`entradasaida` WHERE ((`IDENTRADASAIDA` = :Original_IDENTRADASAIDA) AND (`CARROS_IDCARRO` = :Original_CARROS_IDCARRO) AND ((:IsNull_HORAENTRADA = 1 AND `HORAENTRADA` IS NULL) OR (`HORAENTRADA` = :Original_HORAENTRADA)) AND ((:IsNull_HORASAIDA = 1 AND `HORASAIDA` IS NULL) OR (`HORASAIDA` = :Original_HORASAIDA)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDENTRADASAIDA";
                param.Size = 0;
                param.SourceColumn = "IDENTRADASAIDA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARROS_IDCARRO";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HORAENTRADA";
                param.Size = 0;
                param.SourceColumn = "HORAENTRADA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HORAENTRADA";
                param.Size = 0;
                param.SourceColumn = "HORAENTRADA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HORASAIDA";
                param.Size = 0;
                param.SourceColumn = "HORASAIDA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Time;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HORASAIDA";
                param.Size = 0;
                param.SourceColumn = "HORASAIDA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "entradasaida";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDENTRADASAIDA", "IDENTRADASAIDA");
                this.TableMapping.ColumnMappings.Add("CARROS_IDCARRO", "CARROS_IDCARRO");
                this.TableMapping.ColumnMappings.Add("HORAENTRADA", "HORAENTRADA");
                this.TableMapping.ColumnMappings.Add("HORASAIDA", "HORASAIDA");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRow NewentradasaidaRow() {
                return ((entradasaidaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new entradasaidaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(entradasaidaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entradasaidaRowChanged != null)) {
                    this.entradasaidaRowChanged(this, new entradasaidaRowChangeEvent(((entradasaidaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entradasaidaRowChanging != null)) {
                    this.entradasaidaRowChanging(this, new entradasaidaRowChangeEvent(((entradasaidaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entradasaidaRowDeleted != null)) {
                    this.entradasaidaRowDeleted(this, new entradasaidaRowChangeEvent(((entradasaidaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entradasaidaRowDeleting != null)) {
                    this.entradasaidaRowDeleting(this, new entradasaidaRowChangeEvent(((entradasaidaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveentradasaidaRow(entradasaidaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "entradasaidaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class entradasaidaRow : System.Data.DataRow {
            
            private entradasaidaDataTable tableentradasaida;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entradasaidaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableentradasaida = ((entradasaidaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDENTRADASAIDA {
                get {
                    return ((int)(this[this.tableentradasaida.IDENTRADASAIDAColumn]));
                }
                set {
                    this[this.tableentradasaida.IDENTRADASAIDAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CARROS_IDCARRO {
                get {
                    return ((int)(this[this.tableentradasaida.CARROS_IDCARROColumn]));
                }
                set {
                    this[this.tableentradasaida.CARROS_IDCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan HORAENTRADA {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableentradasaida.HORAENTRADAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentradasaida.HORAENTRADAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan HORASAIDA {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableentradasaida.HORASAIDAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentradasaida.HORASAIDAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow carrosRow {
                get {
                    return ((carrosRow)(this.GetParentRow(this.Table.ParentRelations["FK_ENTRADASAIDA_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ENTRADASAIDA_1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHORAENTRADANull() {
                return this.IsNull(this.tableentradasaida.HORAENTRADAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHORAENTRADANull() {
                this[this.tableentradasaida.HORAENTRADAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHORASAIDANull() {
                return this.IsNull(this.tableentradasaida.HORASAIDAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHORASAIDANull() {
                this[this.tableentradasaida.HORASAIDAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class entradasaidaRowChangeEvent : System.EventArgs {
            
            private entradasaidaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRowChangeEvent(entradasaidaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entradasaidaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class funcionariosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDFUNCIONARIO;
            
            private System.Data.DataColumn columnCARGOS_IDCARGO;
            
            private System.Data.DataColumn columnUSUARIOS_IDUSUARIO;
            
            private System.Data.DataColumn columnMATRICULA;
            
            private System.Data.DataColumn columnNOME;
            
            private System.Data.DataColumn columnSALARIO;
            
            private System.Data.DataColumn columnCEP;
            
            private System.Data.DataColumn columnLOGRADOURO;
            
            private System.Data.DataColumn columnNUM;
            
            private System.Data.DataColumn columnCOMPLEMENTO;
            
            private System.Data.DataColumn columnBAIRRO;
            
            private System.Data.DataColumn columnCIDADE;
            
            private System.Data.DataColumn columnUF;
            
            private System.Data.DataColumn columnTELCEL;
            
            private System.Data.DataColumn columnTELRES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "funcionarios";
                this.Name = "funcionarios";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal funcionariosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected funcionariosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDFUNCIONARIOColumn {
                get {
                    return this.columnIDFUNCIONARIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CARGOS_IDCARGOColumn {
                get {
                    return this.columnCARGOS_IDCARGO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn USUARIOS_IDUSUARIOColumn {
                get {
                    return this.columnUSUARIOS_IDUSUARIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MATRICULAColumn {
                get {
                    return this.columnMATRICULA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NOMEColumn {
                get {
                    return this.columnNOME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SALARIOColumn {
                get {
                    return this.columnSALARIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CEPColumn {
                get {
                    return this.columnCEP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn LOGRADOUROColumn {
                get {
                    return this.columnLOGRADOURO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NUMColumn {
                get {
                    return this.columnNUM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn COMPLEMENTOColumn {
                get {
                    return this.columnCOMPLEMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn BAIRROColumn {
                get {
                    return this.columnBAIRRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CIDADEColumn {
                get {
                    return this.columnCIDADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn UFColumn {
                get {
                    return this.columnUF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TELCELColumn {
                get {
                    return this.columnTELCEL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TELRESColumn {
                get {
                    return this.columnTELRES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow this[int index] {
                get {
                    return ((funcionariosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event funcionariosRowChangeEventHandler funcionariosRowChanging;
            
            public event funcionariosRowChangeEventHandler funcionariosRowChanged;
            
            public event funcionariosRowChangeEventHandler funcionariosRowDeleting;
            
            public event funcionariosRowChangeEventHandler funcionariosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfuncionariosRow(funcionariosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow AddfuncionariosRow(int IDFUNCIONARIO, cargosRow parentcargosRowByFK_FUNCIONARIOS_3, usuariosRow parentusuariosRowByFK_FUNCIONARIOS_4, int MATRICULA, string NOME, decimal SALARIO, string CEP, string LOGRADOURO, string NUM, string COMPLEMENTO, string BAIRRO, string CIDADE, string UF, string TELCEL, string TELRES) {
                funcionariosRow rowfuncionariosRow = ((funcionariosRow)(this.NewRow()));
                rowfuncionariosRow.ItemArray = new object[] {
                        IDFUNCIONARIO,
                        parentcargosRowByFK_FUNCIONARIOS_3[0],
                        parentusuariosRowByFK_FUNCIONARIOS_4[0],
                        MATRICULA,
                        NOME,
                        SALARIO,
                        CEP,
                        LOGRADOURO,
                        NUM,
                        COMPLEMENTO,
                        BAIRRO,
                        CIDADE,
                        UF,
                        TELCEL,
                        TELRES};
                this.Rows.Add(rowfuncionariosRow);
                return rowfuncionariosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow FindByIDFUNCIONARIO(int IDFUNCIONARIO) {
                return ((funcionariosRow)(this.Rows.Find(new object[] {
                            IDFUNCIONARIO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                funcionariosDataTable cln = ((funcionariosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new funcionariosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDFUNCIONARIO = base.Columns["IDFUNCIONARIO"];
                this.columnCARGOS_IDCARGO = base.Columns["CARGOS_IDCARGO"];
                this.columnUSUARIOS_IDUSUARIO = base.Columns["USUARIOS_IDUSUARIO"];
                this.columnMATRICULA = base.Columns["MATRICULA"];
                this.columnNOME = base.Columns["NOME"];
                this.columnSALARIO = base.Columns["SALARIO"];
                this.columnCEP = base.Columns["CEP"];
                this.columnLOGRADOURO = base.Columns["LOGRADOURO"];
                this.columnNUM = base.Columns["NUM"];
                this.columnCOMPLEMENTO = base.Columns["COMPLEMENTO"];
                this.columnBAIRRO = base.Columns["BAIRRO"];
                this.columnCIDADE = base.Columns["CIDADE"];
                this.columnUF = base.Columns["UF"];
                this.columnTELCEL = base.Columns["TELCEL"];
                this.columnTELRES = base.Columns["TELRES"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDFUNCIONARIO = new System.Data.DataColumn("IDFUNCIONARIO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDFUNCIONARIO);
                this.columnCARGOS_IDCARGO = new System.Data.DataColumn("CARGOS_IDCARGO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARGOS_IDCARGO);
                this.columnUSUARIOS_IDUSUARIO = new System.Data.DataColumn("USUARIOS_IDUSUARIO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSUARIOS_IDUSUARIO);
                this.columnMATRICULA = new System.Data.DataColumn("MATRICULA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMATRICULA);
                this.columnNOME = new System.Data.DataColumn("NOME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOME);
                this.columnSALARIO = new System.Data.DataColumn("SALARIO", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALARIO);
                this.columnCEP = new System.Data.DataColumn("CEP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCEP);
                this.columnLOGRADOURO = new System.Data.DataColumn("LOGRADOURO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGRADOURO);
                this.columnNUM = new System.Data.DataColumn("NUM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUM);
                this.columnCOMPLEMENTO = new System.Data.DataColumn("COMPLEMENTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPLEMENTO);
                this.columnBAIRRO = new System.Data.DataColumn("BAIRRO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAIRRO);
                this.columnCIDADE = new System.Data.DataColumn("CIDADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIDADE);
                this.columnUF = new System.Data.DataColumn("UF", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUF);
                this.columnTELCEL = new System.Data.DataColumn("TELCEL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELCEL);
                this.columnTELRES = new System.Data.DataColumn("TELRES", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELRES);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDFUNCIONARIO}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnMATRICULA}, false));
                this.columnIDFUNCIONARIO.AllowDBNull = false;
                this.columnIDFUNCIONARIO.Unique = true;
                this.columnCARGOS_IDCARGO.AllowDBNull = false;
                this.columnUSUARIOS_IDUSUARIO.AllowDBNull = false;
                this.columnMATRICULA.AllowDBNull = false;
                this.columnMATRICULA.Unique = true;
                this.columnNOME.AllowDBNull = false;
                this.columnSALARIO.AllowDBNull = false;
                this.columnCEP.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.funcionarios", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand(@"INSERT INTO `fatcar`.`funcionarios` (`CARGOS_IDCARGO`, `USUARIOS_IDUSUARIO`, `MATRICULA`, `NOME`, `SALARIO`, `CEP`, `LOGRADOURO`, `NUM`, `COMPLEMENTO`, `BAIRRO`, `CIDADE`, `UF`, `TELCEL`, `TELRES`) VALUES (:CARGOS_IDCARGO, :USUARIOS_IDUSUARIO, :MATRICULA, :NOME, :SALARIO, :CEP, :LOGRADOURO, :NUM, :COMPLEMENTO, :BAIRRO, :CIDADE, :UF, :TELCEL, :TELRES)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARGOS_IDCARGO";
                param.Size = 0;
                param.SourceColumn = "CARGOS_IDCARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "USUARIOS_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIOS_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MATRICULA";
                param.Size = 0;
                param.SourceColumn = "MATRICULA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SALARIO";
                param.Size = 0;
                param.SourceColumn = "SALARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELCEL";
                param.Size = 0;
                param.SourceColumn = "TELCEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELRES";
                param.Size = 0;
                param.SourceColumn = "TELRES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`funcionarios` SET `CARGOS_IDCARGO` = :CARGOS_IDCARGO, `USUARIOS_IDUSUARIO` = :USUARIOS_IDUSUARIO, `MATRICULA` = :MATRICULA, `NOME` = :NOME, `SALARIO` = :SALARIO, `CEP` = :CEP, `LOGRADOURO` = :LOGRADOURO, `NUM` = :NUM, `COMPLEMENTO` = :COMPLEMENTO, `BAIRRO` = :BAIRRO, `CIDADE` = :CIDADE, `UF` = :UF, `TELCEL` = :TELCEL, `TELRES` = :TELRES WHERE ((`IDFUNCIONARIO` = :Original_IDFUNCIONARIO) AND (`CARGOS_IDCARGO` = :Original_CARGOS_IDCARGO) AND (`USUARIOS_IDUSUARIO` = :Original_USUARIOS_IDUSUARIO) AND (`MATRICULA` = :Original_MATRICULA) AND (`NOME` = :Original_NOME) AND (`SALARIO` = :Original_SALARIO) AND (`CEP` = :Original_CEP) AND ((:IsNull_LOGRADOURO = 1 AND `LOGRADOURO` IS NULL) OR (`LOGRADOURO` = :Original_LOGRADOURO)) AND ((:IsNull_NUM = 1 AND `NUM` IS NULL) OR (`NUM` = :Original_NUM)) AND ((:IsNull_COMPLEMENTO = 1 AND `COMPLEMENTO` IS NULL) OR (`COMPLEMENTO` = :Original_COMPLEMENTO)) AND ((:IsNull_BAIRRO = 1 AND `BAIRRO` IS NULL) OR (`BAIRRO` = :Original_BAIRRO)) AND ((:IsNull_CIDADE = 1 AND `CIDADE` IS NULL) OR (`CIDADE` = :Original_CIDADE)) AND ((:IsNull_UF = 1 AND `UF` IS NULL) OR (`UF` = :Original_UF)) AND ((:IsNull_TELCEL = 1 AND `TELCEL` IS NULL) OR (`TELCEL` = :Original_TELCEL)) AND ((:IsNull_TELRES = 1 AND `TELRES` IS NULL) OR (`TELRES` = :Original_TELRES)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARGOS_IDCARGO";
                param.Size = 0;
                param.SourceColumn = "CARGOS_IDCARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "USUARIOS_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIOS_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MATRICULA";
                param.Size = 0;
                param.SourceColumn = "MATRICULA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SALARIO";
                param.Size = 0;
                param.SourceColumn = "SALARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELCEL";
                param.Size = 0;
                param.SourceColumn = "TELCEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELRES";
                param.Size = 0;
                param.SourceColumn = "TELRES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDFUNCIONARIO";
                param.Size = 0;
                param.SourceColumn = "IDFUNCIONARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARGOS_IDCARGO";
                param.Size = 0;
                param.SourceColumn = "CARGOS_IDCARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_USUARIOS_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIOS_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MATRICULA";
                param.Size = 0;
                param.SourceColumn = "MATRICULA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SALARIO";
                param.Size = 0;
                param.SourceColumn = "SALARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TELCEL";
                param.Size = 0;
                param.SourceColumn = "TELCEL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELCEL";
                param.Size = 0;
                param.SourceColumn = "TELCEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TELRES";
                param.Size = 0;
                param.SourceColumn = "TELRES";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELRES";
                param.Size = 0;
                param.SourceColumn = "TELRES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`funcionarios` WHERE ((`IDFUNCIONARIO` = :Original_IDFUNCIONARIO) AND (`CARGOS_IDCARGO` = :Original_CARGOS_IDCARGO) AND (`USUARIOS_IDUSUARIO` = :Original_USUARIOS_IDUSUARIO) AND (`MATRICULA` = :Original_MATRICULA) AND (`NOME` = :Original_NOME) AND (`SALARIO` = :Original_SALARIO) AND (`CEP` = :Original_CEP) AND ((:IsNull_LOGRADOURO = 1 AND `LOGRADOURO` IS NULL) OR (`LOGRADOURO` = :Original_LOGRADOURO)) AND ((:IsNull_NUM = 1 AND `NUM` IS NULL) OR (`NUM` = :Original_NUM)) AND ((:IsNull_COMPLEMENTO = 1 AND `COMPLEMENTO` IS NULL) OR (`COMPLEMENTO` = :Original_COMPLEMENTO)) AND ((:IsNull_BAIRRO = 1 AND `BAIRRO` IS NULL) OR (`BAIRRO` = :Original_BAIRRO)) AND ((:IsNull_CIDADE = 1 AND `CIDADE` IS NULL) OR (`CIDADE` = :Original_CIDADE)) AND ((:IsNull_UF = 1 AND `UF` IS NULL) OR (`UF` = :Original_UF)) AND ((:IsNull_TELCEL = 1 AND `TELCEL` IS NULL) OR (`TELCEL` = :Original_TELCEL)) AND ((:IsNull_TELRES = 1 AND `TELRES` IS NULL) OR (`TELRES` = :Original_TELRES)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDFUNCIONARIO";
                param.Size = 0;
                param.SourceColumn = "IDFUNCIONARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARGOS_IDCARGO";
                param.Size = 0;
                param.SourceColumn = "CARGOS_IDCARGO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_USUARIOS_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIOS_IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MATRICULA";
                param.Size = 0;
                param.SourceColumn = "MATRICULA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SALARIO";
                param.Size = 0;
                param.SourceColumn = "SALARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LOGRADOURO";
                param.Size = 0;
                param.SourceColumn = "LOGRADOURO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUM";
                param.Size = 0;
                param.SourceColumn = "NUM";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COMPLEMENTO";
                param.Size = 0;
                param.SourceColumn = "COMPLEMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_UF";
                param.Size = 0;
                param.SourceColumn = "UF";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TELCEL";
                param.Size = 0;
                param.SourceColumn = "TELCEL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELCEL";
                param.Size = 0;
                param.SourceColumn = "TELCEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TELRES";
                param.Size = 0;
                param.SourceColumn = "TELRES";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELRES";
                param.Size = 0;
                param.SourceColumn = "TELRES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "funcionarios";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDFUNCIONARIO", "IDFUNCIONARIO");
                this.TableMapping.ColumnMappings.Add("CARGOS_IDCARGO", "CARGOS_IDCARGO");
                this.TableMapping.ColumnMappings.Add("USUARIOS_IDUSUARIO", "USUARIOS_IDUSUARIO");
                this.TableMapping.ColumnMappings.Add("MATRICULA", "MATRICULA");
                this.TableMapping.ColumnMappings.Add("NOME", "NOME");
                this.TableMapping.ColumnMappings.Add("SALARIO", "SALARIO");
                this.TableMapping.ColumnMappings.Add("CEP", "CEP");
                this.TableMapping.ColumnMappings.Add("LOGRADOURO", "LOGRADOURO");
                this.TableMapping.ColumnMappings.Add("NUM", "NUM");
                this.TableMapping.ColumnMappings.Add("COMPLEMENTO", "COMPLEMENTO");
                this.TableMapping.ColumnMappings.Add("BAIRRO", "BAIRRO");
                this.TableMapping.ColumnMappings.Add("CIDADE", "CIDADE");
                this.TableMapping.ColumnMappings.Add("UF", "UF");
                this.TableMapping.ColumnMappings.Add("TELCEL", "TELCEL");
                this.TableMapping.ColumnMappings.Add("TELRES", "TELRES");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow NewfuncionariosRow() {
                return ((funcionariosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new funcionariosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(funcionariosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.funcionariosRowChanged != null)) {
                    this.funcionariosRowChanged(this, new funcionariosRowChangeEvent(((funcionariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.funcionariosRowChanging != null)) {
                    this.funcionariosRowChanging(this, new funcionariosRowChangeEvent(((funcionariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.funcionariosRowDeleted != null)) {
                    this.funcionariosRowDeleted(this, new funcionariosRowChangeEvent(((funcionariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.funcionariosRowDeleting != null)) {
                    this.funcionariosRowDeleting(this, new funcionariosRowChangeEvent(((funcionariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefuncionariosRow(funcionariosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "funcionariosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class funcionariosRow : System.Data.DataRow {
            
            private funcionariosDataTable tablefuncionarios;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal funcionariosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefuncionarios = ((funcionariosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDFUNCIONARIO {
                get {
                    return ((int)(this[this.tablefuncionarios.IDFUNCIONARIOColumn]));
                }
                set {
                    this[this.tablefuncionarios.IDFUNCIONARIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CARGOS_IDCARGO {
                get {
                    return ((int)(this[this.tablefuncionarios.CARGOS_IDCARGOColumn]));
                }
                set {
                    this[this.tablefuncionarios.CARGOS_IDCARGOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USUARIOS_IDUSUARIO {
                get {
                    return ((int)(this[this.tablefuncionarios.USUARIOS_IDUSUARIOColumn]));
                }
                set {
                    this[this.tablefuncionarios.USUARIOS_IDUSUARIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MATRICULA {
                get {
                    return ((int)(this[this.tablefuncionarios.MATRICULAColumn]));
                }
                set {
                    this[this.tablefuncionarios.MATRICULAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOME {
                get {
                    return ((string)(this[this.tablefuncionarios.NOMEColumn]));
                }
                set {
                    this[this.tablefuncionarios.NOMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SALARIO {
                get {
                    return ((decimal)(this[this.tablefuncionarios.SALARIOColumn]));
                }
                set {
                    this[this.tablefuncionarios.SALARIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CEP {
                get {
                    return ((string)(this[this.tablefuncionarios.CEPColumn]));
                }
                set {
                    this[this.tablefuncionarios.CEPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGRADOURO {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.LOGRADOUROColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.LOGRADOUROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUM {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.NUMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.NUMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPLEMENTO {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.COMPLEMENTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.COMPLEMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAIRRO {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.BAIRROColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.BAIRROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIDADE {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.CIDADEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.CIDADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UF {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.UFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.UFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELCEL {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.TELCELColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.TELCELColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELRES {
                get {
                    try {
                        return ((string)(this[this.tablefuncionarios.TELRESColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefuncionarios.TELRESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow usuariosRow {
                get {
                    return ((usuariosRow)(this.GetParentRow(this.Table.ParentRelations["FK_FUNCIONARIOS_4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FUNCIONARIOS_4"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cargosRow cargosRow {
                get {
                    return ((cargosRow)(this.GetParentRow(this.Table.ParentRelations["FK_FUNCIONARIOS_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FUNCIONARIOS_3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGRADOURONull() {
                return this.IsNull(this.tablefuncionarios.LOGRADOUROColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGRADOURONull() {
                this[this.tablefuncionarios.LOGRADOUROColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMNull() {
                return this.IsNull(this.tablefuncionarios.NUMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMNull() {
                this[this.tablefuncionarios.NUMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPLEMENTONull() {
                return this.IsNull(this.tablefuncionarios.COMPLEMENTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPLEMENTONull() {
                this[this.tablefuncionarios.COMPLEMENTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBAIRRONull() {
                return this.IsNull(this.tablefuncionarios.BAIRROColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBAIRRONull() {
                this[this.tablefuncionarios.BAIRROColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDADENull() {
                return this.IsNull(this.tablefuncionarios.CIDADEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDADENull() {
                this[this.tablefuncionarios.CIDADEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUFNull() {
                return this.IsNull(this.tablefuncionarios.UFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUFNull() {
                this[this.tablefuncionarios.UFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTELCELNull() {
                return this.IsNull(this.tablefuncionarios.TELCELColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTELCELNull() {
                this[this.tablefuncionarios.TELCELColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTELRESNull() {
                return this.IsNull(this.tablefuncionarios.TELRESColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTELRESNull() {
                this[this.tablefuncionarios.TELRESColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class funcionariosRowChangeEvent : System.EventArgs {
            
            private funcionariosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRowChangeEvent(funcionariosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class manutencaoDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDMANUTENCAO;
            
            private System.Data.DataColumn columnDESCRICAO;
            
            private System.Data.DataColumn columnVALORMANUTENCAO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "manutencao";
                this.Name = "manutencao";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal manutencaoDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected manutencaoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDMANUTENCAOColumn {
                get {
                    return this.columnIDMANUTENCAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DESCRICAOColumn {
                get {
                    return this.columnDESCRICAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALORMANUTENCAOColumn {
                get {
                    return this.columnVALORMANUTENCAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow this[int index] {
                get {
                    return ((manutencaoRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event manutencaoRowChangeEventHandler manutencaoRowChanging;
            
            public event manutencaoRowChangeEventHandler manutencaoRowChanged;
            
            public event manutencaoRowChangeEventHandler manutencaoRowDeleting;
            
            public event manutencaoRowChangeEventHandler manutencaoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmanutencaoRow(manutencaoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow AddmanutencaoRow(int IDMANUTENCAO, string DESCRICAO, decimal VALORMANUTENCAO) {
                manutencaoRow rowmanutencaoRow = ((manutencaoRow)(this.NewRow()));
                rowmanutencaoRow.ItemArray = new object[] {
                        IDMANUTENCAO,
                        DESCRICAO,
                        VALORMANUTENCAO};
                this.Rows.Add(rowmanutencaoRow);
                return rowmanutencaoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow FindByIDMANUTENCAO(int IDMANUTENCAO) {
                return ((manutencaoRow)(this.Rows.Find(new object[] {
                            IDMANUTENCAO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                manutencaoDataTable cln = ((manutencaoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new manutencaoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDMANUTENCAO = base.Columns["IDMANUTENCAO"];
                this.columnDESCRICAO = base.Columns["DESCRICAO"];
                this.columnVALORMANUTENCAO = base.Columns["VALORMANUTENCAO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDMANUTENCAO = new System.Data.DataColumn("IDMANUTENCAO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDMANUTENCAO);
                this.columnDESCRICAO = new System.Data.DataColumn("DESCRICAO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRICAO);
                this.columnVALORMANUTENCAO = new System.Data.DataColumn("VALORMANUTENCAO", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALORMANUTENCAO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDMANUTENCAO}, true));
                this.columnIDMANUTENCAO.AllowDBNull = false;
                this.columnIDMANUTENCAO.Unique = true;
                this.columnVALORMANUTENCAO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.manutencao", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`manutencao` (`DESCRICAO`, `VALORMANUTENCAO`) VALUES (:DESCR" +
                        "ICAO, :VALORMANUTENCAO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALORMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "VALORMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`manutencao` SET `DESCRICAO` = :DESCRICAO, `VALORMANUTENCAO` = :VALORMANUTENCAO WHERE ((`IDMANUTENCAO` = :Original_IDMANUTENCAO) AND ((:IsNull_DESCRICAO = 1 AND `DESCRICAO` IS NULL) OR (`DESCRICAO` = :Original_DESCRICAO)) AND (`VALORMANUTENCAO` = :Original_VALORMANUTENCAO))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALORMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "VALORMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALORMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "VALORMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`manutencao` WHERE ((`IDMANUTENCAO` = :Original_IDMANUTENCAO" +
                        ") AND ((:IsNull_DESCRICAO = 1 AND `DESCRICAO` IS NULL) OR (`DESCRICAO` = :Origin" +
                        "al_DESCRICAO)) AND (`VALORMANUTENCAO` = :Original_VALORMANUTENCAO))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALORMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "VALORMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "manutencao";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDMANUTENCAO", "IDMANUTENCAO");
                this.TableMapping.ColumnMappings.Add("DESCRICAO", "DESCRICAO");
                this.TableMapping.ColumnMappings.Add("VALORMANUTENCAO", "VALORMANUTENCAO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow NewmanutencaoRow() {
                return ((manutencaoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new manutencaoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(manutencaoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.manutencaoRowChanged != null)) {
                    this.manutencaoRowChanged(this, new manutencaoRowChangeEvent(((manutencaoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.manutencaoRowChanging != null)) {
                    this.manutencaoRowChanging(this, new manutencaoRowChangeEvent(((manutencaoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.manutencaoRowDeleted != null)) {
                    this.manutencaoRowDeleted(this, new manutencaoRowChangeEvent(((manutencaoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.manutencaoRowDeleting != null)) {
                    this.manutencaoRowDeleting(this, new manutencaoRowChangeEvent(((manutencaoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemanutencaoRow(manutencaoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "manutencaoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class manutencaoRow : System.Data.DataRow {
            
            private manutencaoDataTable tablemanutencao;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal manutencaoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemanutencao = ((manutencaoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDMANUTENCAO {
                get {
                    return ((int)(this[this.tablemanutencao.IDMANUTENCAOColumn]));
                }
                set {
                    this[this.tablemanutencao.IDMANUTENCAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRICAO {
                get {
                    try {
                        return ((string)(this[this.tablemanutencao.DESCRICAOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemanutencao.DESCRICAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALORMANUTENCAO {
                get {
                    return ((decimal)(this[this.tablemanutencao.VALORMANUTENCAOColumn]));
                }
                set {
                    this[this.tablemanutencao.VALORMANUTENCAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRICAONull() {
                return this.IsNull(this.tablemanutencao.DESCRICAOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRICAONull() {
                this[this.tablemanutencao.DESCRICAOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow[] GetmanutencaopecaRows() {
                return ((manutencaopecaRow[])(this.GetChildRows(this.Table.ChildRelations["FK_MANUTENCAOPECA_2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow[] GetcarrosRows() {
                return ((carrosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CARROS_5"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class manutencaoRowChangeEvent : System.EventArgs {
            
            private manutencaoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRowChangeEvent(manutencaoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class manutencaopecaDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDMANUTENCAOPECA;
            
            private System.Data.DataColumn columnPECAS_IDPECAS;
            
            private System.Data.DataColumn columnMANUTENCAO_IDMANUTENCAO;
            
            private System.Data.DataColumn columnVALOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "manutencaopeca";
                this.Name = "manutencaopeca";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal manutencaopecaDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected manutencaopecaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDMANUTENCAOPECAColumn {
                get {
                    return this.columnIDMANUTENCAOPECA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PECAS_IDPECASColumn {
                get {
                    return this.columnPECAS_IDPECAS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MANUTENCAO_IDMANUTENCAOColumn {
                get {
                    return this.columnMANUTENCAO_IDMANUTENCAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALORColumn {
                get {
                    return this.columnVALOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow this[int index] {
                get {
                    return ((manutencaopecaRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event manutencaopecaRowChangeEventHandler manutencaopecaRowChanging;
            
            public event manutencaopecaRowChangeEventHandler manutencaopecaRowChanged;
            
            public event manutencaopecaRowChangeEventHandler manutencaopecaRowDeleting;
            
            public event manutencaopecaRowChangeEventHandler manutencaopecaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmanutencaopecaRow(manutencaopecaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow AddmanutencaopecaRow(int IDMANUTENCAOPECA, pecasRow parentpecasRowByFK_MANUTENCAOPECA_1, manutencaoRow parentmanutencaoRowByFK_MANUTENCAOPECA_2, decimal VALOR) {
                manutencaopecaRow rowmanutencaopecaRow = ((manutencaopecaRow)(this.NewRow()));
                rowmanutencaopecaRow.ItemArray = new object[] {
                        IDMANUTENCAOPECA,
                        parentpecasRowByFK_MANUTENCAOPECA_1[0],
                        parentmanutencaoRowByFK_MANUTENCAOPECA_2[0],
                        VALOR};
                this.Rows.Add(rowmanutencaopecaRow);
                return rowmanutencaopecaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow FindByIDMANUTENCAOPECA(int IDMANUTENCAOPECA) {
                return ((manutencaopecaRow)(this.Rows.Find(new object[] {
                            IDMANUTENCAOPECA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                manutencaopecaDataTable cln = ((manutencaopecaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new manutencaopecaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDMANUTENCAOPECA = base.Columns["IDMANUTENCAOPECA"];
                this.columnPECAS_IDPECAS = base.Columns["PECAS_IDPECAS"];
                this.columnMANUTENCAO_IDMANUTENCAO = base.Columns["MANUTENCAO_IDMANUTENCAO"];
                this.columnVALOR = base.Columns["VALOR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDMANUTENCAOPECA = new System.Data.DataColumn("IDMANUTENCAOPECA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDMANUTENCAOPECA);
                this.columnPECAS_IDPECAS = new System.Data.DataColumn("PECAS_IDPECAS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPECAS_IDPECAS);
                this.columnMANUTENCAO_IDMANUTENCAO = new System.Data.DataColumn("MANUTENCAO_IDMANUTENCAO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANUTENCAO_IDMANUTENCAO);
                this.columnVALOR = new System.Data.DataColumn("VALOR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDMANUTENCAOPECA}, true));
                this.columnIDMANUTENCAOPECA.AllowDBNull = false;
                this.columnIDMANUTENCAOPECA.Unique = true;
                this.columnPECAS_IDPECAS.AllowDBNull = false;
                this.columnMANUTENCAO_IDMANUTENCAO.AllowDBNull = false;
                this.columnVALOR.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.manutencaopeca", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`manutencaopeca` (`PECAS_IDPECAS`, `MANUTENCAO_IDMANUTENCAO`" +
                        ", `VALOR`) VALUES (:PECAS_IDPECAS, :MANUTENCAO_IDMANUTENCAO, :VALOR)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PECAS_IDPECAS";
                param.Size = 0;
                param.SourceColumn = "PECAS_IDPECAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`manutencaopeca` SET `PECAS_IDPECAS` = :PECAS_IDPECAS, `MANUTENCAO_IDMANUTENCAO` = :MANUTENCAO_IDMANUTENCAO, `VALOR` = :VALOR WHERE ((`IDMANUTENCAOPECA` = :Original_IDMANUTENCAOPECA) AND (`PECAS_IDPECAS` = :Original_PECAS_IDPECAS) AND (`MANUTENCAO_IDMANUTENCAO` = :Original_MANUTENCAO_IDMANUTENCAO) AND (`VALOR` = :Original_VALOR))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PECAS_IDPECAS";
                param.Size = 0;
                param.SourceColumn = "PECAS_IDPECAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMANUTENCAOPECA";
                param.Size = 0;
                param.SourceColumn = "IDMANUTENCAOPECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PECAS_IDPECAS";
                param.Size = 0;
                param.SourceColumn = "PECAS_IDPECAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`manutencaopeca` WHERE ((`IDMANUTENCAOPECA` = :Original_IDMA" +
                        "NUTENCAOPECA) AND (`PECAS_IDPECAS` = :Original_PECAS_IDPECAS) AND (`MANUTENCAO_I" +
                        "DMANUTENCAO` = :Original_MANUTENCAO_IDMANUTENCAO) AND (`VALOR` = :Original_VALOR" +
                        "))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMANUTENCAOPECA";
                param.Size = 0;
                param.SourceColumn = "IDMANUTENCAOPECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PECAS_IDPECAS";
                param.Size = 0;
                param.SourceColumn = "PECAS_IDPECAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MANUTENCAO_IDMANUTENCAO";
                param.Size = 0;
                param.SourceColumn = "MANUTENCAO_IDMANUTENCAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "manutencaopeca";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDMANUTENCAOPECA", "IDMANUTENCAOPECA");
                this.TableMapping.ColumnMappings.Add("PECAS_IDPECAS", "PECAS_IDPECAS");
                this.TableMapping.ColumnMappings.Add("MANUTENCAO_IDMANUTENCAO", "MANUTENCAO_IDMANUTENCAO");
                this.TableMapping.ColumnMappings.Add("VALOR", "VALOR");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow NewmanutencaopecaRow() {
                return ((manutencaopecaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new manutencaopecaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(manutencaopecaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.manutencaopecaRowChanged != null)) {
                    this.manutencaopecaRowChanged(this, new manutencaopecaRowChangeEvent(((manutencaopecaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.manutencaopecaRowChanging != null)) {
                    this.manutencaopecaRowChanging(this, new manutencaopecaRowChangeEvent(((manutencaopecaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.manutencaopecaRowDeleted != null)) {
                    this.manutencaopecaRowDeleted(this, new manutencaopecaRowChangeEvent(((manutencaopecaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.manutencaopecaRowDeleting != null)) {
                    this.manutencaopecaRowDeleting(this, new manutencaopecaRowChangeEvent(((manutencaopecaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemanutencaopecaRow(manutencaopecaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "manutencaopecaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class manutencaopecaRow : System.Data.DataRow {
            
            private manutencaopecaDataTable tablemanutencaopeca;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal manutencaopecaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemanutencaopeca = ((manutencaopecaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDMANUTENCAOPECA {
                get {
                    return ((int)(this[this.tablemanutencaopeca.IDMANUTENCAOPECAColumn]));
                }
                set {
                    this[this.tablemanutencaopeca.IDMANUTENCAOPECAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PECAS_IDPECAS {
                get {
                    return ((int)(this[this.tablemanutencaopeca.PECAS_IDPECASColumn]));
                }
                set {
                    this[this.tablemanutencaopeca.PECAS_IDPECASColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MANUTENCAO_IDMANUTENCAO {
                get {
                    return ((int)(this[this.tablemanutencaopeca.MANUTENCAO_IDMANUTENCAOColumn]));
                }
                set {
                    this[this.tablemanutencaopeca.MANUTENCAO_IDMANUTENCAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR {
                get {
                    return ((decimal)(this[this.tablemanutencaopeca.VALORColumn]));
                }
                set {
                    this[this.tablemanutencaopeca.VALORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaoRow manutencaoRow {
                get {
                    return ((manutencaoRow)(this.GetParentRow(this.Table.ParentRelations["FK_MANUTENCAOPECA_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MANUTENCAOPECA_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRow pecasRow {
                get {
                    return ((pecasRow)(this.GetParentRow(this.Table.ParentRelations["FK_MANUTENCAOPECA_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MANUTENCAOPECA_1"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class manutencaopecaRowChangeEvent : System.EventArgs {
            
            private manutencaopecaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRowChangeEvent(manutencaopecaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class modelosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDMODELO;
            
            private System.Data.DataColumn columnMONTADORA_IDMONTADORA;
            
            private System.Data.DataColumn columnNOME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "modelos";
                this.Name = "modelos";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal modelosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected modelosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDMODELOColumn {
                get {
                    return this.columnIDMODELO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MONTADORA_IDMONTADORAColumn {
                get {
                    return this.columnMONTADORA_IDMONTADORA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NOMEColumn {
                get {
                    return this.columnNOME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow this[int index] {
                get {
                    return ((modelosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event modelosRowChangeEventHandler modelosRowChanging;
            
            public event modelosRowChangeEventHandler modelosRowChanged;
            
            public event modelosRowChangeEventHandler modelosRowDeleting;
            
            public event modelosRowChangeEventHandler modelosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmodelosRow(modelosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow AddmodelosRow(int IDMODELO, montadoraRow parentmontadoraRowByFK_MODELOS_2, string NOME) {
                modelosRow rowmodelosRow = ((modelosRow)(this.NewRow()));
                rowmodelosRow.ItemArray = new object[] {
                        IDMODELO,
                        parentmontadoraRowByFK_MODELOS_2[0],
                        NOME};
                this.Rows.Add(rowmodelosRow);
                return rowmodelosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow FindByIDMODELO(int IDMODELO) {
                return ((modelosRow)(this.Rows.Find(new object[] {
                            IDMODELO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                modelosDataTable cln = ((modelosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new modelosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDMODELO = base.Columns["IDMODELO"];
                this.columnMONTADORA_IDMONTADORA = base.Columns["MONTADORA_IDMONTADORA"];
                this.columnNOME = base.Columns["NOME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDMODELO = new System.Data.DataColumn("IDMODELO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDMODELO);
                this.columnMONTADORA_IDMONTADORA = new System.Data.DataColumn("MONTADORA_IDMONTADORA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTADORA_IDMONTADORA);
                this.columnNOME = new System.Data.DataColumn("NOME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDMODELO}, true));
                this.columnIDMODELO.AllowDBNull = false;
                this.columnIDMODELO.Unique = true;
                this.columnMONTADORA_IDMONTADORA.AllowDBNull = false;
                this.columnNOME.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.modelos", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`modelos` (`MONTADORA_IDMONTADORA`, `NOME`) VALUES (:MONTADO" +
                        "RA_IDMONTADORA, :NOME)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MONTADORA_IDMONTADORA";
                param.Size = 0;
                param.SourceColumn = "MONTADORA_IDMONTADORA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `fatcar`.`modelos` SET `MONTADORA_IDMONTADORA` = :MONTADORA_IDMONTADORA, `" +
                        "NOME` = :NOME WHERE ((`IDMODELO` = :Original_IDMODELO) AND (`MONTADORA_IDMONTADO" +
                        "RA` = :Original_MONTADORA_IDMONTADORA) AND (`NOME` = :Original_NOME))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MONTADORA_IDMONTADORA";
                param.Size = 0;
                param.SourceColumn = "MONTADORA_IDMONTADORA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMODELO";
                param.Size = 0;
                param.SourceColumn = "IDMODELO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MONTADORA_IDMONTADORA";
                param.Size = 0;
                param.SourceColumn = "MONTADORA_IDMONTADORA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`modelos` WHERE ((`IDMODELO` = :Original_IDMODELO) AND (`MON" +
                        "TADORA_IDMONTADORA` = :Original_MONTADORA_IDMONTADORA) AND (`NOME` = :Original_N" +
                        "OME))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMODELO";
                param.Size = 0;
                param.SourceColumn = "IDMODELO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MONTADORA_IDMONTADORA";
                param.Size = 0;
                param.SourceColumn = "MONTADORA_IDMONTADORA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "modelos";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDMODELO", "IDMODELO");
                this.TableMapping.ColumnMappings.Add("MONTADORA_IDMONTADORA", "MONTADORA_IDMONTADORA");
                this.TableMapping.ColumnMappings.Add("NOME", "NOME");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow NewmodelosRow() {
                return ((modelosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new modelosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(modelosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.modelosRowChanged != null)) {
                    this.modelosRowChanged(this, new modelosRowChangeEvent(((modelosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.modelosRowChanging != null)) {
                    this.modelosRowChanging(this, new modelosRowChangeEvent(((modelosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.modelosRowDeleted != null)) {
                    this.modelosRowDeleted(this, new modelosRowChangeEvent(((modelosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.modelosRowDeleting != null)) {
                    this.modelosRowDeleting(this, new modelosRowChangeEvent(((modelosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemodelosRow(modelosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "modelosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class modelosRow : System.Data.DataRow {
            
            private modelosDataTable tablemodelos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal modelosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemodelos = ((modelosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDMODELO {
                get {
                    return ((int)(this[this.tablemodelos.IDMODELOColumn]));
                }
                set {
                    this[this.tablemodelos.IDMODELOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MONTADORA_IDMONTADORA {
                get {
                    return ((int)(this[this.tablemodelos.MONTADORA_IDMONTADORAColumn]));
                }
                set {
                    this[this.tablemodelos.MONTADORA_IDMONTADORAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOME {
                get {
                    return ((string)(this[this.tablemodelos.NOMEColumn]));
                }
                set {
                    this[this.tablemodelos.NOMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRow montadoraRow {
                get {
                    return ((montadoraRow)(this.GetParentRow(this.Table.ParentRelations["FK_MODELOS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MODELOS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public carrosRow[] GetcarrosRows() {
                return ((carrosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CARROS_3"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class modelosRowChangeEvent : System.EventArgs {
            
            private modelosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRowChangeEvent(modelosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class montadoraDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDMONTADORA;
            
            private System.Data.DataColumn columnNOME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "montadora";
                this.Name = "montadora";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal montadoraDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected montadoraDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDMONTADORAColumn {
                get {
                    return this.columnIDMONTADORA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NOMEColumn {
                get {
                    return this.columnNOME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRow this[int index] {
                get {
                    return ((montadoraRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event montadoraRowChangeEventHandler montadoraRowChanging;
            
            public event montadoraRowChangeEventHandler montadoraRowChanged;
            
            public event montadoraRowChangeEventHandler montadoraRowDeleting;
            
            public event montadoraRowChangeEventHandler montadoraRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmontadoraRow(montadoraRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRow AddmontadoraRow(int IDMONTADORA, string NOME) {
                montadoraRow rowmontadoraRow = ((montadoraRow)(this.NewRow()));
                rowmontadoraRow.ItemArray = new object[] {
                        IDMONTADORA,
                        NOME};
                this.Rows.Add(rowmontadoraRow);
                return rowmontadoraRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRow FindByIDMONTADORA(int IDMONTADORA) {
                return ((montadoraRow)(this.Rows.Find(new object[] {
                            IDMONTADORA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                montadoraDataTable cln = ((montadoraDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new montadoraDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDMONTADORA = base.Columns["IDMONTADORA"];
                this.columnNOME = base.Columns["NOME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDMONTADORA = new System.Data.DataColumn("IDMONTADORA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDMONTADORA);
                this.columnNOME = new System.Data.DataColumn("NOME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDMONTADORA}, true));
                this.columnIDMONTADORA.AllowDBNull = false;
                this.columnIDMONTADORA.Unique = true;
                this.columnNOME.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.montadora", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`montadora` (`NOME`) VALUES (:NOME)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `fatcar`.`montadora` SET `NOME` = :NOME WHERE ((`IDMONTADORA` = :Original_" +
                        "IDMONTADORA) AND (`NOME` = :Original_NOME))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMONTADORA";
                param.Size = 0;
                param.SourceColumn = "IDMONTADORA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`montadora` WHERE ((`IDMONTADORA` = :Original_IDMONTADORA) A" +
                        "ND (`NOME` = :Original_NOME))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMONTADORA";
                param.Size = 0;
                param.SourceColumn = "IDMONTADORA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "montadora";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDMONTADORA", "IDMONTADORA");
                this.TableMapping.ColumnMappings.Add("NOME", "NOME");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRow NewmontadoraRow() {
                return ((montadoraRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new montadoraRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(montadoraRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.montadoraRowChanged != null)) {
                    this.montadoraRowChanged(this, new montadoraRowChangeEvent(((montadoraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.montadoraRowChanging != null)) {
                    this.montadoraRowChanging(this, new montadoraRowChangeEvent(((montadoraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.montadoraRowDeleted != null)) {
                    this.montadoraRowDeleted(this, new montadoraRowChangeEvent(((montadoraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.montadoraRowDeleting != null)) {
                    this.montadoraRowDeleting(this, new montadoraRowChangeEvent(((montadoraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemontadoraRow(montadoraRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "montadoraDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class montadoraRow : System.Data.DataRow {
            
            private montadoraDataTable tablemontadora;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal montadoraRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemontadora = ((montadoraDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDMONTADORA {
                get {
                    return ((int)(this[this.tablemontadora.IDMONTADORAColumn]));
                }
                set {
                    this[this.tablemontadora.IDMONTADORAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOME {
                get {
                    return ((string)(this[this.tablemontadora.NOMEColumn]));
                }
                set {
                    this[this.tablemontadora.NOMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modelosRow[] GetmodelosRows() {
                return ((modelosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_MODELOS_2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class montadoraRowChangeEvent : System.EventArgs {
            
            private montadoraRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRowChangeEvent(montadoraRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public montadoraRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class motoristasDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDMOTORISTAS;
            
            private System.Data.DataColumn columnCONTRATOCARRO_IDCONTRATOCARRO;
            
            private System.Data.DataColumn columnENDERECO_IDENDERECO;
            
            private System.Data.DataColumn columnNOME;
            
            private System.Data.DataColumn columnCNH;
            
            private System.Data.DataColumn columnVALIDADE;
            
            private System.Data.DataColumn columnCATEGORIA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "motoristas";
                this.Name = "motoristas";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal motoristasDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected motoristasDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDMOTORISTASColumn {
                get {
                    return this.columnIDMOTORISTAS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOCARRO_IDCONTRATOCARROColumn {
                get {
                    return this.columnCONTRATOCARRO_IDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ENDERECO_IDENDERECOColumn {
                get {
                    return this.columnENDERECO_IDENDERECO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NOMEColumn {
                get {
                    return this.columnNOME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CNHColumn {
                get {
                    return this.columnCNH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALIDADEColumn {
                get {
                    return this.columnVALIDADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CATEGORIAColumn {
                get {
                    return this.columnCATEGORIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow this[int index] {
                get {
                    return ((motoristasRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event motoristasRowChangeEventHandler motoristasRowChanging;
            
            public event motoristasRowChangeEventHandler motoristasRowChanged;
            
            public event motoristasRowChangeEventHandler motoristasRowDeleting;
            
            public event motoristasRowChangeEventHandler motoristasRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmotoristasRow(motoristasRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow AddmotoristasRow(int IDMOTORISTAS, contratocarroRow parentcontratocarroRowByFK_MOTORISTAS_1, enderecoRow parentenderecoRowByFK_MOTORISTAS_3, string NOME, string CNH, string VALIDADE, string CATEGORIA) {
                motoristasRow rowmotoristasRow = ((motoristasRow)(this.NewRow()));
                rowmotoristasRow.ItemArray = new object[] {
                        IDMOTORISTAS,
                        parentcontratocarroRowByFK_MOTORISTAS_1[0],
                        parentenderecoRowByFK_MOTORISTAS_3[0],
                        NOME,
                        CNH,
                        VALIDADE,
                        CATEGORIA};
                this.Rows.Add(rowmotoristasRow);
                return rowmotoristasRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow FindByIDMOTORISTAS(int IDMOTORISTAS) {
                return ((motoristasRow)(this.Rows.Find(new object[] {
                            IDMOTORISTAS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                motoristasDataTable cln = ((motoristasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new motoristasDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDMOTORISTAS = base.Columns["IDMOTORISTAS"];
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = base.Columns["CONTRATOCARRO_IDCONTRATOCARRO"];
                this.columnENDERECO_IDENDERECO = base.Columns["ENDERECO_IDENDERECO"];
                this.columnNOME = base.Columns["NOME"];
                this.columnCNH = base.Columns["CNH"];
                this.columnVALIDADE = base.Columns["VALIDADE"];
                this.columnCATEGORIA = base.Columns["CATEGORIA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDMOTORISTAS = new System.Data.DataColumn("IDMOTORISTAS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDMOTORISTAS);
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = new System.Data.DataColumn("CONTRATOCARRO_IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOCARRO_IDCONTRATOCARRO);
                this.columnENDERECO_IDENDERECO = new System.Data.DataColumn("ENDERECO_IDENDERECO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnENDERECO_IDENDERECO);
                this.columnNOME = new System.Data.DataColumn("NOME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOME);
                this.columnCNH = new System.Data.DataColumn("CNH", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCNH);
                this.columnVALIDADE = new System.Data.DataColumn("VALIDADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALIDADE);
                this.columnCATEGORIA = new System.Data.DataColumn("CATEGORIA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORIA);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDMOTORISTAS}, true));
                this.columnIDMOTORISTAS.AllowDBNull = false;
                this.columnIDMOTORISTAS.Unique = true;
                this.columnCONTRATOCARRO_IDCONTRATOCARRO.AllowDBNull = false;
                this.columnENDERECO_IDENDERECO.AllowDBNull = false;
                this.columnNOME.AllowDBNull = false;
                this.columnCNH.AllowDBNull = false;
                this.columnVALIDADE.AllowDBNull = false;
                this.columnCATEGORIA.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.motoristas", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`motoristas` (`CONTRATOCARRO_IDCONTRATOCARRO`, `ENDERECO_IDE" +
                        "NDERECO`, `NOME`, `CNH`, `VALIDADE`, `CATEGORIA`) VALUES (:CONTRATOCARRO_IDCONTR" +
                        "ATOCARRO, :ENDERECO_IDENDERECO, :NOME, :CNH, :VALIDADE, :CATEGORIA)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CNH";
                param.Size = 0;
                param.SourceColumn = "CNH";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALIDADE";
                param.Size = 0;
                param.SourceColumn = "VALIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`motoristas` SET `CONTRATOCARRO_IDCONTRATOCARRO` = :CONTRATOCARRO_IDCONTRATOCARRO, `ENDERECO_IDENDERECO` = :ENDERECO_IDENDERECO, `NOME` = :NOME, `CNH` = :CNH, `VALIDADE` = :VALIDADE, `CATEGORIA` = :CATEGORIA WHERE ((`IDMOTORISTAS` = :Original_IDMOTORISTAS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND (`ENDERECO_IDENDERECO` = :Original_ENDERECO_IDENDERECO) AND (`NOME` = :Original_NOME) AND (`CNH` = :Original_CNH) AND (`VALIDADE` = :Original_VALIDADE) AND (`CATEGORIA` = :Original_CATEGORIA))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CNH";
                param.Size = 0;
                param.SourceColumn = "CNH";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALIDADE";
                param.Size = 0;
                param.SourceColumn = "VALIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMOTORISTAS";
                param.Size = 0;
                param.SourceColumn = "IDMOTORISTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CNH";
                param.Size = 0;
                param.SourceColumn = "CNH";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALIDADE";
                param.Size = 0;
                param.SourceColumn = "VALIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`motoristas` WHERE ((`IDMOTORISTAS` = :Original_IDMOTORISTAS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND (`ENDERECO_IDENDERECO` = :Original_ENDERECO_IDENDERECO) AND (`NOME` = :Original_NOME) AND (`CNH` = :Original_CNH) AND (`VALIDADE` = :Original_VALIDADE) AND (`CATEGORIA` = :Original_CATEGORIA))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMOTORISTAS";
                param.Size = 0;
                param.SourceColumn = "IDMOTORISTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ENDERECO_IDENDERECO";
                param.Size = 0;
                param.SourceColumn = "ENDERECO_IDENDERECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CNH";
                param.Size = 0;
                param.SourceColumn = "CNH";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALIDADE";
                param.Size = 0;
                param.SourceColumn = "VALIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "motoristas";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDMOTORISTAS", "IDMOTORISTAS");
                this.TableMapping.ColumnMappings.Add("CONTRATOCARRO_IDCONTRATOCARRO", "CONTRATOCARRO_IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("ENDERECO_IDENDERECO", "ENDERECO_IDENDERECO");
                this.TableMapping.ColumnMappings.Add("NOME", "NOME");
                this.TableMapping.ColumnMappings.Add("CNH", "CNH");
                this.TableMapping.ColumnMappings.Add("VALIDADE", "VALIDADE");
                this.TableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow NewmotoristasRow() {
                return ((motoristasRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new motoristasRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(motoristasRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.motoristasRowChanged != null)) {
                    this.motoristasRowChanged(this, new motoristasRowChangeEvent(((motoristasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.motoristasRowChanging != null)) {
                    this.motoristasRowChanging(this, new motoristasRowChangeEvent(((motoristasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.motoristasRowDeleted != null)) {
                    this.motoristasRowDeleted(this, new motoristasRowChangeEvent(((motoristasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.motoristasRowDeleting != null)) {
                    this.motoristasRowDeleting(this, new motoristasRowChangeEvent(((motoristasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemotoristasRow(motoristasRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "motoristasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class motoristasRow : System.Data.DataRow {
            
            private motoristasDataTable tablemotoristas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal motoristasRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemotoristas = ((motoristasDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDMOTORISTAS {
                get {
                    return ((int)(this[this.tablemotoristas.IDMOTORISTASColumn]));
                }
                set {
                    this[this.tablemotoristas.IDMOTORISTASColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOCARRO_IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablemotoristas.CONTRATOCARRO_IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablemotoristas.CONTRATOCARRO_IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ENDERECO_IDENDERECO {
                get {
                    return ((int)(this[this.tablemotoristas.ENDERECO_IDENDERECOColumn]));
                }
                set {
                    this[this.tablemotoristas.ENDERECO_IDENDERECOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOME {
                get {
                    return ((string)(this[this.tablemotoristas.NOMEColumn]));
                }
                set {
                    this[this.tablemotoristas.NOMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CNH {
                get {
                    return ((string)(this[this.tablemotoristas.CNHColumn]));
                }
                set {
                    this[this.tablemotoristas.CNHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALIDADE {
                get {
                    return ((string)(this[this.tablemotoristas.VALIDADEColumn]));
                }
                set {
                    this[this.tablemotoristas.VALIDADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORIA {
                get {
                    return ((string)(this[this.tablemotoristas.CATEGORIAColumn]));
                }
                set {
                    this[this.tablemotoristas.CATEGORIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public enderecoRow enderecoRow {
                get {
                    return ((enderecoRow)(this.GetParentRow(this.Table.ParentRelations["FK_MOTORISTAS_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MOTORISTAS_3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_MOTORISTAS_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MOTORISTAS_1"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class motoristasRowChangeEvent : System.EventArgs {
            
            private motoristasRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRowChangeEvent(motoristasRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public motoristasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class multasDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDMULTAS;
            
            private System.Data.DataColumn columnCONTRATOCARRO_IDCONTRATOCARRO;
            
            private System.Data.DataColumn columnDESCRICAO;
            
            private System.Data.DataColumn columnVALOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "multas";
                this.Name = "multas";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal multasDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected multasDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDMULTASColumn {
                get {
                    return this.columnIDMULTAS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTRATOCARRO_IDCONTRATOCARROColumn {
                get {
                    return this.columnCONTRATOCARRO_IDCONTRATOCARRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DESCRICAOColumn {
                get {
                    return this.columnDESCRICAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALORColumn {
                get {
                    return this.columnVALOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRow this[int index] {
                get {
                    return ((multasRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event multasRowChangeEventHandler multasRowChanging;
            
            public event multasRowChangeEventHandler multasRowChanged;
            
            public event multasRowChangeEventHandler multasRowDeleting;
            
            public event multasRowChangeEventHandler multasRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmultasRow(multasRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRow AddmultasRow(int IDMULTAS, contratocarroRow parentcontratocarroRowByFK_MULTAS_2, string DESCRICAO, decimal VALOR) {
                multasRow rowmultasRow = ((multasRow)(this.NewRow()));
                rowmultasRow.ItemArray = new object[] {
                        IDMULTAS,
                        parentcontratocarroRowByFK_MULTAS_2[0],
                        DESCRICAO,
                        VALOR};
                this.Rows.Add(rowmultasRow);
                return rowmultasRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRow FindByIDMULTAS(int IDMULTAS) {
                return ((multasRow)(this.Rows.Find(new object[] {
                            IDMULTAS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                multasDataTable cln = ((multasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new multasDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDMULTAS = base.Columns["IDMULTAS"];
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = base.Columns["CONTRATOCARRO_IDCONTRATOCARRO"];
                this.columnDESCRICAO = base.Columns["DESCRICAO"];
                this.columnVALOR = base.Columns["VALOR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDMULTAS = new System.Data.DataColumn("IDMULTAS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDMULTAS);
                this.columnCONTRATOCARRO_IDCONTRATOCARRO = new System.Data.DataColumn("CONTRATOCARRO_IDCONTRATOCARRO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRATOCARRO_IDCONTRATOCARRO);
                this.columnDESCRICAO = new System.Data.DataColumn("DESCRICAO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRICAO);
                this.columnVALOR = new System.Data.DataColumn("VALOR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDMULTAS}, true));
                this.columnIDMULTAS.AllowDBNull = false;
                this.columnIDMULTAS.Unique = true;
                this.columnCONTRATOCARRO_IDCONTRATOCARRO.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.multas", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`multas` (`CONTRATOCARRO_IDCONTRATOCARRO`, `DESCRICAO`, `VAL" +
                        "OR`) VALUES (:CONTRATOCARRO_IDCONTRATOCARRO, :DESCRICAO, :VALOR)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`multas` SET `CONTRATOCARRO_IDCONTRATOCARRO` = :CONTRATOCARRO_IDCONTRATOCARRO, `DESCRICAO` = :DESCRICAO, `VALOR` = :VALOR WHERE ((`IDMULTAS` = :Original_IDMULTAS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:IsNull_DESCRICAO = 1 AND `DESCRICAO` IS NULL) OR (`DESCRICAO` = :Original_DESCRICAO)) AND ((:IsNull_VALOR = 1 AND `VALOR` IS NULL) OR (`VALOR` = :Original_VALOR)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMULTAS";
                param.Size = 0;
                param.SourceColumn = "IDMULTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`multas` WHERE ((`IDMULTAS` = :Original_IDMULTAS) AND (`CONTRATOCARRO_IDCONTRATOCARRO` = :Original_CONTRATOCARRO_IDCONTRATOCARRO) AND ((:IsNull_DESCRICAO = 1 AND `DESCRICAO` IS NULL) OR (`DESCRICAO` = :Original_DESCRICAO)) AND ((:IsNull_VALOR = 1 AND `VALOR` IS NULL) OR (`VALOR` = :Original_VALOR)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDMULTAS";
                param.Size = 0;
                param.SourceColumn = "IDMULTAS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTRATOCARRO_IDCONTRATOCARRO";
                param.Size = 0;
                param.SourceColumn = "CONTRATOCARRO_IDCONTRATOCARRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCRICAO";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR";
                param.Size = 0;
                param.SourceColumn = "VALOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "multas";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDMULTAS", "IDMULTAS");
                this.TableMapping.ColumnMappings.Add("CONTRATOCARRO_IDCONTRATOCARRO", "CONTRATOCARRO_IDCONTRATOCARRO");
                this.TableMapping.ColumnMappings.Add("DESCRICAO", "DESCRICAO");
                this.TableMapping.ColumnMappings.Add("VALOR", "VALOR");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRow NewmultasRow() {
                return ((multasRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new multasRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(multasRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.multasRowChanged != null)) {
                    this.multasRowChanged(this, new multasRowChangeEvent(((multasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.multasRowChanging != null)) {
                    this.multasRowChanging(this, new multasRowChangeEvent(((multasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.multasRowDeleted != null)) {
                    this.multasRowDeleted(this, new multasRowChangeEvent(((multasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.multasRowDeleting != null)) {
                    this.multasRowDeleting(this, new multasRowChangeEvent(((multasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemultasRow(multasRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "multasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class multasRow : System.Data.DataRow {
            
            private multasDataTable tablemultas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal multasRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemultas = ((multasDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDMULTAS {
                get {
                    return ((int)(this[this.tablemultas.IDMULTASColumn]));
                }
                set {
                    this[this.tablemultas.IDMULTASColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CONTRATOCARRO_IDCONTRATOCARRO {
                get {
                    return ((int)(this[this.tablemultas.CONTRATOCARRO_IDCONTRATOCARROColumn]));
                }
                set {
                    this[this.tablemultas.CONTRATOCARRO_IDCONTRATOCARROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRICAO {
                get {
                    try {
                        return ((string)(this[this.tablemultas.DESCRICAOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemultas.DESCRICAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR {
                get {
                    try {
                        return ((decimal)(this[this.tablemultas.VALORColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemultas.VALORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratocarroRow contratocarroRow {
                get {
                    return ((contratocarroRow)(this.GetParentRow(this.Table.ParentRelations["FK_MULTAS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MULTAS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRICAONull() {
                return this.IsNull(this.tablemultas.DESCRICAOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRICAONull() {
                this[this.tablemultas.DESCRICAOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVALORNull() {
                return this.IsNull(this.tablemultas.VALORColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVALORNull() {
                this[this.tablemultas.VALORColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class multasRowChangeEvent : System.EventArgs {
            
            private multasRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRowChangeEvent(multasRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public multasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pecasDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDPECA;
            
            private System.Data.DataColumn columnDESCRICAO_PECA;
            
            private System.Data.DataColumn columnVALOR_PECA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "pecas";
                this.Name = "pecas";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pecasDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pecasDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDPECAColumn {
                get {
                    return this.columnIDPECA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DESCRICAO_PECAColumn {
                get {
                    return this.columnDESCRICAO_PECA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VALOR_PECAColumn {
                get {
                    return this.columnVALOR_PECA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRow this[int index] {
                get {
                    return ((pecasRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event pecasRowChangeEventHandler pecasRowChanging;
            
            public event pecasRowChangeEventHandler pecasRowChanged;
            
            public event pecasRowChangeEventHandler pecasRowDeleting;
            
            public event pecasRowChangeEventHandler pecasRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpecasRow(pecasRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRow AddpecasRow(int IDPECA, string DESCRICAO_PECA, decimal VALOR_PECA) {
                pecasRow rowpecasRow = ((pecasRow)(this.NewRow()));
                rowpecasRow.ItemArray = new object[] {
                        IDPECA,
                        DESCRICAO_PECA,
                        VALOR_PECA};
                this.Rows.Add(rowpecasRow);
                return rowpecasRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRow FindByIDPECA(int IDPECA) {
                return ((pecasRow)(this.Rows.Find(new object[] {
                            IDPECA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                pecasDataTable cln = ((pecasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new pecasDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDPECA = base.Columns["IDPECA"];
                this.columnDESCRICAO_PECA = base.Columns["DESCRICAO_PECA"];
                this.columnVALOR_PECA = base.Columns["VALOR_PECA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDPECA = new System.Data.DataColumn("IDPECA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPECA);
                this.columnDESCRICAO_PECA = new System.Data.DataColumn("DESCRICAO_PECA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRICAO_PECA);
                this.columnVALOR_PECA = new System.Data.DataColumn("VALOR_PECA", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR_PECA);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDPECA}, true));
                this.columnIDPECA.AllowDBNull = false;
                this.columnIDPECA.Unique = true;
                this.columnVALOR_PECA.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.pecas", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`pecas` (`DESCRICAO_PECA`, `VALOR_PECA`) VALUES (:DESCRICAO_" +
                        "PECA, :VALOR_PECA)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCRICAO_PECA";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR_PECA";
                param.Size = 0;
                param.SourceColumn = "VALOR_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`pecas` SET `DESCRICAO_PECA` = :DESCRICAO_PECA, `VALOR_PECA` = :VALOR_PECA WHERE ((`IDPECA` = :Original_IDPECA) AND ((:IsNull_DESCRICAO_PECA = 1 AND `DESCRICAO_PECA` IS NULL) OR (`DESCRICAO_PECA` = :Original_DESCRICAO_PECA)) AND (`VALOR_PECA` = :Original_VALOR_PECA))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCRICAO_PECA";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VALOR_PECA";
                param.Size = 0;
                param.SourceColumn = "VALOR_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDPECA";
                param.Size = 0;
                param.SourceColumn = "IDPECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCRICAO_PECA";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO_PECA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCRICAO_PECA";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR_PECA";
                param.Size = 0;
                param.SourceColumn = "VALOR_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`pecas` WHERE ((`IDPECA` = :Original_IDPECA) AND ((:IsNull_D" +
                        "ESCRICAO_PECA = 1 AND `DESCRICAO_PECA` IS NULL) OR (`DESCRICAO_PECA` = :Original" +
                        "_DESCRICAO_PECA)) AND (`VALOR_PECA` = :Original_VALOR_PECA))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDPECA";
                param.Size = 0;
                param.SourceColumn = "IDPECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCRICAO_PECA";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO_PECA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCRICAO_PECA";
                param.Size = 0;
                param.SourceColumn = "DESCRICAO_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VALOR_PECA";
                param.Size = 0;
                param.SourceColumn = "VALOR_PECA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "pecas";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDPECA", "IDPECA");
                this.TableMapping.ColumnMappings.Add("DESCRICAO_PECA", "DESCRICAO_PECA");
                this.TableMapping.ColumnMappings.Add("VALOR_PECA", "VALOR_PECA");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRow NewpecasRow() {
                return ((pecasRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new pecasRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(pecasRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pecasRowChanged != null)) {
                    this.pecasRowChanged(this, new pecasRowChangeEvent(((pecasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pecasRowChanging != null)) {
                    this.pecasRowChanging(this, new pecasRowChangeEvent(((pecasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pecasRowDeleted != null)) {
                    this.pecasRowDeleted(this, new pecasRowChangeEvent(((pecasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pecasRowDeleting != null)) {
                    this.pecasRowDeleting(this, new pecasRowChangeEvent(((pecasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepecasRow(pecasRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pecasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class pecasRow : System.Data.DataRow {
            
            private pecasDataTable tablepecas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pecasRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepecas = ((pecasDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPECA {
                get {
                    return ((int)(this[this.tablepecas.IDPECAColumn]));
                }
                set {
                    this[this.tablepecas.IDPECAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRICAO_PECA {
                get {
                    try {
                        return ((string)(this[this.tablepecas.DESCRICAO_PECAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepecas.DESCRICAO_PECAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALOR_PECA {
                get {
                    return ((decimal)(this[this.tablepecas.VALOR_PECAColumn]));
                }
                set {
                    this[this.tablepecas.VALOR_PECAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRICAO_PECANull() {
                return this.IsNull(this.tablepecas.DESCRICAO_PECAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRICAO_PECANull() {
                this[this.tablepecas.DESCRICAO_PECAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public manutencaopecaRow[] GetmanutencaopecaRows() {
                return ((manutencaopecaRow[])(this.GetChildRows(this.Table.ChildRelations["FK_MANUTENCAOPECA_1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class pecasRowChangeEvent : System.EventArgs {
            
            private pecasRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRowChangeEvent(pecasRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pecasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pneusDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDPNEUS;
            
            private System.Data.DataColumn columnCARROS_IDCARROS;
            
            private System.Data.DataColumn columnTIPOPNEU;
            
            private System.Data.DataColumn columnKMINICIAL;
            
            private System.Data.DataColumn columnKMATUAL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "pneus";
                this.Name = "pneus";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pneusDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pneusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDPNEUSColumn {
                get {
                    return this.columnIDPNEUS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CARROS_IDCARROSColumn {
                get {
                    return this.columnCARROS_IDCARROS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TIPOPNEUColumn {
                get {
                    return this.columnTIPOPNEU;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KMINICIALColumn {
                get {
                    return this.columnKMINICIAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KMATUALColumn {
                get {
                    return this.columnKMATUAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRow this[int index] {
                get {
                    return ((pneusRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event pneusRowChangeEventHandler pneusRowChanging;
            
            public event pneusRowChangeEventHandler pneusRowChanged;
            
            public event pneusRowChangeEventHandler pneusRowDeleting;
            
            public event pneusRowChangeEventHandler pneusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpneusRow(pneusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRow AddpneusRow(int IDPNEUS, contratosRow parentcontratosRowByFK_PNEUS_2, string TIPOPNEU, int KMINICIAL, int KMATUAL) {
                pneusRow rowpneusRow = ((pneusRow)(this.NewRow()));
                rowpneusRow.ItemArray = new object[] {
                        IDPNEUS,
                        parentcontratosRowByFK_PNEUS_2[0],
                        TIPOPNEU,
                        KMINICIAL,
                        KMATUAL};
                this.Rows.Add(rowpneusRow);
                return rowpneusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRow FindByIDPNEUS(int IDPNEUS) {
                return ((pneusRow)(this.Rows.Find(new object[] {
                            IDPNEUS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                pneusDataTable cln = ((pneusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new pneusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDPNEUS = base.Columns["IDPNEUS"];
                this.columnCARROS_IDCARROS = base.Columns["CARROS_IDCARROS"];
                this.columnTIPOPNEU = base.Columns["TIPOPNEU"];
                this.columnKMINICIAL = base.Columns["KMINICIAL"];
                this.columnKMATUAL = base.Columns["KMATUAL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDPNEUS = new System.Data.DataColumn("IDPNEUS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPNEUS);
                this.columnCARROS_IDCARROS = new System.Data.DataColumn("CARROS_IDCARROS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARROS_IDCARROS);
                this.columnTIPOPNEU = new System.Data.DataColumn("TIPOPNEU", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPOPNEU);
                this.columnKMINICIAL = new System.Data.DataColumn("KMINICIAL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKMINICIAL);
                this.columnKMATUAL = new System.Data.DataColumn("KMATUAL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKMATUAL);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDPNEUS}, true));
                this.columnIDPNEUS.AllowDBNull = false;
                this.columnIDPNEUS.Unique = true;
                this.columnCARROS_IDCARROS.AllowDBNull = false;
                this.columnKMINICIAL.AllowDBNull = false;
                this.columnKMATUAL.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.pneus", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`pneus` (`CARROS_IDCARROS`, `TIPOPNEU`, `KMINICIAL`, `KMATUA" +
                        "L`) VALUES (:CARROS_IDCARROS, :TIPOPNEU, :KMINICIAL, :KMATUAL)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARROS_IDCARROS";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPOPNEU";
                param.Size = 0;
                param.SourceColumn = "TIPOPNEU";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMATUAL";
                param.Size = 0;
                param.SourceColumn = "KMATUAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`pneus` SET `CARROS_IDCARROS` = :CARROS_IDCARROS, `TIPOPNEU` = :TIPOPNEU, `KMINICIAL` = :KMINICIAL, `KMATUAL` = :KMATUAL WHERE ((`IDPNEUS` = :Original_IDPNEUS) AND (`CARROS_IDCARROS` = :Original_CARROS_IDCARROS) AND ((:IsNull_TIPOPNEU = 1 AND `TIPOPNEU` IS NULL) OR (`TIPOPNEU` = :Original_TIPOPNEU)) AND (`KMINICIAL` = :Original_KMINICIAL) AND (`KMATUAL` = :Original_KMATUAL))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CARROS_IDCARROS";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPOPNEU";
                param.Size = 0;
                param.SourceColumn = "TIPOPNEU";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KMATUAL";
                param.Size = 0;
                param.SourceColumn = "KMATUAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDPNEUS";
                param.Size = 0;
                param.SourceColumn = "IDPNEUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARROS_IDCARROS";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TIPOPNEU";
                param.Size = 0;
                param.SourceColumn = "TIPOPNEU";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPOPNEU";
                param.Size = 0;
                param.SourceColumn = "TIPOPNEU";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMATUAL";
                param.Size = 0;
                param.SourceColumn = "KMATUAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `fatcar`.`pneus` WHERE ((`IDPNEUS` = :Original_IDPNEUS) AND (`CARROS_IDCARROS` = :Original_CARROS_IDCARROS) AND ((:IsNull_TIPOPNEU = 1 AND `TIPOPNEU` IS NULL) OR (`TIPOPNEU` = :Original_TIPOPNEU)) AND (`KMINICIAL` = :Original_KMINICIAL) AND (`KMATUAL` = :Original_KMATUAL))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDPNEUS";
                param.Size = 0;
                param.SourceColumn = "IDPNEUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CARROS_IDCARROS";
                param.Size = 0;
                param.SourceColumn = "CARROS_IDCARROS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TIPOPNEU";
                param.Size = 0;
                param.SourceColumn = "TIPOPNEU";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPOPNEU";
                param.Size = 0;
                param.SourceColumn = "TIPOPNEU";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMINICIAL";
                param.Size = 0;
                param.SourceColumn = "KMINICIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KMATUAL";
                param.Size = 0;
                param.SourceColumn = "KMATUAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "pneus";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDPNEUS", "IDPNEUS");
                this.TableMapping.ColumnMappings.Add("CARROS_IDCARROS", "CARROS_IDCARROS");
                this.TableMapping.ColumnMappings.Add("TIPOPNEU", "TIPOPNEU");
                this.TableMapping.ColumnMappings.Add("KMINICIAL", "KMINICIAL");
                this.TableMapping.ColumnMappings.Add("KMATUAL", "KMATUAL");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRow NewpneusRow() {
                return ((pneusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new pneusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(pneusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pneusRowChanged != null)) {
                    this.pneusRowChanged(this, new pneusRowChangeEvent(((pneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pneusRowChanging != null)) {
                    this.pneusRowChanging(this, new pneusRowChangeEvent(((pneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pneusRowDeleted != null)) {
                    this.pneusRowDeleted(this, new pneusRowChangeEvent(((pneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pneusRowDeleting != null)) {
                    this.pneusRowDeleting(this, new pneusRowChangeEvent(((pneusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepneusRow(pneusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pneusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class pneusRow : System.Data.DataRow {
            
            private pneusDataTable tablepneus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pneusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepneus = ((pneusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPNEUS {
                get {
                    return ((int)(this[this.tablepneus.IDPNEUSColumn]));
                }
                set {
                    this[this.tablepneus.IDPNEUSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CARROS_IDCARROS {
                get {
                    return ((int)(this[this.tablepneus.CARROS_IDCARROSColumn]));
                }
                set {
                    this[this.tablepneus.CARROS_IDCARROSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIPOPNEU {
                get {
                    try {
                        return ((string)(this[this.tablepneus.TIPOPNEUColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepneus.TIPOPNEUColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KMINICIAL {
                get {
                    return ((int)(this[this.tablepneus.KMINICIALColumn]));
                }
                set {
                    this[this.tablepneus.KMINICIALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KMATUAL {
                get {
                    return ((int)(this[this.tablepneus.KMATUALColumn]));
                }
                set {
                    this[this.tablepneus.KMATUALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contratosRow contratosRow {
                get {
                    return ((contratosRow)(this.GetParentRow(this.Table.ParentRelations["FK_PNEUS_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PNEUS_2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIPOPNEUNull() {
                return this.IsNull(this.tablepneus.TIPOPNEUColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIPOPNEUNull() {
                this[this.tablepneus.TIPOPNEUColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class pneusRowChangeEvent : System.EventArgs {
            
            private pneusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRowChangeEvent(pneusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pneusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class telefoneclienteDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDTELEFONE;
            
            private System.Data.DataColumn columnCLIENTE_IDCLIENTE;
            
            private System.Data.DataColumn columnTIPO;
            
            private System.Data.DataColumn columnNUMTELEFONE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "telefonecliente";
                this.Name = "telefonecliente";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal telefoneclienteDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected telefoneclienteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDTELEFONEColumn {
                get {
                    return this.columnIDTELEFONE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CLIENTE_IDCLIENTEColumn {
                get {
                    return this.columnCLIENTE_IDCLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TIPOColumn {
                get {
                    return this.columnTIPO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NUMTELEFONEColumn {
                get {
                    return this.columnNUMTELEFONE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRow this[int index] {
                get {
                    return ((telefoneclienteRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event telefoneclienteRowChangeEventHandler telefoneclienteRowChanging;
            
            public event telefoneclienteRowChangeEventHandler telefoneclienteRowChanged;
            
            public event telefoneclienteRowChangeEventHandler telefoneclienteRowDeleting;
            
            public event telefoneclienteRowChangeEventHandler telefoneclienteRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtelefoneclienteRow(telefoneclienteRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRow AddtelefoneclienteRow(int IDTELEFONE, clienteRow parentclienteRowByFK_TELEFONECLIENTE_2, string TIPO, string NUMTELEFONE) {
                telefoneclienteRow rowtelefoneclienteRow = ((telefoneclienteRow)(this.NewRow()));
                rowtelefoneclienteRow.ItemArray = new object[] {
                        IDTELEFONE,
                        parentclienteRowByFK_TELEFONECLIENTE_2[0],
                        TIPO,
                        NUMTELEFONE};
                this.Rows.Add(rowtelefoneclienteRow);
                return rowtelefoneclienteRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRow FindByIDTELEFONE(int IDTELEFONE) {
                return ((telefoneclienteRow)(this.Rows.Find(new object[] {
                            IDTELEFONE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                telefoneclienteDataTable cln = ((telefoneclienteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new telefoneclienteDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDTELEFONE = base.Columns["IDTELEFONE"];
                this.columnCLIENTE_IDCLIENTE = base.Columns["CLIENTE_IDCLIENTE"];
                this.columnTIPO = base.Columns["TIPO"];
                this.columnNUMTELEFONE = base.Columns["NUMTELEFONE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDTELEFONE = new System.Data.DataColumn("IDTELEFONE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDTELEFONE);
                this.columnCLIENTE_IDCLIENTE = new System.Data.DataColumn("CLIENTE_IDCLIENTE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENTE_IDCLIENTE);
                this.columnTIPO = new System.Data.DataColumn("TIPO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPO);
                this.columnNUMTELEFONE = new System.Data.DataColumn("NUMTELEFONE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMTELEFONE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDTELEFONE}, true));
                this.columnIDTELEFONE.AllowDBNull = false;
                this.columnIDTELEFONE.Unique = true;
                this.columnCLIENTE_IDCLIENTE.AllowDBNull = false;
                this.columnTIPO.AllowDBNull = false;
                this.columnNUMTELEFONE.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.telefonecliente", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`telefonecliente` (`CLIENTE_IDCLIENTE`, `TIPO`, `NUMTELEFONE" +
                        "`) VALUES (:CLIENTE_IDCLIENTE, :TIPO, :NUMTELEFONE)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUMTELEFONE";
                param.Size = 0;
                param.SourceColumn = "NUMTELEFONE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `fatcar`.`telefonecliente` SET `CLIENTE_IDCLIENTE` = :CLIENTE_IDCLIENTE, `TIPO` = :TIPO, `NUMTELEFONE` = :NUMTELEFONE WHERE ((`IDTELEFONE` = :Original_IDTELEFONE) AND (`CLIENTE_IDCLIENTE` = :Original_CLIENTE_IDCLIENTE) AND (`TIPO` = :Original_TIPO) AND (`NUMTELEFONE` = :Original_NUMTELEFONE))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUMTELEFONE";
                param.Size = 0;
                param.SourceColumn = "NUMTELEFONE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDTELEFONE";
                param.Size = 0;
                param.SourceColumn = "IDTELEFONE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUMTELEFONE";
                param.Size = 0;
                param.SourceColumn = "NUMTELEFONE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`telefonecliente` WHERE ((`IDTELEFONE` = :Original_IDTELEFON" +
                        "E) AND (`CLIENTE_IDCLIENTE` = :Original_CLIENTE_IDCLIENTE) AND (`TIPO` = :Origin" +
                        "al_TIPO) AND (`NUMTELEFONE` = :Original_NUMTELEFONE))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDTELEFONE";
                param.Size = 0;
                param.SourceColumn = "IDTELEFONE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CLIENTE_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "CLIENTE_IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TIPO";
                param.Size = 0;
                param.SourceColumn = "TIPO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUMTELEFONE";
                param.Size = 0;
                param.SourceColumn = "NUMTELEFONE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "telefonecliente";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDTELEFONE", "IDTELEFONE");
                this.TableMapping.ColumnMappings.Add("CLIENTE_IDCLIENTE", "CLIENTE_IDCLIENTE");
                this.TableMapping.ColumnMappings.Add("TIPO", "TIPO");
                this.TableMapping.ColumnMappings.Add("NUMTELEFONE", "NUMTELEFONE");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRow NewtelefoneclienteRow() {
                return ((telefoneclienteRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new telefoneclienteRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(telefoneclienteRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.telefoneclienteRowChanged != null)) {
                    this.telefoneclienteRowChanged(this, new telefoneclienteRowChangeEvent(((telefoneclienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.telefoneclienteRowChanging != null)) {
                    this.telefoneclienteRowChanging(this, new telefoneclienteRowChangeEvent(((telefoneclienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.telefoneclienteRowDeleted != null)) {
                    this.telefoneclienteRowDeleted(this, new telefoneclienteRowChangeEvent(((telefoneclienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.telefoneclienteRowDeleting != null)) {
                    this.telefoneclienteRowDeleting(this, new telefoneclienteRowChangeEvent(((telefoneclienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetelefoneclienteRow(telefoneclienteRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "telefoneclienteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class telefoneclienteRow : System.Data.DataRow {
            
            private telefoneclienteDataTable tabletelefonecliente;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal telefoneclienteRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletelefonecliente = ((telefoneclienteDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDTELEFONE {
                get {
                    return ((int)(this[this.tabletelefonecliente.IDTELEFONEColumn]));
                }
                set {
                    this[this.tabletelefonecliente.IDTELEFONEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CLIENTE_IDCLIENTE {
                get {
                    return ((int)(this[this.tabletelefonecliente.CLIENTE_IDCLIENTEColumn]));
                }
                set {
                    this[this.tabletelefonecliente.CLIENTE_IDCLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIPO {
                get {
                    return ((string)(this[this.tabletelefonecliente.TIPOColumn]));
                }
                set {
                    this[this.tabletelefonecliente.TIPOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMTELEFONE {
                get {
                    return ((string)(this[this.tabletelefonecliente.NUMTELEFONEColumn]));
                }
                set {
                    this[this.tabletelefonecliente.NUMTELEFONEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow clienteRow {
                get {
                    return ((clienteRow)(this.GetParentRow(this.Table.ParentRelations["FK_TELEFONECLIENTE_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TELEFONECLIENTE_2"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class telefoneclienteRowChangeEvent : System.EventArgs {
            
            private telefoneclienteRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRowChangeEvent(telefoneclienteRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telefoneclienteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class usuariosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDUSUARIO;
            
            private System.Data.DataColumn columnNIVEL;
            
            private System.Data.DataColumn columnLOGIN;
            
            private System.Data.DataColumn columnPASS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "usuarios";
                this.Name = "usuarios";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal usuariosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected usuariosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDUSUARIOColumn {
                get {
                    return this.columnIDUSUARIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NIVELColumn {
                get {
                    return this.columnNIVEL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn LOGINColumn {
                get {
                    return this.columnLOGIN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PASSColumn {
                get {
                    return this.columnPASS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow this[int index] {
                get {
                    return ((usuariosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event usuariosRowChangeEventHandler usuariosRowChanging;
            
            public event usuariosRowChangeEventHandler usuariosRowChanged;
            
            public event usuariosRowChangeEventHandler usuariosRowDeleting;
            
            public event usuariosRowChangeEventHandler usuariosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddusuariosRow(usuariosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow AddusuariosRow(int IDUSUARIO, int NIVEL, string LOGIN, string PASS) {
                usuariosRow rowusuariosRow = ((usuariosRow)(this.NewRow()));
                rowusuariosRow.ItemArray = new object[] {
                        IDUSUARIO,
                        NIVEL,
                        LOGIN,
                        PASS};
                this.Rows.Add(rowusuariosRow);
                return rowusuariosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow FindByIDUSUARIO(int IDUSUARIO) {
                return ((usuariosRow)(this.Rows.Find(new object[] {
                            IDUSUARIO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                usuariosDataTable cln = ((usuariosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new usuariosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDUSUARIO = base.Columns["IDUSUARIO"];
                this.columnNIVEL = base.Columns["NIVEL"];
                this.columnLOGIN = base.Columns["LOGIN"];
                this.columnPASS = base.Columns["PASS"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDUSUARIO = new System.Data.DataColumn("IDUSUARIO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDUSUARIO);
                this.columnNIVEL = new System.Data.DataColumn("NIVEL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNIVEL);
                this.columnLOGIN = new System.Data.DataColumn("LOGIN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGIN);
                this.columnPASS = new System.Data.DataColumn("PASS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASS);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDUSUARIO}, true));
                this.columnIDUSUARIO.AllowDBNull = false;
                this.columnIDUSUARIO.Unique = true;
                this.columnNIVEL.AllowDBNull = false;
                this.columnLOGIN.AllowDBNull = false;
                this.columnPASS.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Database=fatcar;Persist Security Info=T" +
                            "rue;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from fatcar.usuarios", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `fatcar`.`usuarios` (`NIVEL`, `LOGIN`, `PASS`) VALUES (:NIVEL, :LOGIN" +
                        ", :PASS)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NIVEL";
                param.Size = 0;
                param.SourceColumn = "NIVEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LOGIN";
                param.Size = 0;
                param.SourceColumn = "LOGIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PASS";
                param.Size = 0;
                param.SourceColumn = "PASS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `fatcar`.`usuarios` SET `NIVEL` = :NIVEL, `LOGIN` = :LOGIN, `PASS` = :PASS" +
                        " WHERE ((`IDUSUARIO` = :Original_IDUSUARIO) AND (`NIVEL` = :Original_NIVEL) AND " +
                        "(`LOGIN` = :Original_LOGIN) AND (`PASS` = :Original_PASS))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NIVEL";
                param.Size = 0;
                param.SourceColumn = "NIVEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "LOGIN";
                param.Size = 0;
                param.SourceColumn = "LOGIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PASS";
                param.Size = 0;
                param.SourceColumn = "PASS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NIVEL";
                param.Size = 0;
                param.SourceColumn = "NIVEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LOGIN";
                param.Size = 0;
                param.SourceColumn = "LOGIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PASS";
                param.Size = 0;
                param.SourceColumn = "PASS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `fatcar`.`usuarios` WHERE ((`IDUSUARIO` = :Original_IDUSUARIO) AND (`" +
                        "NIVEL` = :Original_NIVEL) AND (`LOGIN` = :Original_LOGIN) AND (`PASS` = :Origina" +
                        "l_PASS))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDUSUARIO";
                param.Size = 0;
                param.SourceColumn = "IDUSUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NIVEL";
                param.Size = 0;
                param.SourceColumn = "NIVEL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_LOGIN";
                param.Size = 0;
                param.SourceColumn = "LOGIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PASS";
                param.Size = 0;
                param.SourceColumn = "PASS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "usuarios";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDUSUARIO", "IDUSUARIO");
                this.TableMapping.ColumnMappings.Add("NIVEL", "NIVEL");
                this.TableMapping.ColumnMappings.Add("LOGIN", "LOGIN");
                this.TableMapping.ColumnMappings.Add("PASS", "PASS");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow NewusuariosRow() {
                return ((usuariosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new usuariosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(usuariosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.usuariosRowChanged != null)) {
                    this.usuariosRowChanged(this, new usuariosRowChangeEvent(((usuariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.usuariosRowChanging != null)) {
                    this.usuariosRowChanging(this, new usuariosRowChangeEvent(((usuariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.usuariosRowDeleted != null)) {
                    this.usuariosRowDeleted(this, new usuariosRowChangeEvent(((usuariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.usuariosRowDeleting != null)) {
                    this.usuariosRowDeleting(this, new usuariosRowChangeEvent(((usuariosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveusuariosRow(usuariosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetFat ds = new DataSetFat();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "usuariosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public partial class usuariosRow : System.Data.DataRow {
            
            private usuariosDataTable tableusuarios;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal usuariosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableusuarios = ((usuariosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDUSUARIO {
                get {
                    return ((int)(this[this.tableusuarios.IDUSUARIOColumn]));
                }
                set {
                    this[this.tableusuarios.IDUSUARIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NIVEL {
                get {
                    return ((int)(this[this.tableusuarios.NIVELColumn]));
                }
                set {
                    this[this.tableusuarios.NIVELColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGIN {
                get {
                    return ((string)(this[this.tableusuarios.LOGINColumn]));
                }
                set {
                    this[this.tableusuarios.LOGINColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASS {
                get {
                    return ((string)(this[this.tableusuarios.PASSColumn]));
                }
                set {
                    this[this.tableusuarios.PASSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public funcionariosRow[] GetfuncionariosRows() {
                return ((funcionariosRow[])(this.GetChildRows(this.Table.ChildRelations["FK_FUNCIONARIOS_4"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clienteRow[] GetclienteRows() {
                return ((clienteRow[])(this.GetChildRows(this.Table.ChildRelations["FK_CLIENTE_2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2158.0")]
        public class usuariosRowChangeEvent : System.EventArgs {
            
            private usuariosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRowChangeEvent(usuariosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usuariosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
